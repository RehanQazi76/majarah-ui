{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index3.mjs","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/paneRouter/PaneRouterProvider.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/PaneResolutionError.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/assignId.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/createPaneResolver.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/memoBind.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/resolveIntent.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/structureResolvers/useResolvedPanes.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/intentResolver/utils.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/StructureError.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/panes/unknown/UnknownPaneType.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/panes/StructureToolPane.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/StructureTitle.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/StructureTool.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {toString as pathToString} from '@sanity/util/paths'\nimport {omit} from 'lodash'\nimport {type ReactNode, useCallback, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from '../../types'\nimport {usePaneLayout} from '../pane/usePaneLayout'\nimport {BackLink} from './BackLink'\nimport {ChildLink} from './ChildLink'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {type PaneRouterContextValue} from './types'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent, resolvePathFromState} = useRouter()\n  const routerState = useRouterState()\n  const {panes, expand} = usePaneLayout()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes],\n  )\n  const lastPane = useMemo(() => panes?.[panes.length - 2], [panes])\n\n  const groupIndex = index - 1\n\n  const createNextRouterState = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...routerState, panes: nextPanes}\n\n      return nextRouterState\n    },\n    [groupIndex, routerPaneGroups, routerState, siblingIndex],\n  )\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const nextRouterState = createNextRouterState(modifier)\n      setTimeout(() => navigate(nextRouterState), 0)\n      return nextRouterState\n    },\n    [createNextRouterState, navigate],\n  )\n\n  const createPathWithParams: PaneRouterContextValue['createPathWithParams'] = useCallback(\n    (nextParams) => {\n      const nextRouterState = createNextRouterState((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n\n      return resolvePathFromState(nextRouterState)\n    },\n    [createNextRouterState, resolvePathFromState, siblingIndex],\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex],\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template, version}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {\n                template: template.id,\n                parentRefPath: pathToString(parentRefPath),\n                type,\n                version,\n              },\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups],\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      // Only pass if this is not the first pane\n      BackLink: flatIndex ? BackLink : undefined,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings,\n        )\n      },\n\n      // Removes all panes to the right including current\n      closeCurrentAndAfter: (expandLast = true): void => {\n        if (expandLast && lastPane) {\n          expand(lastPane.element)\n        }\n        navigate({\n          panes: routerPaneGroups.slice(0, groupIndex),\n        })\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // A function that returns a path with the given parameters\n      createPathWithParams,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      siblingIndex,\n      payload,\n      params,\n      routerPaneGroups,\n      handleEditReference,\n      setParams,\n      setPayload,\n      createPathWithParams,\n      navigateIntent,\n      modifyCurrentGroup,\n      lastPane,\n      navigate,\n      expand,\n    ],\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n","import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {isRecord, Translate, useTranslation} from 'sanity'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n  const {t} = useTranslation(structureLocaleNamespace)\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title={t('panes.unknown-pane-type.title')} />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              <Translate\n                t={t}\n                i18nKey=\"panes.unknown-pane-type.unknown-type.text\"\n                values={{type}}\n              />\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              <Translate t={t} i18nKey=\"panes.unknown-pane-type.missing-type.text\" />\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {isEqual} from 'lodash'\nimport {lazy, memo, Suspense} from 'react'\n\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {type PaneNode} from '../types'\nimport {LoadingPane} from './loading'\nimport {UnknownPane} from './unknown'\n\ninterface StructureToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined> & {perspective?: string}\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document/pane')),\n  documentList: lazy(() => import('./documentList/pane')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const StructureToolPane = memo(\n  function StructureToolPane(props: StructureToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next},\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  },\n)\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: true,\n    schemaType,\n    value: documentValue,\n  })\n\n  const documentTitle = isNewDocument\n    ? t('browser-document-title.new-document', {\n        schemaType: schemaType?.title || schemaType?.name,\n      })\n    : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["emptyArray","PaneRouterProvider","props","$","_c","children","flatIndex","index","params","payload","siblingIndex","navigate","navigateIntent","resolvePathFromState","useRouter","routerState","useRouterState","panes","expand","usePaneLayout","t0","routerPaneGroups","t1","length","lastPane","groupIndex","t2","modifier","currentGroup","currentItem","nextGroup","nextPanes","slice","createNextRouterState","t3","modifier_0","nextRouterState_0","setTimeout","nextRouterState","modifyCurrentGroup","t4","nextParams","nextRouterState_1","siblings","item","createPathWithParams","t5","nextPayload","siblings_0","item_0","setPayload","t6","nextParams_0","siblings_1","item_1","setParams","t7","t8","id","parentRefPath","type","template","version","pathToString","handleEditReference","t9","t10","t11","BackLink","undefined","t12","t13","t14","opts","_temp","t15","element","options","siblings_3","item_3","duplicatedItem","t16","viewId","restParams","omit","view","t17","hasGroupSiblings","groupLength","routerPanesState","ChildLink","ReferenceChildLink","ParameterizedLink","replaceCurrent","closeCurrent","closeCurrentAndAfter","duplicateCurrent","setView","ctx","t18","siblings_2","item_2","filter","sibling","PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","map","i","depthIndex","canHandleIntent","pane","child","items","Promise","all","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","routerStateSubject","useState","asObservable","_temp2","routerPanes$","state","useEffect","_routerState","ReplaySubject","useResolvedPanes","error","setError","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp5","subscribe","unsubscribe","reduce","_temp3","groupsLen","itemId","active","childItemId","LOADING_PANE","selected","_temp4","pane_0","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","maybeIntent","useDocumentStore","cancelled","effect","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","showStack","SerializeError","includes","handleReload","SyncIcon","segment","reload","UnknownPane","isSelected","paneKey","paneMap","component","lazy","document","documentList","list","StructureToolPane","PaneComponent","prevParams","prevPayload","keys","Object","NoDocumentTypesScreen","DocumentTitle","documentType","selectedReleaseId","usePerspective","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","value","isLoading","previewValueIsLoading","useValuePreview","enabled","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","PassthroughTitle","StructureTitle","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","paneIndex","paneParams","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"debugId":null}}]
}