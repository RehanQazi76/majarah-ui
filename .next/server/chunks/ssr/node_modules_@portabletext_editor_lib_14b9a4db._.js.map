{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"use-editor.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/global-scope.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/globally-scoped-context.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-context.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/use-editor.ts"],"sourcesContent":["/**\n * Gets the global scope instance in a given environment.\n *\n * The strategy is to return the most modern, and if not, the most common:\n * - The `globalThis` variable is the modern approach to accessing the global scope\n * - The `window` variable is the global scope in a web browser\n * - The `self` variable is the global scope in workers and others\n * - The `global` variable is the global scope in Node.js\n */\nfunction getGlobalScope() {\n  if (typeof globalThis !== 'undefined') return globalThis\n  if (typeof window !== 'undefined') return window\n  if (typeof self !== 'undefined') return self\n  if (typeof global !== 'undefined') return global\n\n  throw new Error('@portabletext/editor: could not locate global scope')\n}\n\nexport const globalScope = getGlobalScope() as any\n","import {createContext, type Context} from 'react'\nimport {globalScope} from './global-scope'\n\n/**\n * As `@portabletext/editor` is declared as a dependency, and may be\n * duplicated, sometimes across major versions it's critical that vital\n * React Contexts are shared even when there is a duplicate.\n *\n * We have to support a Sanity Plugin being able to call hooks like\n * `useEditor`, and then read the context setup by `sanity`, which calls\n * `EditorProvider`, even if the provider and hook are different instances in\n * memory.\n *\n * For this reason it's vital that all changes to globally scoped providers\n * remain fully backwards compatible.\n */\nexport function createGloballyScopedContext<\n  ContextType,\n  const T extends ContextType = ContextType,\n>(\n  /**\n   * Enforce that all Symbol.for keys used for globally scoped contexts have a predictable prefix\n   */\n  key: `@portabletext/editor/context/${string}`,\n  defaultValue: T,\n): Context<ContextType> {\n  const symbol = Symbol.for(key)\n\n  /**\n   * Prevent errors about re-renders on React SSR on Next.js App Router\n   */\n  if (typeof document === 'undefined') {\n    return createContext<ContextType>(defaultValue)\n  }\n\n  globalScope[symbol] = globalScope[symbol] ?? createContext<T>(defaultValue)\n\n  return globalScope[symbol]\n}\n","import type {Editor} from '../editor'\nimport {createGloballyScopedContext} from '../internal-utils/globally-scoped-context'\n\nexport const EditorContext = createGloballyScopedContext<Editor | null>(\n  '@portabletext/editor/context/editor',\n  null,\n)\n","import React from 'react'\nimport {EditorContext} from './editor-context'\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["getGlobalScope","globalThis","window","self","global","Error","globalScope","createGloballyScopedContext","key","defaultValue","symbol","Symbol","for","document","createContext","EditorContext","useEditor","editor","React","useContext"],"mappings":";;;;;;AASA,SAASA,iBAAiB;IACxB,IAAI,OAAOC,aAAe,IAAa,CAAA,OAAOA;IAC9C,IAAI,OAAOC,SAAW,IAAa,CAAA,OAAOA;IAC1C,IAAI,OAAOC,OAAS,IAAa,CAAA,OAAOA;IACxC,IAAI,OAAOC,SAAW,IAAa,CAAA,OAAOA;IAE1C,MAAM,IAAIC,MAAM,qDAAqD;AACvE;AAEO,MAAMC,cAAcN,eAAAA;ACFpB,SAASO,4BAOdC,GAAAA,EACAC,YAAAA,EACsB;IACtB,MAAMC,SAASC,OAAOC,GAAAA,CAAIJ,GAAG;IAK7B,OAAI,OAAOK,WAAa,gNACfC,gBAAAA,EAA2BL,YAAY,IAAA,CAGhDH,WAAAA,CAAYI,MAAM,CAAA,GAAIJ,WAAAA,CAAYI,MAAM,CAAA,8MAAKI,gBAAAA,EAAiBL,YAAY,GAEnEH,WAAAA,CAAYI,MAAM,CAAA;AAC3B;ACnCO,MAAMK,gBAAgBR,4BAC3B,uCACA,IACF;ACYO,SAAAS,YAAA;IACL,MAAAC,+MAAeC,UAAAA,CAAAC,UAAAA,CAAAJ,aAA8B;IAAC,IAAA,CAEzCE,QAAM,MAAA,IAAAZ,MACO,+CAA+C;IAAA,OAG1DY;AAAM","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"file":"util.slice-blocks.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selection/selection-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.get-selection-start-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-span.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\n\nexport function getBlockKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const blockPathSegment = point.path.at(0)\n\n  if (isKeyedSegment(blockPathSegment)) {\n    return blockPathSegment._key\n  }\n\n  return undefined\n}\n\nexport function getChildKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const childPathSegment = point.path.at(2)\n\n  if (isKeyedSegment(childPathSegment)) {\n    return childPathSegment._key\n  }\n\n  return undefined\n}\n","import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextListBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n  TypedObject,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    refreshKeys: boolean\n    validateFields: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n    validateFields: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nexport function parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.blockObjects.find(\n    ({name}) => name === blockObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: blockObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function isListBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextListBlock {\n  return (\n    isTextBlock(context, block) &&\n    block.level !== undefined &&\n    block.listItem !== undefined\n  )\n}\n\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  if (!isTypedObject(block)) {\n    return false\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return false\n  }\n\n  if (!Array.isArray(block.children)) {\n    return false\n  }\n\n  return true\n}\n\nexport function parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(block)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'children' &&\n      key !== 'markDefs' &&\n      key !== 'style' &&\n      key !== 'listItem' &&\n      key !== 'level'\n    ) {\n      customFields[key] = block[key]\n    }\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    const schemaType = context.schema.annotations.find(\n      ({name}) => name === markDef._type,\n    )\n\n    if (!schemaType) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      // If the `markDef` doesn't have a `_key` then we don't know what spans\n      // it belongs to and therefore we have to discard it.\n      return []\n    }\n\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator,\n      },\n      options,\n    })\n\n    if (!parsedAnnotation) {\n      return []\n    }\n\n    markDefKeyMap.set(markDef._key, parsedAnnotation._key)\n\n    return [parsedAnnotation]\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n    ...(options.validateFields ? {} : customFields),\n  }\n\n  if (\n    typeof block.style === 'string' &&\n    context.schema.styles.find((style) => style.name === block.style)\n  ) {\n    parsedBlock.style = block.style\n  } else {\n    const defaultStyle = context.schema.styles.at(0)?.name\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      console.error('Expected default style')\n    }\n  }\n\n  if (\n    typeof block.listItem === 'string' &&\n    context.schema.lists.find((list) => list.name === block.listItem)\n  ) {\n    parsedBlock.listItem = block.listItem\n  }\n\n  if (typeof block.level === 'number') {\n    parsedBlock.level = block.level\n  }\n\n  return parsedBlock\n}\n\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: unknown,\n): child is PortableTextSpan {\n  if (!isTypedObject(child)) {\n    return false\n  }\n\n  if (child._type !== context.schema.span.name) {\n    return false\n  }\n\n  if (typeof child.text !== 'string') {\n    return false\n  }\n\n  return true\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(span)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'text' &&\n      key !== 'marks'\n    ) {\n      customFields[key] = span[key]\n    }\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.name === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n    ...(options.validateFields ? {} : customFields),\n  }\n}\n\nexport function parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.inlineObjects.find(\n    ({name}) => name === inlineObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: inlineObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function parseAnnotation({\n  annotation,\n  context,\n  options,\n}: {\n  annotation: TypedObject\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(annotation)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.annotations.find(\n    ({name}) => name === annotation._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: annotation,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nfunction parseObject({\n  object,\n  context,\n  options,\n}: {\n  object: TypedObject\n  context: Pick<EditorContext, 'keyGenerator'> & {\n    schemaType: EditorSchema['blockObjects'][0]\n  }\n  options: {refreshKeys: boolean; validateFields: boolean}\n}): PortableTextObject {\n  const {_type, _key, ...customFields} = object\n\n  // Validates all props on the object and only takes those that match\n  // the name of a field\n  const values = options.validateFields\n    ? context.schemaType.fields.reduce<Record<string, unknown>>(\n        (fieldValues, field) => {\n          const fieldValue = object[field.name]\n\n          if (fieldValue !== undefined) {\n            fieldValues[field.name] = fieldValue\n          }\n\n          return fieldValues\n        },\n        {},\n      )\n    : customFields\n\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof object._key === 'string'\n        ? object._key\n        : context.keyGenerator(),\n    ...values,\n  }\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {ChildPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint: {path: ChildPath; offset: number} | undefined\n  let skippedInlineObject = false\n\n  for (const block of context.value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isSpan(context, child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isSpan(context, child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const spanKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isSpan(context, child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    return {\n      path: [...block.path, 'children', {_key: block.node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionStartPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.focus : selection.anchor\n  ) as TEditorSelectionPoint\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import type {PortableTextChild, PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '..'\n\n/**\n * @public\n */\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: PortableTextChild,\n): child is PortableTextSpan {\n  return child._type === context.schema.span.name\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  context,\n  blocks,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  blocks: Array<PortableTextBlock>\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!context.selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isTextBlock(context, block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan(context, child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isTextBlock(context, startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isSpan(context, child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(block)\n    }\n  }\n\n  return [\n    ...(startBlock ? [startBlock] : []),\n    ...middleBlocks,\n    ...(endBlock ? [endBlock] : []),\n  ]\n}\n"],"names":["isKeyedSegment","segment","getBlockKeyFromSelectionPoint","point","blockPathSegment","path","at","_key","getChildKeyFromSelectionPoint","childPathSegment","isTypedObject","object","isRecord","_type","value","parseBlocks","context","blocks","options","Array","isArray","flatMap","block","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schemaType","schema","blockObjects","find","name","parseObject","keyGenerator","isListBlock","isTextBlock","level","undefined","listItem","children","customFields","key","Object","keys","refreshKeys","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","parsedAnnotation","set","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","length","text","marks","validateFields","style","styles","defaultStyle","console","error","lists","list","isSpan","mark","markDefKey","get","decorators","some","decorator","inlineObjects","parseAnnotation","annotation","values","fields","reduce","fieldValues","field","fieldValue","blockOffsetToSpanSelectionPoint","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","spanSelectionPointToBlockOffset","blockKey","spanKey","getBlockStartPoint","node","getSelectionEndPoint","selection","backward","anchor","focus","getSelectionStartPoint","getTextBlockText","join","sliceBlocks","slice","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","startChildKey","endBlockKey","endChildKey","push"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10],"debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"file":"util.is-selection-collapsed.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...block.path, 'children', {_key: lastChild._key}],\n        offset: isSpan(context, lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: PortableTextBlock,\n) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  const onlyText = block.children.every((child) => isSpan(context, child))\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(selection.anchor.path) ===\n      JSON.stringify(selection.focus.path) &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n"],"names":["getBlockEndPoint","context","block","isTextBlock","node","lastChild","children","length","path","_key","offset","isSpan","text","isEmptyTextBlock","onlyText","every","child","blockText","getTextBlockText","isEqualSelectionPoints","a","b","JSON","stringify","isSelectionCollapsed","selection","anchor","focus"],"mappings":";;;;;;;;AASO,SAASA,iBAAiB,EAC/BC,OAAAA,EACAC,KAAAA,EAOF,EAAyB;IACvB,oMAAIC,cAAAA,EAAYF,SAASC,MAAME,IAAI,GAAG;QACpC,MAAMC,YAAYH,MAAME,IAAAA,CAAKE,QAAAA,CAASJ,MAAME,IAAAA,CAAKE,QAAAA,CAASC,MAAAA,GAAS,CAAC,CAAA;QAEpE,IAAIF,WACF,OAAO;YACLG,MAAM,CAAC;mBAAGN,MAAMM,IAAAA;gBAAM;gBAAY;oBAACC,MAAMJ,UAAUI,IAAAA;gBAAAA,CAAK;aAAA;YACxDC,SAAQC,wMAAAA,EAAOV,SAASI,SAAS,IAAIA,UAAUO,IAAAA,CAAKL,MAAAA,GAAS;QAAA;IAGnE;IAEA,OAAO;QACLC,MAAMN,MAAMM,IAAAA;QACZE,QAAQ;IAAA;AAEZ;AC1BO,SAASG,iBACdZ,OAAAA,EACAC,KAAAA,EACA;IACA,IAAI,iMAACC,cAAAA,EAAYF,SAASC,KAAK,GAC7B,OAAO,CAAA;IAGT,MAAMY,WAAWZ,MAAMI,QAAAA,CAASS,KAAAA,CAAOC,CAAAA,wMAAUL,SAAAA,EAAOV,SAASe,KAAK,CAAC,GACjEC,4MAAYC,mBAAAA,EAAiBhB,KAAK;IAExC,OAAOY,YAAYG,cAAc;AACnC;ACfO,SAASE,uBACdC,CAAAA,EACAC,CAAAA,EACA;IACA,OACED,EAAEV,MAAAA,KAAWW,EAAEX,MAAAA,IAAUY,KAAKC,SAAAA,CAAUH,EAAEZ,IAAI,MAAMc,KAAKC,SAAAA,CAAUF,EAAEb,IAAI;AAE7E;ACPO,SAASgB,qBAAqBC,SAAAA,EAA4B;IAC/D,OAAKA,YAKHH,KAAKC,SAAAA,CAAUE,UAAUC,MAAAA,CAAOlB,IAAI,MAClCc,KAAKC,SAAAA,CAAUE,UAAUE,KAAAA,CAAMnB,IAAI,KACrCiB,UAAUC,MAAAA,CAAOhB,MAAAA,KAAWe,UAAUE,KAAAA,CAAMjB,MAAAA,GANrC,CAAA;AAQX","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"file":"selector.is-selection-expanded.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-text-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-child.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-span.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-value.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = getBlockKeyFromSelectionPoint(snapshot.context.selection.focus)\n  const index = key ? snapshot.blockIndexMap.get(key) : undefined\n\n  const node =\n    index !== undefined ? snapshot.context.value.at(index) : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = getChildKeyFromSelectionPoint(snapshot.context.selection.focus)\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../internal-utils/parse-blocks'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  {node: PortableTextSpan; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isSpan(snapshot.context, focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  sliceBlocks,\n} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedValue: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  const selection = snapshot.context.selection\n\n  if (!selection) {\n    return []\n  }\n\n  const startPoint = getSelectionStartPoint(selection)\n  const endPoint = getSelectionEndPoint(selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return []\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return []\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  return sliceBlocks({\n    context: snapshot.context,\n    blocks: slicedValue,\n  })\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedValue = getSelectedValue(snapshot)\n\n  return selectedValue.reduce((text, block) => {\n    if (!isTextBlock(snapshot.context, block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isSpan(snapshot.context, child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n"],"names":["getFocusBlock","snapshot","context","selection","key","getBlockKeyFromSelectionPoint","focus","index","blockIndexMap","get","undefined","node","value","at","path","_key","getFocusTextBlock","focusBlock","isTextBlock","getFocusChild","getChildKeyFromSelectionPoint","children","find","span","getFocusSpan","focusChild","isSpan","getSelectionStartPoint","backward","anchor","getPreviousInlineObject","focusTextBlock","selectionStartPoint","selectionStartPointChildKey","isKeySegment","inlineObject","child","getSelectedValue","startPoint","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startBlockIndex","endBlockIndex","slicedValue","slice","sliceBlocks","blocks","getSelectionText","reduce","text","block","isSelectionCollapsed","JSON","stringify","offset","isSelectionExpanded"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"file":"selector.is-selecting-entire-blocks.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-selection-expanded.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-next-span.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-span.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-mark-state.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-blocks.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-first-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block-object.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-list-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-last-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-next-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotation-marks.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-active-decorators.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import type {EditorSelection} from '../types/editor'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isSelectionExpanded(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return !isSelectionCollapsed(selection)\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  if (!endPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: endPoint,\n        focus: endPoint,\n      },\n    },\n  })\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n\n  if (!selectionEndBlock || !selectionEndPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionEndBlock.node)) {\n    return undefined\n  }\n\n  const selectionEndPointChildKey =\n    getChildKeyFromSelectionPoint(selectionEndPoint)\n\n  let endPointChildFound = false\n  let nextSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (isSpan(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n\n  if (!startPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n}\n","import type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n\n  if (!selectionStartBlock || !selectionStartPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionStartBlock.node)) {\n    return undefined\n  }\n\n  const selectionStartPointChildKey =\n    getChildKeyFromSelectionPoint(selectionStartPoint)\n\n  let previousSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (isSpan(snapshot.context, child)) {\n      previousSpan = {\n        node: child,\n        path: [...selectionStartBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return previousSpan\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return selectedSpans\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const startSpanKey = getChildKeyFromSelectionPoint(startPoint)\n  const endSpanKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedSpans\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionExpanded} from '../utils/util.is-selection-expanded'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextSpan} from './selector.get-next-span'\nimport {getPreviousSpan} from './selector.get-previous-span'\nimport {getSelectedSpans} from './selector.get-selected-spans'\n\nexport type MarkState = {\n  state: 'changed' | 'unchanged'\n  marks: Array<string>\n}\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport const getMarkState: EditorSelector<MarkState | undefined> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (!focusTextBlock || !focusSpan) {\n    return undefined\n  }\n\n  if (isSelectionExpanded(snapshot.context.selection)) {\n    const selectedSpans = getSelectedSpans(snapshot)\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (span.node.marks?.length === 0) {\n          marks = []\n          continue\n        }\n\n        marks = marks.filter((mark) =>\n          (span.node.marks ?? []).some((spanMark) => spanMark === mark),\n        )\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = snapshot.context.schema.decorators.map(\n    (decorator) => decorator.name,\n  )\n  const marks = focusSpan.node.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = focusSpan.node.text.length === 0\n\n  const atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0\n  const atTheEndOfSpan =\n    snapshot.context.selection.anchor.offset === focusSpan.node.text.length\n\n  const previousSpan = getPreviousSpan(snapshot)\n  const nextSpan = getNextSpan(snapshot)\n  const nextSpanAnnotations =\n    nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.node.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.node.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.node.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          marks: focusSpan.node.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          marks: nextSpan?.node.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        marks: (previousSpan?.node.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks: focusSpan.node.marks ?? [],\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: BlockPath}> = []\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getMarkState} from './selector.get-mark-state'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const markState = getMarkState(snapshot)\n\n  const activeAnnotations = (markState?.marks ?? []).filter(\n    (mark) =>\n      !snapshot.context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n  )\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils/util.block-offset'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import {isPortableTextSpan, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  {node: PortableTextObject; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key)\n\n  if (index === undefined || index === snapshot.context.value.length - 1) {\n    return undefined\n  }\n\n  const nextBlock = snapshot.context.value.at(index + 1)\n\n  return nextBlock\n    ? {node: nextBlock, path: [{_key: nextBlock._key}]}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key)\n\n  if (index === undefined || index === 0) {\n    return undefined\n  }\n\n  const previousBlock = snapshot.context.value.at(index - 1)\n\n  return previousBlock\n    ? {node: previousBlock, path: [{_key: previousBlock._key}]}\n    : undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint, getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: BlockPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedTextBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedTextBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  isEmptyTextBlock,\n} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return snapshot.context.selection\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveAnnotationsMarks(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const markState = getMarkState(snapshot)\n\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getActiveAnnotationsMarks} from './selector.get-active-annotation-marks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveDecorators(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const decoratorState = snapshot.decoratorState\n  const markState = getMarkState(snapshot)\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveDecorators} from './selector.get-active-decorators'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    const activeDecorators = getActiveDecorators(snapshot)\n\n    return activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const endPoint = getSelectionEndPoint(snapshot.context.selection)\n    const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n    const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n    const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n    if (pointBlockIndex === undefined || endBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex > endBlockIndex) {\n      // The point block is after the end block.\n      return true\n    }\n\n    if (pointBlockIndex < endBlockIndex) {\n      // The point block is before the end block.\n      return false\n    }\n\n    // The point block is the same as the end block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the end block, the point is not\n      // after the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let endChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the end block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === endChildKey) {\n        return point.offset > endPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === endChildKey) {\n        endChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && endChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || endChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex > endChildIndex\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const startPoint = getSelectionStartPoint(snapshot.context.selection)\n    const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n    const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n\n    if (startBlockIndex === undefined || pointBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex < startBlockIndex) {\n      // The point block is before the start block.\n      return true\n    }\n\n    if (pointBlockIndex > startBlockIndex) {\n      // The point block is after the start block.\n      return false\n    }\n\n    // The point block is the same as the start block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the start block, the point is not\n      // before the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let startChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the start block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === startChildKey) {\n        return point.offset < startPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === startChildKey) {\n        startChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && startChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || startChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex < startChildIndex\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = utils.getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["isSelectionExpanded","selection","isSelectionCollapsed","getSelectionEndBlock","snapshot","endPoint","getSelectionEndPoint","context","getFocusBlock","anchor","focus","backward","getNextSpan","selectionEndBlock","selectionEndPoint","isTextBlock","node","selectionEndPointChildKey","getChildKeyFromSelectionPoint","endPointChildFound","nextSpan","child","children","_key","isSpan","path","getSelectionStartBlock","startPoint","getSelectionStartPoint","getPreviousSpan","selectionStartBlock","selectionStartPoint","selectionStartPointChildKey","previousSpan","getSelectedSpans","selectedSpans","startBlockKey","getBlockKeyFromSelectionPoint","endBlockKey","startSpanKey","endSpanKey","startBlockIndex","blockIndexMap","get","endBlockIndex","undefined","slicedValue","value","slice","startBlockFound","block","offset","text","length","push","getMarkState","focusTextBlock","getFocusTextBlock","focusSpan","getFocusSpan","index","marks","span","filter","mark","some","spanMark","state","decorators","schema","map","decorator","name","marksWithoutAnnotations","includes","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","nextSpanAnnotations","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","every","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","getSelectedBlocks","selectedBlocks","startKey","endKey","getActiveAnnotations","activeAnnotations","flatMap","markDefs","markDef","getActiveListItem","selectedTextBlocks","firstTextBlock","at","firstListItem","listItem","getActiveStyle","firstStyle","style","getNextInlineObject","isKeySegment","inlineObject","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","getFirstBlock","getFocusBlockObject","focusBlock","getFocusInlineObject","focusChild","getFocusChild","isPortableTextSpan","getFocusListBlock","isListBlock","getLastBlock","getNextBlock","nextBlock","getPreviousBlock","previousBlock","getSelectedTextBlocks","getTrimmedSelection","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","getActiveAnnotationsMarks","isActiveAnnotation","annotation","selectionMarkDefs","_type","getActiveDecorators","decoratorState","markState","activeDecorators","activeDecorator","isActiveDecorator","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","pointBlockKey","pointChildKey","pointBlockIndex","pointBlock","pointChildIndex","endChildIndex","childIndex","isPointBeforeSelection","startChildIndex","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","endPointEqualToOriginalStartPoint","isEqualSelectionPoints","startPointEqualToOriginalEndPoint","isSelectingEntireBlocks","startBlock","endBlock","startBlockStartPoint","endBlockEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"debugId":null}},
    {"offset": {"line": 1357, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts"],"sourcesContent":["import type {EditorDom} from '../editor/editor-dom'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  CustomBehaviorEvent,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | {\n      type: 'execute'\n      event: SyntheticBehaviorEvent\n    }\n  | {\n      type: 'forward'\n      event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'raise'\n      event: SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n\n/**\n * @beta\n */\nexport function execute(\n  event: SyntheticBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'execute'> {\n  return {type: 'execute', event}\n}\n\n/**\n * @beta\n */\nexport function forward(\n  event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'forward'> {\n  return {type: 'forward', event}\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport function effect(\n  effect: () => void,\n): PickFromUnion<BehaviorAction, 'type', 'effect'> {\n  return {type: 'effect', effect}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n    dom: EditorDom\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * Editor Event that triggers this Behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the Behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of Behavior Action sets.\n   * Each set represents a step in the history stack.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n"],"names":["execute","event","type","forward","raise","effect","defineBehavior","behavior"],"mappings":";;;;;;;AAiCO,SAASA,QACdC,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASE,QACdF,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASG,MACdH,KAAAA,EACgD;IAChD,OAAO;QAACC,MAAM;QAASD;IAAAA;AACzB;AAKO,SAASI,OACdA,OAAAA,EACiD;IACjD,OAAO;QAACH,MAAM;QAAUG,QAAAA;IAAAA;AAC1B;ACKO,SAASC,eAYdC,QAAAA,EACU;IACV,OAAOA;AACT","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1399, "column": 0}, "map": {"version":3,"file":"util.child-selection-point-to-block-offset.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset,\n}: {\n  context: Pick<EditorContext, 'value'>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of context.value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      context,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {EditorSelection} from '..'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  context,\n  offsets,\n  backward,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const childKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isSpan(context, child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n"],"names":["blockOffsetToBlockSelectionPoint","context","blockOffset","selectionPoint","block","value","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","getBlockKeyFromSelectionPoint","childKey","getChildKeyFromSelectionPoint","isTextBlock","child","children","isSpan","text","length"],"mappings":";;;;;;;;AAOO,SAASA,iCAAiC,EAC/CC,OAAAA,EACAC,WAAAA,EAIF,EAAqC;IACnC,IAAIC;IAEJ,KAAA,MAAWC,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASJ,YAAYK,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC3CH,iBAAiB;YACfI,MAAM;gBAAC;oBAACD,MAAMF,MAAME,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQN,YAAYM,MAAAA;QAAAA;QAEtB;IACF;IAGF,OAAOL;AACT;AClBO,SAASM,4BAA4B,EAC1CR,OAAAA,EACAC,WAAAA,EACAQ,SAAAA,EAKF,EAAqC;IAOnC,uMAN2BC,kCAAAA,EAAgC;QACzDV;QACAC;QACAQ;IAAAA,CACD,KAGQV,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASU,wBAAwB,EACtCX,OAAAA,EACAY,OAAAA,EACAC,QAAAA,EAKF,EAAoB;IAClB,MAAMC,SAASN,4BAA4B;QACzCR;QACAC,aAAaW,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCR;QACAC,aAAaW,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IAAAA;AAEJ;ACzBO,SAASG,iCAAiC,EAC/ChB,OAAAA,EACAE,cAAAA,EAIF,EAA4B;IAC1B,IAAIK,SAAS;IAEb,MAAMU,2MAAWC,gCAAAA,EAA8BhB,cAAc,GACvDiB,2MAAWC,gCAAAA,EAA8BlB,cAAc;IAE7D,IAAI,CAAA,CAAA,CAACe,YAAY,CAACE,QAAAA,GAAAA;QAIlB,KAAA,MAAWhB,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASY,4MAIdI,cAAAA,EAAYrB,SAASG,KAAK,GAI/B,KAAA,MAAWmB,SAASnB,MAAMoB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASc,UACjB,OAAO;gBACLb,MAAM;oBAAC;wBAACD,MAAMF,MAAME,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASL,eAAeK,MAAAA;YAAAA;YAIhCiB,CAAAA,GAAAA,2LAAAA,CAAAA,SAAAA,EAAOxB,SAASsB,KAAK,KAAA,CACvBf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAEzB;IAAA;AAEJ","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 1473, "column": 0}, "map": {"version":3,"file":"util.slice-text-block.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.slice-text-block.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (selectionPoint.path.length === 1 && blockKey !== undefined) {\n    return {\n      path: [{_key: blockKey}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    context,\n    selectionPoint,\n  })\n}\n","import type {PortableTextChild, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isSpan} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport {getSelectionEndPoint} from './util.get-selection-end-point'\nimport {getSelectionStartPoint} from './util.get-selection-start-point'\n\nexport function sliceTextBlock({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  block: PortableTextTextBlock\n}): PortableTextTextBlock {\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n\n  if (!startPoint || !endPoint) {\n    return block\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key) {\n    return block\n  }\n\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startChildKey || !endChildKey) {\n    return block\n  }\n\n  let startChildFound = false\n  const children: Array<PortableTextChild> = []\n\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      startChildFound = true\n\n      if (isSpan(context, child)) {\n        const text =\n          child._key === endChildKey\n            ? child.text.slice(startPoint.offset, endPoint.offset)\n            : child.text.slice(startPoint.offset)\n\n        children.push({\n          ...child,\n          text,\n        })\n      } else {\n        children.push(child)\n      }\n\n      if (startChildKey === endChildKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (child._key === endChildKey) {\n      if (isSpan(context, child)) {\n        children.push({\n          ...child,\n          text: child.text.slice(0, endPoint.offset),\n        })\n      } else {\n        children.push(child)\n      }\n\n      break\n    }\n\n    if (startChildFound) {\n      children.push(child)\n    }\n  }\n\n  return {\n    ...block,\n    children,\n  }\n}\n"],"names":["selectionPointToBlockOffset","context","selectionPoint","blockKey","getBlockKeyFromSelectionPoint","path","length","undefined","_key","offset","childSelectionPointToBlockOffset","sliceTextBlock","block","startPoint","getSelectionStartPoint","selection","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startChildKey","getChildKeyFromSelectionPoint","endChildKey","startChildFound","children","child","isSpan","text","slice","push"],"mappings":";;;;;;;;AASO,SAASA,4BAA4B,EAC1CC,OAAAA,EACAC,cAAAA,EAIF,EAA4B;IAC1B,MAAMC,2MAAWC,gCAAAA,EAA8BF,cAAc;IAE7D,OAAIA,eAAeG,IAAAA,CAAKC,MAAAA,KAAW,KAAKH,aAAaI,KAAAA,IAC5C;QACLF,MAAM;YAAC;gBAACG,MAAML;YAAAA,CAAS;SAAA;QACvBM,QAAQP,eAAeO,MAAAA;IAAAA,QAIpBC,oQAAAA,EAAiC;QACtCT;QACAC;IAAAA,CACD;AACH;ACnBO,SAASS,eAAe,EAC7BV,OAAAA,EACAW,KAAAA,EAIF,EAA0B;IACxB,MAAMC,iBAAaC,qNAAAA,EAAuBb,QAAQc,SAAS,GACrDC,2MAAWC,uBAAAA,EAAqBhB,QAAQc,SAAS;IAEvD,IAAI,CAACF,cAAc,CAACG,UAClB,OAAOJ;IAGT,MAAMM,gNAAgBd,gCAAAA,EAA8BS,UAAU,GACxDM,kBAAcf,4NAAAA,EAA8BY,QAAQ;IAE1D,IAAIE,kBAAkBC,eAAeD,kBAAkBN,MAAMJ,IAAAA,EAC3D,OAAOI;IAGT,MAAMQ,iBAAgBC,+NAAAA,EAA8BR,UAAU,GACxDS,8MAAcD,gCAAAA,EAA8BL,QAAQ;IAE1D,IAAI,CAACI,iBAAiB,CAACE,aACrB,OAAOV;IAGT,IAAIW,kBAAkB,CAAA;IACtB,MAAMC,WAAqC,CAAA,CAAA;IAE3C,KAAA,MAAWC,SAASb,MAAMY,QAAAA,CAAU;QAClC,IAAIC,MAAMjB,IAAAA,KAASY,eAAe;YAGhC,IAFAG,kBAAkB,CAAA,OAEdG,qMAAAA,EAAOzB,SAASwB,KAAK,GAAG;gBAC1B,MAAME,OACJF,MAAMjB,IAAAA,KAASc,cACXG,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAAA,EAAQO,SAASP,MAAM,IACnDgB,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAM;gBAExCe,SAASK,IAAAA,CAAK;oBACZ,GAAGJ,KAAAA;oBACHE;gBAAAA,CACD;YACH,OACEH,SAASK,IAAAA,CAAKJ,KAAK;YAGrB,IAAIL,kBAAkBE,aACpB;YAGF;QACF;QAEA,IAAIG,MAAMjB,IAAAA,KAASc,aAAa;YAC1BI,CAAAA,GAAAA,2LAAAA,CAAAA,SAAAA,EAAOzB,SAASwB,KAAK,IACvBD,SAASK,IAAAA,CAAK;gBACZ,GAAGJ,KAAAA;gBACHE,MAAMF,MAAME,IAAAA,CAAKC,KAAAA,CAAM,GAAGZ,SAASP,MAAM;YAAA,CAC1C,IAEDe,SAASK,IAAAA,CAAKJ,KAAK;YAGrB;QACF;QAEIF,mBACFC,SAASK,IAAAA,CAAKJ,KAAK;IAEvB;IAEA,OAAO;QACL,GAAGb,KAAAA;QACHY;IAAAA;AAEJ","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1538, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor-event-listener.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/to-slate-range.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-default-object.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/drag-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/priority/priority.types.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/priority/priority.core.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-element.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/use-core-block-element-behaviors.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-block-object.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-inline-object.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-text-block.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-element.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/stop-actor.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/build-index-maps.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/create-placeholder-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.text.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.17/node_modules/%40portabletext/toolkit/dist/index.js","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/with-undo-step.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.add.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.remove.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.set.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.unset.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.set.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.unset.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.decorator.add.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert-inline-object.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert-span.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.backward.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.forward.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operation.select.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/operations/behavior.operations.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/with-applying-behavior-operations.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/operation-to-patches.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-selection.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/portable-text-node.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/apply-operation-to-portable-text.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-value.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-dom.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/keyboard-shortcuts/default-keyboard-shortcuts.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.annotation.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.decorator.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.delete.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.insert.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.keyboard.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.list-item.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.move.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.select.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.split.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.style.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/priority/priority.sort.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/legacy-schema.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-schema.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/relay-machine.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/relay-actor-context.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/route-events-to-changes.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-span.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-leaf.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/components/render-text.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/move-range-by-operation.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/range-decorations-machine.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/use-constant.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/editor-schema-definition.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [node, path] = Editor.node(editor, editor.selection.focus.path)\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {Path, Range} from 'slate'\nimport type {EditorContext, EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {isSpan, isTextBlock} from './parse-blocks'\n\nexport function toSlateRange(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value' | 'selection'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n): Range | null {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (\n    isEqualSelectionPoints(\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.focus,\n    )\n  ) {\n    const anchorPoint = toSlateSelectionPoint(\n      snapshot,\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.backward ? 'forward' : 'backward',\n    )\n\n    if (!anchorPoint) {\n      return null\n    }\n\n    return {\n      anchor: anchorPoint,\n      focus: anchorPoint,\n    }\n  }\n\n  const anchorPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.anchor,\n    snapshot.context.selection.backward ? 'forward' : 'backward',\n  )\n  const focusPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.focus,\n    snapshot.context.selection.backward ? 'backward' : 'forward',\n  )\n\n  if (!anchorPoint || !focusPoint) {\n    return null\n  }\n\n  return {\n    anchor: anchorPoint,\n    focus: focusPoint,\n  }\n}\n\nfunction toSlateSelectionPoint(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n  selectionPoint: EditorSelectionPoint,\n  direction: 'forward' | 'backward',\n):\n  | {\n      path: Path\n      offset: number\n    }\n  | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey) {\n    return undefined\n  }\n\n  const blockIndex = snapshot.blockIndexMap.get(blockKey)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  const block = snapshot.context.value.at(blockIndex)\n\n  if (!block) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, block)) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let childKey = getChildKeyFromSelectionPoint({\n    path: selectionPoint.path,\n    offset: 0,\n  })\n\n  // If the block is a text block, but there is no child key in the selection\n  // point path, then we can try to find a span selection point by the offset.\n  const spanSelectionPoint = !childKey\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          schema: snapshot.context.schema,\n          value: [block],\n        },\n        blockOffset: {\n          path: [{_key: blockKey}],\n          offset: selectionPoint.offset,\n        },\n        direction,\n      })\n    : undefined\n\n  childKey = spanSelectionPoint\n    ? getChildKeyFromSelectionPoint(spanSelectionPoint)\n    : childKey\n\n  // If we still don't have a child key, then we have to resort to selecting\n  // the first child of the block (which by Slate convention is a span).\n  if (!childKey) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset\n  let childPath: Array<number> = []\n  let childIndex = -1\n  let pathChild: PortableTextSpan | PortableTextObject | undefined = undefined\n\n  for (const child of block.children) {\n    childIndex++\n    if (child._key === childKey) {\n      pathChild = child\n      if (isSpan(snapshot.context, child)) {\n        childPath = [childIndex]\n      } else {\n        childPath = [childIndex, 0]\n        offset = 0\n      }\n      break\n    }\n  }\n\n  // If we for some unforeseen reason didn't manage to produce a child path,\n  // then we have to resort to selecting the first child of the block (which\n  // by Slate convention is a span).\n  if (childPath.length === 0) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: [blockIndex].concat(childPath),\n    offset: isSpan(snapshot.context, pathChild)\n      ? Math.min(pathChild.text.length, offset)\n      : offset,\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import {getDragSelection} from '../internal-utils/drag-selection'\nimport type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject | undefined\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  schema: EditorSchema\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = props.legacySchema.blockObjects.find(\n    (schemaType) => schemaType.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type,\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: <RenderDefaultBlockObject blockObject={blockObject} />,\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  useSelected,\n  useSlateSelector,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderChildFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n  schema: EditorSchema\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  const legacySchemaType = props.legacySchema.inlineObjects.find(\n    (inlineObject) => inlineObject.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  const inlineObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={inlineObject._key}\n      data-child-name={inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: <RenderDefaultInlineObject inlineObject={inlineObject} />,\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const listIndex = useSlateSelector((editor) =>\n    editor.listIndexMap.get(props.textBlock._key),\n  )\n\n  let children = props.children\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? props.legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n      {...(listIndex !== undefined\n        ? {\n            'data-list-index': listIndex,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: props.legacySchema.block,\n              style: props.textBlock.style,\n              type: props.legacySchema.block,\n              value: props.textBlock,\n            })\n          : children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {isTextBlock} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const slateStatic = useSlateStatic()\n\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n        schema={schema}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const blockIndex = slateStatic.blockIndexMap.get(props.element._key)\n  const block =\n    blockIndex !== undefined ? slateStatic.value.at(blockIndex) : undefined\n\n  if (isTextBlock({schema}, block)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={block}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={block}\n      element={props.element}\n      legacySchema={legacySchema}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n      schema={schema}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = selectors.getSelectedValue(snapshot)\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          refreshKeys: true,\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport {isTextBlock} from './parse-blocks'\n\nconst levelIndexMap = new Map<number, number>()\n\n/**\n * Mutates the maps in place.\n */\nexport function buildIndexMaps(\n  context: Pick<EditorContext, 'schema' | 'value'>,\n  {\n    blockIndexMap,\n    listIndexMap,\n  }: {\n    blockIndexMap: Map<string, number>\n    listIndexMap: Map<string, number>\n  },\n): void {\n  blockIndexMap.clear()\n  listIndexMap.clear()\n  levelIndexMap.clear()\n\n  let previousListItem:\n    | {\n        listItem: string\n        level: number\n      }\n    | undefined\n\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex)\n\n    if (block === undefined) {\n      continue\n    }\n\n    blockIndexMap.set(block._key, blockIndex)\n\n    if (!isTextBlock(context, block)) {\n      levelIndexMap.clear()\n      previousListItem = undefined\n      continue\n    }\n\n    if (block.listItem === undefined || block.level === undefined) {\n      levelIndexMap.clear()\n      previousListItem = undefined\n      continue\n    }\n\n    if (!previousListItem) {\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      levelIndexMap.set(block.level, 1)\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.listItem !== block.listItem) {\n      levelIndexMap.clear()\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      levelIndexMap.set(block.level, 1)\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.level === block.level) {\n      const levelCounter = levelIndexMap.get(block.level) ?? 0\n      levelIndexMap.set(block.level, levelCounter + 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, levelCounter + 1)\n      continue\n    }\n\n    if (previousListItem.level < block.level) {\n      levelIndexMap.set(block.level, 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, 1)\n      continue\n    }\n\n    if (previousListItem.level > block.level) {\n      const levelCounter = levelIndexMap.get(block.level) ?? 0\n      levelIndexMap.set(block.level, levelCounter + 1)\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n      listIndexMap.set(block._key, levelCounter + 1)\n    }\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import {Transforms} from 'slate'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  getFocusSpan,\n  slateRangeToSelection,\n} from '../internal-utils/slate-utils'\nimport {getActiveAnnotationsMarks} from '../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getMarkState} from '../selectors/selector.get-mark-state'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const snapshot: EditorSnapshot = {\n    blockIndexMap: operation.editor.blockIndexMap,\n    context: {\n      value: operation.editor.value,\n      selection: operation.editor.selection\n        ? slateRangeToSelection({\n            schema: context.schema,\n            editor: operation.editor,\n            range: operation.editor.selection,\n          })\n        : null,\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      converters: [],\n      readOnly: false,\n    },\n    decoratorState: operation.editor.decoratorState,\n  }\n\n  const markState = getMarkState(snapshot)\n  const activeDecorators = getActiveDecorators(snapshot)\n  const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (markState && markState.state === 'unchanged') {\n    const markStateDecorators = (markState.marks ?? []).filter((mark) =>\n      context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  operation.editor.decoratorState = {}\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    decoratorState: slateEditorInstance.decoratorState,\n  }\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport {getMarkState} from '../../selectors/selector.get-mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: editor,\n        })\n\n        const markState = getMarkState(snapshot)\n\n        if (!markState) {\n          apply(op)\n          return\n        }\n\n        if (markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: getActiveDecorators(snapshot)},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge = currentUndoStepId === previousUndoStepId\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childSetOperationImplementation: BehaviorOperationImplementation<\n  'child.set'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    const {_type, text, ...rest} = operation.props\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        ...rest,\n      },\n      {at: childPath},\n    )\n\n    if (typeof text === 'string') {\n      if (child.text !== text) {\n        operation.editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: child.text,\n        })\n\n        operation.editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text,\n        })\n      }\n    }\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find(\n      (definition) => definition.name === child._type,\n    )\n\n    if (!definition) {\n      throw new Error(\n        `Unable to find schema definition for Inline Object type ${child._type}`,\n      )\n    }\n\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const {_type, _key, ...rest} = operation.props\n\n    for (const prop in rest) {\n      if (!definition.fields.some((field) => field.name === prop)) {\n        delete rest[prop]\n      }\n    }\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: typeof _key === 'string' ? _key : child._key,\n        value: {\n          ...value,\n          ...rest,\n        },\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {applyAll} from '@portabletext/patches'\nimport {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childUnsetOperationImplementation: BehaviorOperationImplementation<\n  'child.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    if (operation.props.includes('text')) {\n      operation.editor.apply({\n        type: 'remove_text',\n        path: childPath,\n        offset: 0,\n        text: child.text,\n      })\n    }\n\n    const newNode: Record<string, unknown> = {}\n\n    for (const prop of operation.props) {\n      if (prop === '_type') {\n        // It's not allowed to unset the _type of a span\n        continue\n      }\n\n      if (prop === '_key') {\n        newNode._key = context.keyGenerator()\n        continue\n      }\n\n      newNode[prop] = null\n    }\n\n    Transforms.setNodes(operation.editor, newNode, {at: childPath})\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const patches = operation.props.map((prop) => ({\n      type: 'unset' as const,\n      path: [prop],\n    }))\n    const newValue = applyAll(value, patches)\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: operation.props.includes('_key')\n          ? context.keyGenerator()\n          : child._key,\n        value: newValue,\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange({\n        context: {\n          schema: context.schema,\n          value: operation.editor.value,\n          selection: manualSelection,\n        },\n        blockIndexMap: operation.editor.blockIndexMap,\n      }) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n      decoratorState: editor.decoratorState,\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection,\n      },\n      blockIndexMap: operation.editor.blockIndexMap,\n    })\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Transforms} from 'slate'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n  const endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey\n  const endOffset = operation.at.backward\n    ? operation.at.focus.offset\n    : operation.at.anchor.offset\n\n  if (!endBlockKey) {\n    throw new Error('Failed to get end block key')\n  }\n\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey)\n\n  if (endBlockIndex === undefined) {\n    throw new Error('Failed to get end block index')\n  }\n\n  const endBlock = operation.editor.value.at(endBlockIndex)\n\n  if (!endBlock) {\n    throw new Error('Failed to get end block')\n  }\n\n  const anchorBlockPath =\n    anchorBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: anchorBlockKey,\n        })\n      : undefined\n  const focusBlockPath =\n    focusBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: focusBlockKey,\n        })\n      : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  const hanging = isTextBlock(context, endBlock) && endOffset === 0\n\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n    hanging,\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEmptyTextBlock} from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: [...(endBlock.markDefs ?? []), ...(block.markDefs ?? [])],\n          },\n          {\n            at: endBlockPath,\n          },\n        )\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEmptyTextBlock({schema}, endBlock)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const originKey = getBlockKeyFromSelectionPoint({\n    path: operation.at,\n    offset: 0,\n  })\n\n  if (!originKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey)\n\n  if (originBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  const destinationKey = getBlockKeyFromSelectionPoint({\n    path: operation.to,\n    offset: 0,\n  })\n\n  if (!destinationKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const destinationBlockIndex =\n    operation.editor.blockIndexMap.get(destinationKey)\n\n  if (destinationBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({context, operation}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {childSetOperationImplementation} from './behavior.operation.child.set'\nimport {childUnsetOperationImplementation} from './behavior.operation.child.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'child.set': childSetOperationImplementation,\n  'child.unset': childUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'child.set': {\n        behaviorOperationImplementations['child.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'child.unset': {\n        behaviorOperationImplementations['child.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      // `unset`ing the last block should be treated similar to `unset`ing the\n      // entire editor value\n      const previousSelection = editor.selection\n\n      Transforms.deselect(editor)\n      Transforms.removeNodes(editor, {at: [block.index]})\n      Transforms.insertNodes(\n        editor,\n        editor.pteCreateTextBlock({decorators: []}),\n      )\n\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n\n      editor.onChange()\n\n      return true\n    }\n\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {isSpan, isTextBlock} from './parse-blocks'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: editor.value,\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const blockIndex = op.path.at(0)\n        const isLonelyBlock =\n          op.path.length === 1 &&\n          blockIndex === 0 &&\n          editor.children.length === 1\n        const isBlockObject =\n          op.node._type !== editorActor.getSnapshot().context.schema.block.name\n\n        if (isLonelyBlock && isBlockObject) {\n          debug('Adding placeholder block')\n          Editor.insertNode(editor, editor.pteCreateTextBlock({decorators: []}))\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      // Inserting and removing text has no effect on index maps so there is\n      // no need to rebuild those.\n      apply(operation)\n      return\n    }\n\n    buildIndexMaps(\n      {\n        schema: context.schema,\n        value: editor.value,\n      },\n      {\n        blockIndexMap: editor.blockIndexMap,\n        listIndexMap: editor.listIndexMap,\n      },\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateSelection({\n                        editorActor,\n                        editor: e,\n                      }),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {buildIndexMaps} from '../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratedRanges = []\n  instance.decoratorState = {}\n\n  const placeholderBlock = createPlaceholderBlock(\n    config.editorActor.getSnapshot().context,\n  )\n  instance.value = [placeholderBlock]\n  instance.blockIndexMap = new Map<string, number>()\n  instance.listIndexMap = new Map<string, number>()\n\n  buildIndexMaps(\n    {\n      schema: config.editorActor.getSnapshot().context.schema,\n      value: instance.value,\n    },\n    {\n      blockIndexMap: instance.blockIndexMap,\n      listIndexMap: instance.listIndexMap,\n    },\n  )\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {BehaviorEvent} from '../behaviors'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const blockEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'highest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const childEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'lowest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","import {\n  bold,\n  code,\n  createKeyboardShortcut,\n  italic,\n  redo,\n  underline,\n  undo,\n} from '@portabletext/keyboard-shortcuts'\n\nexport const defaultKeyboardShortcuts = {\n  arrowDown: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowDown',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  arrowUp: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowUp',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  break: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: false,\n      },\n    ],\n  }),\n  lineBreak: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: true,\n      },\n    ],\n  }),\n  decorators: {\n    strong: bold,\n    em: italic,\n    underline: underline,\n    code: code,\n  },\n  history: {\n    undo,\n    redo,\n  },\n  tab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  shiftTab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: true,\n      },\n    ],\n  }),\n}\n","import {isTextBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = defaultKeyboardShortcuts.arrowDown.guard(\n      event.originEvent,\n    )\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = defaultKeyboardShortcuts.arrowUp.guard(event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport * as selectors from '../selectors'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusInlineObject = selectors.getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isListBlock, isTextBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {getBlockEndPoint} from '../utils'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Delete in an empty list item would delete it by default. Instead,\n * then text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnDelete = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusListBlock || !nextBlock) {\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, nextBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {focusListBlock, nextBlock}\n  },\n  actions: [\n    (_, {nextBlock}) => [\n      raise({\n        type: 'insert.block',\n        block: nextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: nextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Backspace before an empty list item would delete it by default.\n * Instead, the text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !previousBlock) {\n      return false\n    }\n\n    if (!isListBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    const previousBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: previousBlock,\n    })\n\n    return {focusTextBlock, previousBlockEndPoint}\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlockEndPoint}) => [\n      raise({\n        type: 'select',\n        at: {\n          anchor: previousBlockEndPoint,\n          focus: previousBlockEndPoint,\n        },\n      }),\n      raise({\n        type: 'insert.block',\n        block: focusTextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Enter in an empty list item would create a new list item below by\n * default. Instead, the list properties should be cleared.\n */\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Tab should indent the list item.\n */\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = defaultKeyboardShortcuts.tab.guard(event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * Hitting Shift+Tab should unindent the list item.\n */\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = defaultKeyboardShortcuts.shiftTab.guard(\n      event.originEvent,\n    )\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * An inserted list inherits the `level` from the list item where it's\n * inserted. The entire list tree is adjusted to match the new level.\n */\nconst inheritListLevel = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level\n\n    if (levelDifference === 0) {\n      return false\n    }\n\n    return {levelDifference, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {levelDifference, insertedListBlock}) => {\n      let adjustLevel = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustLevel) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustLevel &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                level: Math.min(\n                  MAX_LIST_LEVEL,\n                  Math.max(1, block.level + levelDifference),\n                ),\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustLevel = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted list inherits the `listItem` from the list item at the level\n * it's inserted.\n */\nconst inheritListItem = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    if (focusListBlock.node.level !== insertedListBlock.level) {\n      return false\n    }\n\n    if (focusListBlock.node.listItem === insertedListBlock.listItem) {\n      return false\n    }\n\n    return {listItem: focusListBlock.node.listItem, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {listItem, insertedListBlock}) => {\n      let adjustListItem = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustListItem) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustListItem &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                listItem:\n                  block.level === insertedListBlock.level\n                    ? listItem\n                    : block.listItem,\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustListItem = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted text block inherits the `listItem` and `level` from the list\n * item where it's inserted.\n */\nconst inheritListProperties = defineBehavior({\n  on: 'insert.block',\n  guard: ({snapshot, event}) => {\n    if (event.placement !== 'auto') {\n      return false\n    }\n\n    if (event.block._type !== snapshot.context.schema.block.name) {\n      return false\n    }\n\n    if (event.block.listItem !== undefined) {\n      return false\n    }\n\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem,\n    }\n  },\n  actions: [\n    ({event}, {level, listItem}) => [\n      raise({\n        ...event,\n        block: {\n          ...event.block,\n          level,\n          listItem,\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.mergeTextIntoListOnDelete,\n  coreListBehaviors.mergeTextIntoListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreListBehaviors.inheritListLevel,\n  coreListBehaviors.inheritListItem,\n  coreListBehaviors.inheritListProperties,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.set',\n    guard: ({snapshot, event}) => {\n      const blockKey = event.at[0]._key\n      const markDefKey = event.at[2]._key\n\n      const block = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n            focus: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const updatedMarkDefs = block.node.markDefs?.map((markDef) => {\n        if (markDef._key === markDefKey) {\n          return {\n            ...markDef,\n            ...event.props,\n          }\n        }\n\n        return markDef\n      })\n\n      return {blockKey, updatedMarkDefs}\n    },\n    actions: [\n      (_, {blockKey, updatedMarkDefs}) => [\n        raise({\n          type: 'block.set',\n          at: [{_key: blockKey}],\n          props: {markDefs: updatedMarkDefs},\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {isSpan} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.child',\n    guard: ({snapshot, event}) => {\n      const focusChild = selectors.getFocusChild({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!focusChild) {\n        return false\n      }\n\n      if (isSpan(snapshot.context, focusChild.node)) {\n        return {\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: focusChild.node.text.length,\n            },\n          },\n        }\n      }\n\n      return {\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0,\n          },\n          focus: {\n            path: event.at,\n            offset: 0,\n          },\n        },\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: event.select ?? 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: event.select ?? 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: event.select ?? 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: event.select ?? 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: event.select ?? 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.undo'})]],\n  }),\n\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.redo'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = utils.getSelectionStartPoint(selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: sliceTextBlock({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection,\n          },\n          block: focusTextBlock.node,\n        }),\n        context: snapshot.context,\n        options: {refreshKeys: true, validateFields: true},\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        utils.isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = getActiveDecorators(snapshot)\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\nimport type {AnnotationPath, BlockPath, ChildPath} from '../types/paths'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'child.set',\n  'child.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: BlockPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: BlockPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.set'>\n      at: ChildPath\n      props: {[prop: string]: unknown}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.unset'>\n      at: ChildPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: BlockPath\n      to: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\n/**\n * @beta\n */\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.set',\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.child',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.set'>\n      at: AnnotationPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.child'>\n      at: ChildPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import {createEditorDom} from '../editor/editor-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      nativeEventPrevented =\n        actions.some(\n          (action) => action.type === 'raise' || action.type === 'execute',\n        ) || !actions.some((action) => action.type === 'forward')\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n              sendBack,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  blockIndexMap: Map<string, number>\n  /**\n   * @beta\n   * Subject to change\n   */\n  decoratorState: Record<string, boolean | undefined>\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      behaviorsSorted: boolean\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n      behaviorsSorted: false,\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'internal.patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = [...context.behaviors.values()].map(\n          (config) => config.behavior,\n        )\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (event) => self.send(event),\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n    'sort behaviors': assign({\n      behaviors: ({context}) =>\n        !context.behaviorsSorted\n          ? new Set(sortByPriority([...context.behaviors.values()]))\n          : context.behaviors,\n      behaviorsSorted: true,\n    }),\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: false,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {\n  BaseDefinition,\n  FieldDefinition,\n  SchemaDefinition,\n} from './editor-schema-definition'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<AnnotationSchemaType>\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<BlockObjectSchemaType>\n  decorators: ReadonlyArray<DecoratorSchemaType>\n  inlineObjects: ReadonlyArray<InlineObjectSchemaType>\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<StyleSchemaType>\n  lists: ReadonlyArray<ListSchemaType>\n}\n\n/**\n * @public\n */\nexport type AnnotationSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type BlockObjectSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type DecoratorSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\n/**\n * @public\n */\nexport type InlineObjectSchemaType = BaseDefinition & {\n  fields: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type ListSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\n/**\n * @public\n */\nexport type StyleSchemaType = BaseDefinition & {\n  /**\n   * @deprecated\n   * Use `name` instead\n   */\n  value: string\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n            title: field.title ?? startCase(field.name),\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n            title: field.title ?? startCase(field.name),\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  title: field.title ?? startCase(field.name),\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'mutation delay passed'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return {type: 'patch' as const, patch: event.patch}\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation debouncer': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'mutation delay passed'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 0,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation debouncer',\n          },\n          on: {\n            'mutation delay passed': {\n              guard: and([\n                not('is read-only'),\n                not('is typing'),\n                'slate is normalizing',\n              ]),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {toSlateRange} from '../../internal-utils/to-slate-range'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport {isActiveAnnotation} from '../../selectors'\nimport {getActiveAnnotationsMarks} from '../../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return [...activeAnnotations, ...activeDecorators]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection,\n          },\n          blockIndexMap: editor.blockIndexMap,\n        })\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(\n              editorActor.getSnapshot().context,\n            )\n            editor.children = [placeholderBlock]\n            editor.value = [placeholderBlock]\n\n            buildIndexMaps(\n              {\n                schema: editorActor.getSnapshot().context.schema,\n                value: editor.value,\n              },\n              {\n                blockIndexMap: editor.blockIndexMap,\n                listIndexMap: editor.listIndexMap,\n              },\n            )\n          }\n\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n      const rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {createEditorDom} from './editor-dom'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    dom: createEditorDom(\n      (event) => editorActor.send(event),\n      slateEditor.instance,\n    ),\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                {this.props.children}\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nexport const IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {Point, type Operation, type Range} from 'slate'\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation} from '../internal-utils/move-range-by-operation'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\nexport type DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      decorate: {fn: (nodeEntry: NodeEntry) => Array<BaseRange>}\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': ({context}) => {\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'update range decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n\n    'move range decorations': ({context, event}) => {\n      if (event.type !== 'slate operation') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        let newRange: BaseRange | null | undefined\n\n        newRange = moveRangeByOperation(slateRange, event.operation)\n        if (\n          (newRange && newRange !== slateRange) ||\n          (newRange === null && slateRange)\n        ) {\n          const newRangeSelection = newRange\n            ? slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              })\n            : null\n\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n        }\n\n        // If the newRange is null, it means that the range is not valid anymore and should be removed\n        // If it's undefined, it means that the slateRange is still valid and should be kept\n        if (newRange !== null) {\n          rangeDecorationState.push({\n            ...(newRange || slateRange),\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              }),\n            },\n          })\n        }\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'update decorate': assign({\n      decorate: ({context}) => {\n        return {\n          fn: createDecorate(context.schema, context.slateEditor),\n        }\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) =>\n      context.slateEditor.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {fn: createDecorate(input.schema, input.slateEditor)},\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: ['set up initial range decorations', 'update decorate'],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: ['set up initial range decorations', 'update decorate'],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'update decorate'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nfunction createDecorate(\n  schema: EditorSchema,\n  slateEditor: PortableTextSlateEditor,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (isEqualToEmptyEditor(slateEditor.children, schema)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return slateEditor.decoratedRanges.filter((decoratedRange) => {\n      // Special case in order to only return one decoration for collapsed ranges\n      if (Range.isCollapsed(decoratedRange)) {\n        // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n        return node.children.some(\n          (_, childIndex) =>\n            Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) &&\n            Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n        )\n      }\n\n      return (\n        Range.intersection(decoratedRange, {\n          anchor: {path, offset: 0},\n          focus: {path, offset: 0},\n        }) || Range.includes(decoratedRange, path)\n      )\n    })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {rangeDecorationsMachine} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  const decorate = useSelector(\n    rangeDecorationsActor,\n    (s) => s.context.decorate?.fn,\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection,\n          },\n          blockIndexMap: slateEditor.blockIndexMap,\n        })\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              {props.children}\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n","/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type FieldDefinition = BaseDefinition & {\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type DecoratorDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type AnnotationDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type BlockObjectDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type InlineObjectDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition & {\n  fields?: ReadonlyArray<FieldDefinition>\n}\n\n/**\n * @public\n */\nexport type ListDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type StyleDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = TBaseDefinition\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<DecoratorDefinition<TBaseDefinition>>\n  blockObjects?: ReadonlyArray<BlockObjectDefinition<TBaseDefinition>>\n  inlineObjects?: ReadonlyArray<InlineObjectDefinition<TBaseDefinition>>\n  annotations?: ReadonlyArray<AnnotationDefinition<TBaseDefinition>>\n  lists?: ReadonlyArray<ListDefinition<TBaseDefinition>>\n  styles?: ReadonlyArray<StyleDefinition<TBaseDefinition>>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n","import {startTransition, useContext, useEffect, useState} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const editorActor = useContext(EditorActorContext)\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  useEffect(() => {\n    const subscription = editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editorActor])\n\n  return selection\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","rootName","debug","debugWithName","name","namespace","enabled","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getBlockPath","blockPath","from","Editor","nodes","at","match","n","blockIndex","getFocusBlock","selection","node","focus","path","slice","getFocusSpan","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","utils","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","snapshot","isEqualSelectionPoints","anchorPoint","toSlateSelectionPoint","focusPoint","selectionPoint","direction","blockIndexMap","get","getChildKeyFromSelectionPoint","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","childPath","pathChild","isSpan","concat","min","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","getDragSelection","dragSelection","selectors","draggingCollapsedSelection","draggedTextBlock","draggedSpan","selectionStartBlock","selectionEndBlock","defaultKeyGenerator","randomKey","getByteHexTable","table","i","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","selected","useSelected","focused","useSlateSelector","isCollapsed","legacySchemaType","legacySchema","schemaType","error","attributes","readOnly","renderBlock","editorElementRef","RenderInlineObject","inlineObjectRef","useSlateStatic","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","listIndex","listIndexMap","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","useSelector","_temp","_temp2","slateStatic","s_0","s","getLegacySchema","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","options","refreshKeys","validateFields","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","keyGenerator","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","filter","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","levelIndexMap","Map","buildIndexMaps","clear","previousListItem","set","levelCounter","createPlaceholderBlock","insertTextOperationImplementation","operation","decoratorState","markState","getMarkState","activeDecorators","getActiveDecorators","activeAnnotations","getActiveAnnotationsMarks","focusSpan","Transforms","insertText","state","markStateDecorators","mark","decorators","decorator","includes","insertNodes","isPortableTextSpan","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","onChange","targetBlock","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","origin","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","equals","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","childSetOperationImplementation","childEntry","definition","fields","field","childUnsetOperationImplementation","newNode","newValue","applyAll","decoratorAddOperationImplementation","manualAnchor","manualFocus","manualSelection","editorSelection","anchorOffset","focusOffset","newSelection","offsets","trimmedSelection","newRange","splitTextNodes","isRange","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","endBlockKey","endOffset","endBlockIndex","endBlock","anchorBlockPath","removeNodes","delete","unit","insertInlineObjectOperationImplementation","parsedInlineObject","parseInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","insertBlock","placement","select","startBlock","startBlockPath","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","transform","next","Point","endBlockStartPoint","isEmptyTextBlock","splitNodes","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","originKey","originBlockIndex","destinationKey","to","destinationBlockIndex","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","editorDelete","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","reservedProps","nextRest","prevChildren","prevRest","blockNode","newVal","previousSelection","_","pteCreateTextBlock","newKeys","keys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","isLonelyBlock","isBlockObject","insertNode","createWithSchemaTypes","isVoid","obj","createWithUtils","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","root","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","applyOperationToPortableTextDraft","e","finishDraft","insertedNode","before","after","prevPath","previous","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","decoratedRanges","placeholderBlock","initialValue","createEditorDom","sendBack","getBlockNodes","getChildNodes","setDragGhost","ghost","childNode","setDragImage","x","y","addAnnotationOnCollapsedSelection","caretWordSelection","raise","coreAnnotationBehaviors","defaultKeyboardShortcuts","arrowDown","createKeyboardShortcut","default","alt","ctrl","meta","arrowUp","break","lineBreak","strong","bold","em","italic","underline","code","tab","shiftTab","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","left","right","rect","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","childNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","blocksDomRect","clonedChildNodes","childrenDomRect","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","mergeTextIntoListOnDelete","focusListBlock","mergeTextIntoListOnBackspace","previousBlockEndPoint","getBlockEndPoint","clearListOnEnter","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","inheritListLevel","firstInsertedBlock","secondInsertedBlock","insertedListBlock","levelDifference","adjustLevel","listStartBlockFound","inheritListItem","adjustListItem","inheritListProperties","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","markDefKey","updatedMarkDefs","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockStartPoint","abstractSplitBehaviors","blockEndPoint","newTextBlockSelection","newTextBlock","sliceTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","textRuns","getTextBlockText","textRun","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","behaviorsSorted","emit","pendingEvents","enqueueActions","enqueue","pendingIncomingPatchesEvents","handle blur","ReactEditor","blur","handle focus","handle behavior event","self","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","internalDrag","always","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","startCase","portableTextSchema","defineField","SanitySchema","pteSchema","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","originalApply","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","stateIn","typing","slate is normalizing","isNormalizing","delays","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","updateValue","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","subscribe","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","startTransition","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","t3","rangeDecoration","component","RenderText","IS_MAC","test","navigator","userAgent","modifiers","control","aliases","cmd","command","ctl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","moveRangeByOperation","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","set up initial range decorations","rangeDecorationState","slateRange","onMoved","update range decorations","move range decorations","decoratedRange","newRangeSelection","decorate","createDecorate","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useImperativeHandle","useSlate","rangeDecorationsActor","useActorRef","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","defineSchema","usePortableTextEditorSelection","setSelection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcO,SAAAA,oBAAAC,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,CAAA,GAGLC,UAAeC,iMAAAA,KACfC,6MAAWC,iBAAAA,EAAeN,MAAKK,EAAG;IAAC,IAAAE;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAE,UAAAF,CAAAA,CAAAA,EAAAA,KAAAI,KAAAA,CAEzBE,KAAAA,MAAA;QACR,MAAAC,eAAqBL,OAAME,EAAAA,CAAI,KAAKA,EAAE;QAAC,OAAA,MAAA;YAGrCG,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE7BR,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAS;IAAA,OAAAT,CAAAA,CAAAA,EAAAA,KAAAE,SAAAA,CAAEO,KAAAA;QAACP,MAAM;KAAA,EAACF,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA,4MANXU,YAAAA,EAAUJ,IAMPG,EAAQ,GAAC;AAAA;ACxBd,MAAME,WAAW;0IAEFC,UAAAA,EAAMD,QAAQ;AACtB,SAASE,cAAcC,IAAAA,EAA8B;IAC1D,MAAMC,YAAY,GAAGJ,QAAQ,GAAGG,IAAI,EAAA;IACpC,6IAAIF,UAAAA,IAASA,gJAAAA,CAAMI,OAAAA,CAAQD,SAAS,8IAC3BH,UAAAA,EAAMG,SAAS,8IAEjBH,UAAAA,EAAMD,QAAQ;AACvB;ACAO,MAEMM,iBAAiB;AAM9B,SAASC,mBACPC,MAAAA,EACAC,MAAAA,EACA;IACA,MAAMC,QAAQD,MAAAA,CAAOD,OAAOG,IAAI,CAAA;IAChC,OAAID,+IAASE,UAAAA,EAAQJ,QAAQE,KAAK,IACzBA,QAAAA,CAETD,MAAAA,CAAOD,OAAOG,IAAI,CAAA,GAAIH,QACfA,MAAAA;AACT;AAEO,SAASK,aACdH,KAAAA,EACA,EAACI,WAAAA,EAAwC,EACzCL,SAA8B,CAAA,CAAA,EAChB;IACd,OAAIC,SAASK,MAAMC,OAAAA,CAAQN,KAAK,IACvBA,MAAMO,GAAAA,CAAKC,CAAAA,UAAU;QAC1B,MAAM,EAACC,KAAAA,EAAOR,IAAAA,EAAM,GAAGS,MAAAA,GAAQF;QAE/B,IADuBA,SAASA,MAAMC,KAAAA,KAAUL,YAAYI,KAAAA,CAAMf,IAAAA,EAC9C;YAClB,MAAMkB,YAAYH;YAClB,IAAII,aAAa,CAAA;YACjB,MAAMC,kBAAkB,OAAOF,UAAUG,KAAAA,GAAU,KAC7CC,qBAAqB,OAAOJ,UAAUK,QAAAA,GAAa,KACnDC,qBAAqB,OAAON,UAAUO,QAAAA,GAAa,KAEnDA,WAAAA,CAAYP,UAAUO,QAAAA,IAAY,CAAA,CAAA,EAAIX,GAAAA,CAAKY,CAAAA,UAAU;gBACzD,MAAM,EAACV,OAAOW,KAAAA,EAAOnB,MAAMoB,IAAAA,EAAM,GAAGC,OAAAA,GAASH;gBAM7C,OAAIC,UAAU,SAAA,CACZR,aAAa,CAAA,GACNf,mBACL;oBACEY,OAAOW;oBACPnB,MAAMoB;oBACNH,UAAU;wBACR;4BACEjB,MAAML;4BACNa,OAAO;4BACPc,MAAM;4BACNC,OAAO,CAAA,CAAA;wBAAA,CACR;qBAAA;oBAEHxB,OAAOsB;oBACPG,UAAU,CAAA;gBAAA,GAEZ1B,MACF,CAAA,IAGKoB;YACT,CAAC;YAED,OACE,CAACN,mBACD,CAACE,sBACD,CAACE,sBACD,CAACL,2JACDc,UAAAA,CAAQC,SAAAA,CAAUnB,KAAK,IAGhBA,QAAAA,CAGLK,mBAAAA,CACFH,KAAKI,KAAAA,GAAQV,YAAYwB,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,GAE9BI,mBAAmB;gBAACY;gBAAOR;gBAAM,GAAGS,IAAAA;gBAAMQ;YAAAA,GAAWnB,MAAM,CAAA;QACpE;QACA,OAAOF,mBACL;YACEY;YACAR;YACAiB,UAAU;gBACR;oBACEjB,MAAML;oBACNa,OAAO;oBACPc,MAAM;oBACNC,OAAO,CAAA,CAAA;gBAAA,CACR;aAAA;YAEHxB,OAAOU;QAAAA,GAETX,MACF;IACF,CAAC,IAEI,CAAA,CAAA;AACT;AAEO,SAAS8B,eACd7B,KAAAA,EACA8B,aAAAA,EACA/B,SAAgE,CAAA,CAAA,EAC3C;IACrB,OAAOC,MAAMO,GAAAA,CAAKC,CAAAA,UAAU;QAC1B,MAAM,EAACP,IAAAA,EAAMQ,KAAAA,EAAAA,GAASD;QACtB,IAAI,CAACP,QAAQ,CAACQ,OACZ,MAAM,IAAIsB,MAAM,mBAAmB;QAErC,IACEtB,UAAUqB,iBACV,cAActB,SACdH,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAC5BjB,MACA;YACA,IAAIW,aAAa,CAAA;YACjB,MAAMM,WAAWV,MAAMU,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,UAAU;gBAC7C,MAAM,EAACV,OAAOuB,MAAAA,EAAAA,GAAUb;gBACxB,IAAI,WAAWA,SAASa,WAAW,QAAQ;oBACzCpB,aAAa,CAAA;oBACb,MAAM,EACJZ,OAAOiC,CAAAA,EACPhC,MAAMiC,CAAAA,EACNzB,OAAO0B,CAAAA,EACPV,UAAUW,EAAAA,EACVlB,UAAUtC,EAAAA,EACV,GAAG8B,MAAAA,GACDS;oBACJ,OAAOtB,mBACL;wBAAC,GAAGa,IAAAA;wBAAM,GAAGuB,CAAAA;wBAAGhC,MAAMiC;wBAAazB,OAAO0B;oBAAAA,GAC1CpC,MACF;gBACF;gBACA,OAAOoB;YACT,CAAC;YACD,OAAKP,aAGEf,mBACL;gBAAC,GAAGW,KAAAA;gBAAOU;gBAAUjB;gBAAMQ;YAAAA,GAC3BV,MACF,IALSS;QAMX;QACA,MAAM6B,aAAa,WAAW7B,SAASA,MAAMR,KAAAA;QAC7C,OAAOH,mBACL;YAACI;YAAMQ;YAAO,GAAI,OAAO4B,cAAe,WAAWA,aAAa,CAAA,CAAA;QAAC,GACjEtC,MACF;IACF,CAAC;AACH;AAEO,SAASuC,qBACdpB,QAAAA,EACAd,WAAAA,EACS;IACT,OACEc,aAAaqB,KAAAA,KACZrB,YAAYb,MAAMC,OAAAA,CAAQY,QAAQ,KAAKA,SAASsB,MAAAA,KAAW,KAC3DtB,YACCb,MAAMC,OAAAA,CAAQY,QAAQ,KACtBA,SAASsB,MAAAA,KAAW,kJACpBd,UAAAA,CAAQC,SAAAA,CAAUT,QAAAA,CAAS,CAAC,CAAC,KAC7BA,QAAAA,CAAS,CAAC,CAAA,CAAET,KAAAA,KAAUL,YAAYI,KAAAA,CAAMf,IAAAA,IACxC,WAAWyB,QAAAA,CAAS,CAAC,CAAA,IACrBA,QAAAA,CAAS,CAAC,CAAA,CAAEJ,KAAAA,KAAUV,YAAYwB,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,IAC5C,CAAA,CAAE,cAAcyB,QAAAA,CAAS,CAAC,CAAA,KAC1Bb,MAAMC,OAAAA,CAAQY,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAQ,KAClCA,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAASsB,MAAAA,KAAW,KAChCC,oJAAAA,CAAKC,MAAAA,CAAOxB,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAC,KACnCA,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAET,KAAAA,KAAU,UAClC,CAACS,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAEM,KAAAA,EAAOmB,KAAK,EAAE,KACvCzB,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS;AAEvC;ACvLO,SAASqB,aAAa,EAC3B/D,MAAAA,EACAoB,IAAAA,EAIF,EAAyB;IACvB,MAAM,CAAA,EAAG4C,SAAS,CAAA,GAAIxC,MAAMyC,IAAAA,6IAC1BC,UAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;QACnBoE,IAAI,CAAA,CAAA;QACJC,OAAQC,CAAAA,IAAMA,EAAElD,IAAAA,KAASA;IAAAA,CAC1B,CACH,EAAEgD,EAAAA,CAAG,CAAC,KAAK;QAACV,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EAE1Ba,aAAaP,WAAWI,GAAG,CAAC;IAElC,IAAIG,eAAeb,KAAAA,GAInB,OAAO;QAACa,UAAU;KAAA;AACpB;AAuBO,SAASC,cAAc,EAC5BxE,MAAAA,EAGF,EAAsD;IACpD,IAAI,CAACA,OAAOyE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,oJACEQ,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQA,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC,KAAK;YAC9DnB,KAAAA;YACAA,KAAAA,CAAS;SAAA;IAGf,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASoB,aAAa,EAC3B9E,MAAAA,EAGF,EAAkE;IAChE,IAAI,CAACA,OAAOyE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAM,CAACgB,MAAME,IAAI,CAAA,GAAIV,sJAAAA,CAAOQ,IAAAA,CAAK1E,QAAQA,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAI;QAEpE,IAAI5E,OAAO+E,UAAAA,CAAWL,IAAI,GACxB,OAAO;YAACA;YAAME,IAAI;SAAA;IAEtB,EAAA,OAAQ;QACN,OAAO;YAAClB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;IAEA,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;AAC9B;AAEO,SAASsB,uBAAuB,EACrChF,MAAAA,EAGF,EAAsD;IACpD,IAAI,CAACA,OAAOyE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,MAAMuB,mKAAsBC,QAAAA,CAAMC,KAAAA,CAAMnF,OAAOyE,SAAS;IAExD,OAAOW,cAAc;QAACpF;QAAQqF,OAAOJ;IAAAA,CAAoB;AAC3D;AAEO,SAASK,qBAAqB,EACnCtF,MAAAA,EAGF,EAAsD;IACpD,IAAI,CAACA,OAAOyE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,MAAM6B,iKAAoBL,QAAAA,CAAMM,GAAAA,CAAIxF,OAAOyE,SAAS;IAEpD,OAAOW,cAAc;QAACpF;QAAQqF,OAAOE;IAAAA,CAAkB;AACzD;AAEO,SAASH,cAAc,EAC5BpF,MAAAA,EACAqF,KAAAA,EAIF,EAAsD;IACpD,IAAI;QACF,MAAM,CAAC1D,KAAK,CAAA,+IAAIuC,UAAAA,CAAOQ,IAAAA,CAAK1E,QAAQqF,MAAMT,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC,KAAK;YAC7DnB,KAAAA;YACAA,KAAAA,CAAS;SAAA;QAEX,OAAO/B,QAAQ;YAACA;YAAO0D,MAAMT,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC;SAAA,GAAI;YAACnB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IACxE,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAAS+B,cAAc,EAC5BzF,MAAAA,EAGF,EAAsD;IACpD,MAAM,CAAC0F,YAAYC,cAAc,CAAA,GAAInB,cAAc;QAACxE;IAAAA,CAAO,GACrD4F,aAAa5F,OAAOyE,SAAAA,EAAWE,MAAMC,KAAKR,GAAG,CAAC;IAEpD,IAAI,CAACsB,cAAc,CAACC,kBAAkBC,eAAelC,KAAAA,GACnD,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAMmC,0JAAaC,OAAAA,CAAKxD,KAAAA,CAAMoD,YAAYE,UAAU;QAEpD,OAAOC,aACH;YAACA;YAAY,CAAC;mBAAGF;gBAAgBC,UAAU;aAAC;SAAA,GAC5C;YAAClC,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEA,SAASqC,cAAc,EACrB/F,MAAAA,EACAqF,KAAAA,EAIF,EAAsD;IACpD,MAAM,CAAC1D,OAAOqC,SAAS,CAAA,GAAIoB,cAAc;QAACpF;QAAQqF;IAAAA,CAAM,GAClDO,aAAaP,MAAMT,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAElC,IAAI,CAACzC,SAAS,CAACqC,aAAa4B,eAAelC,KAAAA,GACzC,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAMsC,0JAAaF,OAAAA,CAAKxD,KAAAA,CAAMX,OAAOiE,UAAU;QAE/C,OAAOI,aACH;YAACA;YAAY,CAAC;mBAAGhC;gBAAW4B,UAAU;aAAC;SAAA,GACvC;YAAClC,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASuC,cAAc,EAC5BjG,MAAAA,EAGF,EAAsD;IACpD,IAAIA,OAAOqC,QAAAA,CAASsB,MAAAA,KAAW,GAC7B,OAAO;QAACD,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAI9B,MAAMwC,8JADahC,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQ,CAAA,CAAE,EACR4E,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAE3C,IAAI;QACF,OAAO8B,mBAAmBxC,KAAAA,iJACrBQ,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQ;YAACkG,cAAc;SAAC,KAAK;YAACxC,KAAAA;YAAWA,KAAAA,CAAS;SAAA,GAC/D;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASyC,aAAa,EAC3BnG,MAAAA,EAGF,EAAsD;IACpD,IAAIA,OAAOqC,QAAAA,CAASsB,MAAAA,KAAW,GAC7B,OAAO;QAACD,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAI9B,MAAM0C,6JADYlC,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQ,CAAA,CAAE,EACP4E,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAEzC,IAAI;QACF,OAAOgC,kBAAkB1C,KAAAA,IACpBQ,sJAAAA,CAAOQ,IAAAA,CAAK1E,QAAQ;YAACoG,aAAa;SAAC,KAAK;YAAC1C,KAAAA;YAAWA,KAAAA,CAAS;SAAA,GAC9D;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,OAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAAS2C,aAAa,EAC3BrG,MAAAA,EACAsG,MAAAA,EACA5B,IAAAA,EAKF,EAAG;IACD,iJAAIR,SAAAA,CAAOqC,QAAAA,CAAS7B,IAAI,GACtB;IAGF,IAAI8B,eAAe;QAACxG;QAAQsG;IAAAA,GAAS5B,IAAI,GACvC,OAAO+B,eAAe;QAACH;QAAQI,SAAShC;IAAAA,CAAK;IAG/C,MAAMiC,SAASnF,MAAMyC,IAAAA,8IACnBC,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;QACnB4G,MAAM;QACNxC,IAAI,CAAA,CAAA;QACJC,OAAQC,CAAAA,IACNkC,eAAe;gBAACxG;gBAAQsG;YAAAA,GAAShC,CAAC,KAClCA,EAAEjC,QAAAA,CAASwE,IAAAA,CAAMvE,CAAAA,QAAUA,MAAMlB,IAAAA,KAASsD,KAAKtD,IAAI;IAAA,CACtD,CACH,EACGgD,EAAAA,CAAG,CAAC,GACHA,GAAG,CAAC;IAER,oJAAOvB,UAAAA,CAAQC,SAAAA,CAAU6D,MAAM,IAC3BF,eAAe;QACbH;QACAI,SAASC;IAAAA,CACV,IACDjD,KAAAA;AACN;AAEA,SAAS+C,eAAe,EACtBH,MAAAA,EACAI,OAAAA,EAIF,EAAG;IACD,OAAO1D,eAAe;QAAC0D,OAAO;KAAA,EAAGJ,OAAO3E,KAAAA,CAAMf,IAAI,GAAGwD,GAAG,CAAC;AAC3D;AAEA,SAASoC,eACP,EAACxG,MAAAA,EAAQsG,MAAAA,EAA+D,EACxE5B,IAAAA,EACiB;IACjB,oJACE7B,UAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KACtB,CAAC1E,OAAO8G,QAAAA,CAASpC,IAAI,KAAA,CACpB4B,OAAO3E,KAAAA,CAAMf,IAAAA,KAAS8D,KAAK9C,KAAAA,IAC1B0E,OAAOS,YAAAA,CAAaF,IAAAA,CACjBG,CAAAA,cAAgBA,YAAYpG,IAAAA,KAAS8D,KAAK9C,KAC7C,CAAA;AAEN;AAEO,SAASqF,iBAAiB,EAC/BjH,MAAAA,EACAkH,QAAAA,EAIF,EAAY;IACV,IAAI,CAAClH,OAAOyE,SAAAA,EACV,OAAO,CAAA;IAGT,MAAM0C,iBAAiB,CACrB;wJAAGjD,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;YACtBoE,IAAIpE,OAAOyE,SAAAA;YACXJ,OAAQK,CAAAA,OAAS1E,OAAOoH,WAAAA,CAAY1C,IAAI;QAAA,CACzC,CAAC;KAAA;IAGJ,OAAIyC,eAAexD,MAAAA,GAAS,IACnBwD,eAAeE,KAAAA,CACpB,CAAC,CAAC3C,IAAI,CAAA,GAAM1E,OAAOsH,WAAAA,CAAY5C,IAAI,KAAKA,KAAKwC,QAAAA,KAAaA,QAC5D,IAGK,CAAA;AACT;AAEO,SAASK,cAAc,EAC5BvH,MAAAA,EACAiC,KAAAA,EAIF,EAAY;IACV,IAAI,CAACjC,OAAOyE,SAAAA,EACV,OAAO,CAAA;IAGT,MAAM0C,iBAAiB,CACrB;wJAAGjD,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;YACtBoE,IAAIpE,OAAOyE,SAAAA;YACXJ,OAAQK,CAAAA,OAAS1E,OAAOoH,WAAAA,CAAY1C,IAAI;QAAA,CACzC,CAAC;KAAA;IAGJ,OAAIyC,eAAexD,MAAAA,GAAS,IACnBwD,eAAeE,KAAAA,CAAM,CAAC,CAAC3C,IAAI,CAAA,GAAMA,KAAKzC,KAAAA,KAAUA,KAAK,IAGvD,CAAA;AACT;AAEO,SAASuF,sBAAsB,EACpClB,MAAAA,EACAtG,MAAAA,EACAyH,KAAAA,EAKF,EAAoB;IAClB,MAAM,CAACC,WAAW,CAAA,GAAItC,cAAc;QAClCpF;QACAqF,OAAOoC,MAAME,MAAAA;IAAAA,CACd,GACK,CAACjC,UAAU,CAAA,GAAIN,cAAc;QACjCpF;QACAqF,OAAOoC,MAAM9C,KAAAA;IAAAA,CACd;IAED,IAAI,CAAC+C,eAAe,CAAChC,YACnB,OAAO;IAGT,MAAM,CAACkC,WAAW,CAAA,GAChBF,YAAY9F,KAAAA,KAAU0E,OAAO3E,KAAAA,CAAMf,IAAAA,GAC/BmF,cAAc;QACZ/F;QACAqF,OAAOoC,MAAME,MAAAA;IAAAA,CACd,IACD;QAACjE,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EACrB,CAACmC,UAAU,CAAA,GACfH,WAAW9D,KAAAA,KAAU0E,OAAO3E,KAAAA,CAAMf,IAAAA,GAC9BmF,cAAc;QACZ/F;QACAqF,OAAOoC,MAAM9C,KAAAA;IAAAA,CACd,IACD;QAACjB,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EAErBe,YAA6B;QACjCkD,QAAQ;YACN/C,MAAM;gBAAC;oBAACxD,MAAMsG,YAAYtG,IAAAA;gBAAAA,CAAK;aAAA;YAC/ByG,QAAQJ,MAAME,MAAAA,CAAOE,MAAAA;QAAAA;QAEvBlD,OAAO;YACLC,MAAM;gBAAC;oBAACxD,MAAMsE,WAAWtE,IAAAA;gBAAAA,CAAK;aAAA;YAC9ByG,QAAQJ,MAAM9C,KAAAA,CAAMkD,MAAAA;QAAAA;QAEtBC,uJAAU5C,QAAAA,CAAM6C,UAAAA,CAAWN,KAAK;IAAA;IAGlC,OAAIG,eAAAA,CACFnD,UAAUkD,MAAAA,CAAO/C,IAAAA,CAAKoD,IAAAA,CAAK,UAAU,GACrCvD,UAAUkD,MAAAA,CAAO/C,IAAAA,CAAKoD,IAAAA,CAAK;QAAC5G,MAAMwG,YAAYxG,IAAAA;IAAAA,CAAK,CAAA,GAGjDyE,cAAAA,CACFpB,UAAUE,KAAAA,CAAMC,IAAAA,CAAKoD,IAAAA,CAAK,UAAU,GACpCvD,UAAUE,KAAAA,CAAMC,IAAAA,CAAKoD,IAAAA,CAAK;QAAC5G,MAAMyE,WAAWzE,IAAAA;IAAAA,CAAK,CAAA,GAG5CqD;AACT;AC1XO,SAASwD,iBAAiB,EAC/BC,WAAAA,EACAC,WAAAA,EACAC,KAAAA,EAKF,EAA8B;IAC5B,IAAIF,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;QAACC,OAAO;IAAA,CAAa,GACzD;IAGF,MAAMC,YAAYC,aAAa;QAACN;QAAaC;IAAAA,CAAM;IAEnD,IAAI,CAACI,WACH;IAGF,MAAME,aAAarC,aAAa;QAC9BrG,QAAQmI;QACR7B,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;QAC1C5B,MAAM8D;IAAAA,CACP,GACKI,qBAAqBC,sBAAsB;QAC/CnE,MAAM8D;QACNL;QACAC;IAAAA,CACD,GACKU,iBAAiBC,kBAAkB;QACvCzC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;QAC1C6B;QACAC;IAAAA,CACD;IAED,IACEM,cACAE,sBACA,CAACE,kBACD,CAAC5E,sJAAAA,CAAOqC,QAAAA,CAASiC,SAAS,GAI1B,OAAO;QACL7G,OAAOiH;QACPrC,UAAU,CAAA;QACV9B,WAAW;YACTkD,wMAAQqB,qBAAAA,EAAyB;gBAC/BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;YACDuD,OAAOqE,gOAAAA,EAAuB;gBAC5BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;QAAA;IACH;IAIJ,IAAI,CAACwH,sBAAsB,CAACE,gBAC1B;IAGF,MAAMG,8NAA8BC,gCAAAA,EAClCJ,eAAenE,KACjB;IAEA,IAAIsE,gCAAgCvF,KAAAA,GAIpC,OACEsF,oOAAAA,EAA2BF,cAAc,KACzCJ,cACAO,gCAAgCP,WAAWtH,IAAAA,GAIpC;QACLO,OAAOiH;QACPrC,UAAU,CAAA;QACV9B,WAAW;YACTkD,uMAAQqB,sBAAAA,EAAyB;gBAC/BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;YACDuD,WAAOqE,4NAAAA,EAAuB;gBAC5BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;QAAA;IACH,IAIG;QACLO,OAAOiH;QACPrC,uJAAUrC,SAAAA,CAAOqC,QAAAA,CAASiC,SAAS;QACnC/D,WAAWqE;IAAAA;AAEf;AAEO,SAASL,aAAa,EAC3BN,WAAAA,EACAC,KAAAA,EAIF,EAAG;IACD,OAAKe,gKAAAA,CAAUC,SAAAA,CAAUjB,aAAaC,MAAMiB,MAAM,wJAIrCF,YAAAA,CAAUG,WAAAA,CAAYnB,aAAaC,MAAMiB,MAAM,IAH1D,KAAA;AAMJ;AAEA,SAASR,sBAAsB,EAC7BnE,IAAAA,EACAyD,WAAAA,EACAC,KAAAA,EAKF,EAAmC;IACjC,MAAM,CAACmB,UAAU,CAAA,GAAItD,cAAc;QAACjG,QAAQmI;IAAAA,CAAY;IAExD,IAAI,CAACoB,YACH;IAIF,MAAMC,iBADoBL,gKAAAA,CAAUM,SAAAA,CAAUtB,aAAaoB,UAAU,EAC5BG,qBAAAA,CAAAA;IAEzC,IAAItB,MAAMuB,KAAAA,GAAQH,eAAeI,GAAAA,EAC/B,OAAO;IAGT,MAAM,CAACC,SAAS,CAAA,GAAI1D,aAAa;QAACnG,QAAQmI;IAAAA,CAAY;IAEtD,IAAI,CAAC0B,WACH;IAIF,MAAMC,eADmBX,gKAAAA,CAAUM,SAAAA,CAAUtB,aAAa0B,SAAS,EAC7BH,qBAAAA,CAAAA;IAEtC,IAAItB,MAAMuB,KAAAA,GAAQG,aAAaC,MAAAA,EAC7B,OAAO;IAIT,MAAMC,kKADUb,YAAAA,CAAUM,SAAAA,CAAUtB,aAAazD,IAAI,EACzBgF,qBAAAA,CAAAA,GACtBE,MAAMI,YAAYJ,GAAAA,EAClBK,SAASD,YAAYC,MAAAA;IAG3B,OAFiBC,KAAKC,GAAAA,CAAIP,MAAMxB,MAAMuB,KAAK,IAEzBM,SAAS,IAAI,UAAU;AAC3C;AAEO,SAASlB,kBAAkB,EAChCzC,MAAAA,EACA6B,WAAAA,EACAC,KAAAA,EAKF,EAAoB;IAClB,MAAMX,QAAQ2C,uBAAuBjC,aAAaC,KAAK;IAUvD,OARkBX,QACdD,sBAAsB;QACpBlB;QACAtG,QAAQmI;QACRV;IAAAA,CACD,IACD;AAGN;AAEA,SAAS2C,uBACPpK,MAAAA,EACAoI,KAAAA,EACA;IAKA,IAJI,CAACA,MAAMiB,MAAAA,IAIP,yJAACgB,YAAAA,EAAUjC,MAAMiB,MAAM,GACzB;IAGF,MAAMiB,UAASnB,gKAAAA,CAAUoB,SAAAA,CAAUvK,MAAM;IAEzC,IAAIwK;IAEJ,IAAIF,QAAOG,QAAAA,CAASC,sBAAAA,KAA2BhH,KAAAA,GAAW;QACxD,MAAMiH,WAAWL,QAAOG,QAAAA,CAASC,sBAAAA,CAC/BtC,MAAMwC,OAAAA,EACNxC,MAAMyC,OACR;QAEA,IAAIF,UACF,IAAI;YACFH,WAAWF,QAAOG,QAAAA,CAASK,WAAAA,CAAAA,GAC3BN,SAASO,QAAAA,CAASJ,SAASK,UAAAA,EAAYL,SAAS9C,MAAM,GACtD2C,SAASS,MAAAA,CAAON,SAASK,UAAAA,EAAYL,SAAS9C,MAAM;QACtD,EAAA,OAAQ,CAAC;IAEb,OAAA,IAAWyC,QAAOG,QAAAA,CAASS,mBAAAA,KAAwBxH,KAAAA,GAEjD8G,WACEF,QAAOG,QAAAA,CAASS,mBAAAA,CAAoB9C,MAAMwC,OAAAA,EAASxC,MAAMyC,OAAO,KAChEnH,KAAAA;SACG;QACLyH,QAAQC,IAAAA,CACN,qEACF;QACA;IACF;IAEA,IAAI,CAACZ,UACH;IAGF,IAAI/C;IAEJ,IAAI;QACFA,4JAAQ0B,YAAAA,CAAUkC,YAAAA,CAAarL,QAAQwK,UAAU;YAC/Cc,YAAY,CAAA;YAAA,uDAAA;YAEZC,eAAe,CAAA;QAAA,CAChB;IACH,EAAA,OAAQ,CAAC;IAET,OAAO9D;AACT;AC/QO,SAAS+D,eACdnG,KAAAA,EACAlE,KAAAA,EAC6B;IAC7B,IAAI,CAACkE,SAAS,CAAClE,OACb,OAAO;IAET,MAAMsK,UAAgB,CAAA,CAAA;IACtB,IAAIC,YAAoBrG,MAAMwC,MAAAA,IAAU;IACxC,MAAM8D,WACJ,OAAOtG,MAAMT,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzB,UAAUS,MAAMT,IAAAA,CAAK,CAAC,CAAA,IACtBS,MAAMT,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,EACVwK,WACJ,OAAOvG,MAAMT,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzB,UAAUS,MAAMT,IAAAA,CAAK,CAAC,CAAA,IACtBS,MAAMT,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,EACVO,QAAuCR,MAAM0K,IAAAA,CAChDC,CAAAA,MAAQA,IAAI1K,IAAAA,KAASuK,QACxB;IACA,IAAIhK,OACF8J,QAAQzD,IAAAA,CAAK;QAAC5G,MAAMO,MAAMP,IAAAA;IAAAA,CAAK;SAE/B,OAAO;IAET,IAAIO,SAAS0D,MAAMT,IAAAA,CAAK,CAAC,CAAA,KAAM,YAAY;QACzC,IACE,CAACjD,MAAMU,QAAAA,IACNb,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAAKV,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,GAE5D,OAAO;QAET,MAAMrB,QACJd,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAC5BV,MAAMU,QAAAA,CAASwJ,IAAAA,CAAME,CAAAA,MAAQA,IAAI3K,IAAAA,KAASwK,QAAQ;QACpD,IAAItJ,OACFmJ,QAAQzD,IAAAA,CAAK,UAAU,GACvByD,QAAQzD,IAAAA,CAAK;YAAC5G,MAAMkB,MAAMlB,IAAAA;QAAAA,CAAK,GAC/BsK,YACEpJ,MAAMI,IAAAA,IAAQJ,MAAMI,IAAAA,CAAKiB,MAAAA,IAAU0B,MAAMwC,MAAAA,GACrCxC,MAAMwC,MAAAA,GACLvF,MAAMI,IAAAA,IAAQJ,MAAMI,IAAAA,CAAKiB,MAAAA,IAAW;aAE3C,OAAO;IAEX;IACA,OAAO;QAACiB,MAAM6G;QAAS5D,QAAQ6D;IAAAA;AACjC;AAEO,SAASM,mBACdvH,SAAAA,EACAtD,KAAAA,EACwB;IACxB,IAAI,CAACsD,aAAa,CAACtD,SAASA,MAAMwC,MAAAA,KAAW,GAC3C,OAAO;IAET,IAAIsI,YAAyC,MACzCC,WAAwC;IAC5C,MAAM,EAACvE,MAAAA,EAAQhD,KAAAA,EAAAA,GAASF;IAUxB,OAREkD,UACAxG,MAAM0K,IAAAA,CAAMC,CAAAA,4IAAQzK,UAAAA,EAAQ;YAACD,MAAM0K,IAAI1K,IAAAA;QAAAA,GAAOuG,OAAO/C,IAAAA,CAAK,CAAC,CAAC,CAAC,KAAA,CAE7DqH,YAAYT,eAAe7D,QAAQxG,KAAK,CAAA,GAEtCwD,SAASxD,MAAM0K,IAAAA,CAAMC,CAAAA,4IAAQzK,UAAAA,EAAQ;YAACD,MAAM0K,IAAI1K,IAAAA;QAAAA,GAAOuD,MAAMC,IAAAA,CAAK,CAAC,CAAC,CAAC,KAAA,CACvEsH,WAAWV,eAAe7G,OAAOxD,KAAK,CAAA,GAEpC8K,aAAaC,WACR;QAACvE,QAAQsE;QAAWtH,OAAOuH;QAAUpE,UAAUrD,UAAUqD,QAAAA;IAAAA,IAE3D;AACT;AChEO,SAASuD,aACdc,QAAAA,EAGc;IACd,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO;IAGT,IACE2H,sOAAAA,EACED,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUE,KAC7B,GACA;QACA,MAAM0H,eAAcC,sBAClBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,YAAY,UACpD;QAEA,OAAKuE,eAIE;YACL1E,QAAQ0E;YACR1H,OAAO0H;QAAAA,IALA;IAOX;IAEA,MAAMA,cAAcC,sBAClBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,YAAY,UACpD,GACMyE,aAAaD,sBACjBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUE,KAAAA,EAC3BwH,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,aAAa,SACrD;IAEA,OAAI,CAACuE,eAAe,CAACE,aACZ,OAGF;QACL5E,QAAQ0E;QACR1H,OAAO4H;IAAAA;AAEX;AAEA,SAASD,sBACPH,QAAAA,EAGAK,cAAAA,EACAC,SAAAA,EAMY;IACZ,MAAMd,eAAWzC,4NAAAA,EAA8BsD,cAAc;IAE7D,IAAI,CAACb,UACH;IAGF,MAAMpH,aAAa4H,SAASO,aAAAA,CAAcC,GAAAA,CAAIhB,QAAQ;IAEtD,IAAIpH,eAAeb,KAAAA,GACjB;IAGF,MAAM/B,QAAQwK,SAASxD,OAAAA,CAAQxH,KAAAA,CAAMiD,EAAAA,CAAGG,UAAU;IAElD,IAAI,CAAC5C,OACH;IAGF,IAAI,iMAACyF,cAAAA,EAAY+E,SAASxD,OAAAA,EAAShH,KAAK,GACtC,OAAO;QACLiD,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA;IAIZ,IAAI+D,2MAAWgB,gCAAAA,EAA8B;QAC3ChI,MAAM4H,eAAe5H,IAAAA;IAEvB,CAAC;IAID,MAAMiI,qBAAsBjB,WAYxBlI,KAAAA,IAXAoJ,kOAAAA,EAAgC;QAC9BnE,SAAS;YACPrC,QAAQ6F,SAASxD,OAAAA,CAAQrC,MAAAA;YACzBnF,OAAO;gBAACQ,KAAK;aAAA;QAAA;QAEfoL,aAAa;YACXnI,MAAM;gBAAC;oBAACxD,MAAMuK;gBAAAA,CAAS;aAAA;YACvB9D,QAAQ2E,eAAe3E,MAAAA;QAAAA;QAEzB4E;IAAAA,CACD;IASL,IANAb,WAAWiB,qNACPD,gCAAAA,EAA8BC,kBAAkB,IAChDjB,UAIA,CAACA,UACH,OAAO;QACLhH,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA;IAIZ,IAAIA,SAASgF,oBAAoBhF,UAAU2E,eAAe3E,MAAAA,EACtDmF,YAA2B,CAAA,CAAA,EAC3BpH,aAAa,CAAA,GACbqH;IAEJ,KAAA,MAAW3K,SAASX,MAAMU,QAAAA,CAExB,IADAuD,cACItD,MAAMlB,IAAAA,KAASwK,UAAU;QAC3BqB,YAAY3K,uMACR4K,SAAAA,EAAOf,SAASxD,OAAAA,EAASrG,KAAK,IAChC0K,YAAY;YAACpH,UAAU;SAAA,GAAA,CAEvBoH,YAAY;YAACpH;YAAY,CAAC;SAAA,EAC1BiC,SAAS,CAAA;QAEX;IACF;IAMF,OAAImF,UAAUrJ,MAAAA,KAAW,IAChB;QACLiB,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA,IAIL;QACLjD,MAAM;YAACL,UAAU;SAAA,CAAE4I,MAAAA,CAAOH,SAAS;QACnCnF,wMAAQqF,SAAAA,EAAOf,SAASxD,OAAAA,EAASsE,SAAS,IACtC/C,KAAKkD,GAAAA,CAAIH,UAAUvK,IAAAA,CAAKiB,MAAAA,EAAQkE,MAAM,IACtCA;IAAAA;AAER;ACtKO,MAAMwF,+BACX,aAAA,GAAA,IAAIC,WAEOC,uBACX,aAAA,GAAA,IAAID,QAAAA,GACOE,uBACX,aAAA,GAAA,IAAIF,QAAAA,GAGOG,+BAAAA,aAAAA,GAAAA,IAAmCH,QAAAA,GCVnCI,qBAAqBC,0NAAAA,EAA2B,CAAA,CAAiB;ACHvE,SAAAC,gBAAA;IAAA,MAAA9N,0KAAAC,EAAA,CAAA;IAAA,IAAAK;IAAA,OAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA+N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEH1N,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;QACmB,iBAAA,CAAA;QACP,WAAA;QACH,OAAA;YAAAuK,UACK;YAAUoD,OACb;YAAM9D,QAAA;YAAA+D,cAEC;YAAwBC,QAAA;QAAA;QAIxC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAQ;IAAA,CACV,GAAMnO,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAZNM;AAYM;ACZH,SAAA8N,yBAAArO,KAAAA,EAAA;IAAA,MAAAC,KAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAK;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA+N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIS1N,KAAA;QAAA+N,YAAa;IAAA,GAAOrO,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAS;IAAA,OAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAmH,WAAAA,CAAA5F,IAAAA,IAAAtB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAmH,WAAAA,CAAApF,KAAAA,GAAAA,CAAhCrB,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,OAAA;QAAY,OAAAH;QAAsB,UAAA;YAAA;YAC9BP,MAAKmH,WAAAA,CAAApF,KAAAA;YAAmB;YAAG/B,MAAKmH,WAAAA,CAAA5F,IAAAA;YAAkB;SAAA;IAAA,CACtD,GAAMtB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmH,WAAAA,CAAA5F,IAAAA,EAAAtB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmH,WAAAA,CAAApF,KAAAA,EAAA9B,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA,EAFNS;AAEM;AAIH,SAAA6N,0BAAAvO,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,CAAA;IAAA,IAAAK;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAA+N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIU1N,KAAA;QAAA+N,YAAa;IAAA,GAAOrO,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAS;IAAA,OAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwO,YAAAA,CAAAjN,IAAAA,IAAAtB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwO,YAAAA,CAAAzM,KAAAA,GAAAA,CAAjCrB,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,QAAA;QAAa,OAAAH;QAAsB,UAAA;YAAA;YAC/BP,MAAKwO,YAAAA,CAAAzM,KAAAA;YAAoB;YAAG/B,MAAKwO,YAAAA,CAAAjN,IAAAA;YAAmB;SAAA;IAAA,CACxD,GAAOtB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwO,YAAAA,CAAAjN,IAAAA,EAAAtB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwO,YAAAA,CAAAzM,KAAAA,EAAA9B,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA,EAFPS;AAEO;ACRJ,SAAS+N,iBAAiB,EAC/BxF,cAAAA,EACAqD,QAAAA,EAIF,EAAG;IACD,IAAIoC,gBAAgBzF;IAUpB,4NAR4B0F,uBAAAA,EAA+B;QACzD,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GAGC,OAAOyF;IAGT,MAAME,6OAA6BD,uBAAAA,EAA+B;QAEhE7F,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GACK4F,oBAAmBF,mOAAAA,EAA4B;QACnD,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GACK6F,cAAcH,+NAAAA,EAAuB;QACzC,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD;IAEG2F,8BAA8BC,oBAAoBC,eAAAA,CAGpDJ,gBAAgB;QACd5G,QAAQqB,qNAAAA,EAAyB;YAC/BL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO+M;QAAAA,CACR;QACD/J,oNAAOqE,mBAAAA,EAAuB;YAC5BL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO+M;QAAAA,CACR;IAAA,CAAA;IAIL,MAAMvH,yOAAiBqH,oBAAAA,EAA4BrC,QAAQ;IAE3D,IACEA,SAASxD,OAAAA,CAAQlE,SAAAA,oNACjB+J,sBAAAA,EAA8BrC,QAAQ,KACtChF,eAAexD,MAAAA,GAAS,GACxB;QACA,MAAMiL,0BAAsBJ,6OAAAA,EAAiCrC,QAAQ,GAC/D0C,oBAAoBL,+OAAAA,EAA+BrC,QAAQ;QAEjE,IAAI,CAACyC,uBAAuB,CAACC,mBAC3B,OAAON;QAGT,MAAMtJ,sNAAsB+D,qBAAAA,EAAyB;YACnDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOiN;QAAAA,CACR,GACKrJ,qBAAoByD,+NAAAA,EAAuB;YAC/CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkN;QAAAA,CACR;QAEkCL,CAAAA,GAAAA,mNAAAA,CAAAA,yBAAAA,EACjC1F,cACF,EAAE;YACA,GAAGqD,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW;oBAACkD,QAAQ1C;oBAAqBN,OAAOY;gBAAAA;YAAiB;QACnE,CACD,KAAA,CAGCgJ,gBAAgB;YACd5G,QAAQ1C;YACRN,OAAOY;QAAAA,CAAAA;IAGb;IAEA,OAAOgJ;AACT;ACzGO,MAAMO,sBAAsBA,IAAcC,UAAU,EAAE,GAEvDC,kBAAmB,aAAA,GAAA,CAAA,MAAM;IAC7B,IAAIC;IACJ,OAAO,MAAM;QACX,IAAIA,OACF,OAAOA;QAGTA,QAAQ,CAAA,CAAA;QACR,IAAA,IAASC,IAAI,GAAGA,IAAI,KAAK,EAAEA,EACzBD,KAAAA,CAAMC,CAAC,CAAA,GAAA,CAAKA,IAAI,GAAA,EAAOC,QAAAA,CAAS,EAAE,EAAEtK,KAAAA,CAAM,CAAC;QAE7C,OAAOoK;IACT;AACF,CAAA,EAAA;AAGA,SAASG,UAAUzL,SAAS,EAAA,EAAI;IAC9B,MAAM0L,QAAQ,IAAIC,WAAW3L,MAAM;IACnC4L,WAAAA,mKAAAA,EAAgBF,KAAK,GACdA;AACT;AAEA,SAASN,UAAUpL,MAAAA,EAAyB;IAC1C,MAAMsL,QAAQD,gBAAAA;IACd,OAAOI,UAAUzL,MAAM,EACpB6L,MAAAA,CAAO,CAACC,KAAKnL,IAAMmL,MAAMR,KAAAA,CAAM3K,CAAC,CAAA,EAAG,EAAE,EACrCO,KAAAA,CAAM,GAAGlB,MAAM;AACpB;ACvBO,SAAS+L,qBAAqBC,MAAAA,EAMlB;IACjB,OAAO;QACLC,IAAId,oBAAAA;QACJlO,MAAM+O,QAAQ/O;QACdiP,WAAWF,QAAQE;IAAAA;AAEvB;ACrBO,MAAMC,eAAeJ,qBAAqB;IAAC9O,MAAM;AAAM,CAAC;ACMxD,SAASmP,sCAAsC,EACpDC,GAAAA,EACAC,sBAAAA,EAMF,EAAG;IACD,OAAO;QACL;YACEC,UAAUC,2LAAAA,EAAe;gBACvBjQ,IAAI;gBACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;oBAC5B,MAAMiI,iOAAiB7B,gBAAAA,EAAwB;wBAC7C,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;wBAAAA;oBAC5B,CACD;oBAED,IAAI,CAAC4L,kBAAkBA,eAAe3L,IAAAA,CAAKtD,IAAAA,KAAS4O,KAClD,OAAO,CAAA;oBAGT,MAAMM,aAAalI,MAAMkI,UAAAA;oBAEzB,IAAI,CAACA,YACH,OAAO,CAAA;oBAGT,MAAM/B,gBAAgBD,iBAAiB;wBACrCxF,gBAAgBwH,WAAW7L,SAAAA;wBAC3B0H;oBAAAA,CACD;oBAUD,+NARsBqC,oBAAAA,EAA4B;wBAChD,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW8J;wBAAAA;oBACb,CACD,EAGe1H,IAAAA,CAAM0J,CAAAA,eAAiBA,aAAa7L,IAAAA,CAAKtD,IAAAA,KAAS4O,GAAG,IAE5D,CAAA,4NAGoBxB,0BAAAA,EAAkC;wBAC7D,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW8J;wBAAAA;oBACb,CACD;gBAGH;gBACAiC,SAAS;oBACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;4BACX;gCACEqI,MAAM;gCACNC,QAAQA,MAAM;oCACZT,uBAAuB7H,MAAMuC,QAAAA,CAAShJ,KAAK;gCAC7C;4BAAA,CACD;yBACF;iBAAA;YAAA,CAEJ;YACDgP,UAAUjB,qBAAqB;gBAC7BG,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD;QAAA;QAEH;YACEV,oLAAUC,iBAAAA,EAAe;gBACvBjQ,IAAI;gBACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GACAA,MAAMqI,IAAAA,KAAS;gBAExBD,SAAS;oBACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;4BACX;gCACEqI,MAAM;gCACNC,QAAQA,MAAM;oCACZT,uBAAuBvM,KAAAA,CAAS;gCAClC;4BAAA;sMAEFmN,UAAAA,EAAQzI,KAAK,CAAC;yBACf;iBAAA;YAAA,CAEJ;YACDuI,UAAUjB,qBAAqB;gBAC7BG,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD;QAAA,CACF;KAAA;AAEL;AC5GO,SAAAE,6BAAA1Q,EAAAA,EAAA;IAAA,MAAAN,QAAAC,kKAAAA,EAAA,CAAA,GAAsC,EAAAiQ,GAAAA,EAAAC,sBAAAA,EAAAA,GAAA7P,IAS3C8H,uNAAoB6I,cAAAA,EAAArD,kBAA6B;IAAC,IAAAnN,IAAAyQ;IAAAlR,CAAAA,CAAA,CAAA,CAAA,KAAAoI,eAAApI,CAAAA,CAAAA,EAAAA,KAAAkQ,OAAAlQ,CAAAA,CAAA,CAAA,CAAA,KAAAmQ,yBAAAA,CAExC1P,KAAAA,MAAA;QACR,MAAA0Q,kBAAwBlB,sCAAA;YAAAC;YAAAC;QAAAA,CAGvB;QAAC,KAAA,MAEGiB,kBAAwBD,gBAC3B/I,YAAWiJ,IAAAA,CAAA;YAAAV,MACH;YAAcS;QAAAA,CAErB;QAAC,OAAA,MAAA;YAAA,KAAA,MAIGE,oBAAwBH,gBAC3B/I,YAAWiJ,IAAAA,CAAA;gBAAAV,MACH;gBAAiBS,gBACvBA;YAAAA,CACD;QAAC;IAAA,GAGLF,KAAA;QAAC9I;QAAa8H;QAAKC,sBAAsB;KAAA,EAACnQ,CAAAA,CAAAA,EAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,EAAAA,GAAAkQ,KAAAlQ,CAAAA,CAAAA,EAAAA,GAAAmQ,wBAAAnQ,CAAAA,CAAAA,EAAAA,GAAAS,IAAAT,CAAAA,CAAAA,EAAAA,GAAAkR,EAAAA,IAAAA,CAAAzQ,KAAAT,CAAAA,CAAA,CAAA,CAAA,EAAAkR,KAAAlR,CAAAA,CAAA,CAAA,CAAA,6MArB7CU,YAAAA,EAAUD,IAqBPyQ,EAA0C;AAAC;ACnBzC,SAASK,kBAAkBxR,KAAAA,EAS/B;IACD,MAAM,CAACyR,mBAAmBC,oBAAoB,CAAA,6MAC5CC,WAAAA,CAAAA,IACIC,2NAAiBC,SAAAA,EAAuB,IAAI,GAC5CC,qLAAWC,cAAAA,CAAAA,IACXC,oLAAUC,mBAAAA,EACb9R,CAAAA,SACC2R,YACA3R,OAAOyE,SAAAA,KAAc,QACrBS,qJAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS,CACtC;IAEAqM,6BAA6B;QAC3Bd,KAAKnQ,MAAM6G,OAAAA,CAAQtF,IAAAA;QACnB6O,wBAAwBsB;IAAAA,CACzB;IAED,MAAMS,mBAAmBnS,MAAMoS,YAAAA,CAAalL,YAAAA,CAAa8E,IAAAA,CACtDqG,CAAAA,aAAeA,WAAWtR,IAAAA,KAASf,MAAM6G,OAAAA,CAAQ9E,KACpD;IAEKoQ,oBACH7G,QAAQgH,KAAAA,CACN,CAAA,6BAAA,EAAgCtS,MAAM6G,OAAAA,CAAQ9E,KAAK,CAAA,WAAA,CACrD;IAGF,MAAMoF,cAAcnH,MAAMmH,WAAAA,IAAe;QACvC5F,MAAMvB,MAAM6G,OAAAA,CAAQtF,IAAAA;QACpBQ,OAAO/B,MAAM6G,OAAAA,CAAQ9E,KAAAA;IAAAA;IAGvB,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EACG,OAAA;QACC,GAAI/B,MAAMuS,UAAAA;QACV,WAAU;QACV,kBAAgBvS,MAAM6G,OAAAA,CAAQtF,IAAAA;QAC9B,mBAAiBvB,MAAM6G,OAAAA,CAAQ9E,KAAAA;QAC/B,mBAAgB;QAEf0P,UAAAA;YAAAA,sBAAsB,UAAU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA,CAAA,CAAa,IAAM;YACpDzR,MAAMwC,QAAAA;YACP,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,OAAA;gBACC,KAAKoP;gBACL,iBAAiB,CAAA;gBACjB,WAAW,CAAC5R,MAAMwS,QAAAA;gBAEjBxS,UAAAA,MAAMyS,WAAAA,IAAeN,mBACpBnS,MAAMyS,WAAAA,CAAY;oBAChBjQ,UAAU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,0BAAA;wBAAyB;oBAAA,CAAyB;oBAC7DkQ,kBAAkBd;oBAClBI;oBACAjN,MAAM;wBAAC;4BAACxD,MAAMvB,MAAM6G,OAAAA,CAAQtF,IAAAA;wBAAAA,CAAK;qBAAA;oBACjC8Q,YAAYF;oBACZL;oBACAlB,MAAMuB;oBACN7Q,OAAO6F;gBAAAA,CACR,IAED,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,0BAAA;oBAAyB;gBAAA,CAAyB;YAAA,CAEvD;YACCsK,sBAAsB,QAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA,CAAA,CAAa,IAAM;SAAA;IAAA,CACrD;AAEJ;AC3EO,SAASkB,mBAAmB3S,KAAAA,EAQhC;IACD,MAAM4S,4NAAkBf,SAAAA,EAAoB,IAAI,GAC1CvJ,wLAAcuK,iBAAAA,CAAAA,IACdf,WAAWC,wLAAAA,CAAAA,IACXC,oLAAUC,mBAAAA,EACb9R,CAAAA,SACC2R,YACA3R,OAAOyE,SAAAA,KAAc,qJACrBS,QAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS,CACtC,GAEMuN,mBAAmBnS,MAAMoS,YAAAA,CAAaU,aAAAA,CAAc9G,IAAAA,CACvDwC,CAAAA,eAAiBA,aAAazN,IAAAA,KAASf,MAAM6G,OAAAA,CAAQ9E,KACxD;IAEKoQ,oBACH7G,QAAQgH,KAAAA,CACN,CAAA,8BAAA,EAAiCtS,MAAM6G,OAAAA,CAAQ9E,KAAK,CAAA,WAAA,CACtD;IAGF,MAAMgD,2JAAOuE,YAAAA,CAAUyJ,QAAAA,CAASzK,aAAatI,MAAM6G,OAAO,GACpD,CAAC/E,KAAK,CAAA,GAAIyD,cAAc;QAC5BpF,QAAQmI;QACR9C,OAAO;YACLT;YACAiD,QAAQ;QAAA;IACV,CACD;IAEIlG,SACHwJ,QAAQgH,KAAAA,CACN,CAAA,6CAAA,EAAgDtS,MAAM6G,OAAAA,CAAQtF,IAAI,EACpE;IAGF,MAAMiN,iBAAe;QACnBjN,MAAMvB,MAAM6G,OAAAA,CAAQtF,IAAAA;QACpBQ,OAAO/B,MAAM6G,OAAAA,CAAQ9E,KAAAA;QACrB,GAAI,WAAW/B,MAAM6G,OAAAA,IAAW,OAAO7G,MAAM6G,OAAAA,CAAQvF,KAAAA,IAAU,WAC3DtB,MAAM6G,OAAAA,CAAQvF,KAAAA,GACd,CAAA,CAAA;IAAC;IAGP,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EACG,QAAA;QAAA,GACKtB,MAAMuS,UAAAA;QACV,WAAW,CAACvS,MAAMwS,QAAAA;QAClB,WAAU;QACV,kBAAgBhE,eAAajN,IAAAA;QAC7B,mBAAiBiN,eAAazM,KAAAA;QAC9B,mBAAgB;QAEf/B,UAAAA;YAAAA,MAAMwC,QAAAA;YACP,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,QAAA;gBAAK,KAAKoQ;gBAAiB,OAAO;oBAACI,SAAS;gBAAA;gBAC1ChT,UAAAA,MAAMiT,WAAAA,IAAenR,SAASqQ,mBAC7BnS,MAAMiT,WAAAA,CAAY;oBAChBC,aAAa,CAAA,CAAA;oBACb1Q,UAAU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2BAAA;wBAA0B,cAAcgM;oBAAAA,CAAa;oBAChEkE,kBAAkBE;oBAClBd;oBACAE;oBACAjN,MAAM;wBAAC;4BAACxD,MAAMO,MAAMP,IAAAA;wBAAAA;wBAAO;wBAAY;4BAACA,MAAMvB,MAAM6G,OAAAA,CAAQtF,IAAAA;wBAAAA,CAAK;qBAAA;oBACjE8Q,YAAYF;oBACZ7Q,OAAOkN;oBACPoC,MAAMuB;gBAAAA,CACP,IAED,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,2BAAA;oBAA0B,cAAc3D;gBAAAA,CAAa;YAAA,CAE1D;SAAA;IAAA,CACF;AAEJ;AChFO,SAAS2E,gBAAgBnT,KAAAA,EAW7B;IACD,MAAM,CAACyR,mBAAmBC,oBAAoB,CAAA,6MAC5CC,WAAAA,CAAAA,IACIyB,qNAAWvB,SAAAA,EAAuB,IAAI,GAEtCC,qLAAWC,cAAAA,CAAAA,IACXC,UAAUC,6LAAAA,EACb9R,CAAAA,SACC2R,YACA3R,OAAOyE,SAAAA,KAAc,qJACrBS,QAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS,CACtC;IAEAqM,6BAA6B;QAC3Bd,KAAKnQ,MAAM6G,OAAAA,CAAQtF,IAAAA;QACnB6O,wBAAwBsB;IAAAA,CACzB;IAED,MAAM2B,sLAAYpB,mBAAAA,EAAkB9R,CAAAA,WAClCA,SAAOmT,YAAAA,CAAaxG,GAAAA,CAAI9M,MAAMiC,SAAAA,CAAUV,IAAI,CAC9C;IAEA,IAAIiB,WAAWxC,MAAMwC,QAAAA;IAErB,IAAIxC,MAAMuT,WAAAA,IAAevT,MAAMiC,SAAAA,CAAUG,KAAAA,EAAO;QAC9C,MAAMoR,wBACJxT,MAAMiC,SAAAA,CAAUG,KAAAA,KAAUyB,KAAAA,IACtB7D,MAAMoS,YAAAA,CAAalP,MAAAA,CAAO8I,IAAAA,CACvB5J,CAAAA,QAAUA,MAAMd,KAAAA,KAAUtB,MAAMiC,SAAAA,CAAUG,KAC7C,IACAyB,KAAAA;QAEF2P,wBACFhR,WAAWxC,MAAMuT,WAAAA,CAAY;YAC3BzR,OAAO9B,MAAMiC,SAAAA;YACbO;YACAkQ,kBAAkBU;YAClBpB;YACAjN,MAAM;gBAAC;oBAACxD,MAAMvB,MAAMiC,SAAAA,CAAUV,IAAAA;gBAAAA,CAAK;aAAA;YACnC8Q,YAAYmB;YACZ1B;YACAxQ,OAAOtB,MAAMiC,SAAAA,CAAUG,KAAAA;QAAAA,CACxB,IAEDkJ,QAAQgH,KAAAA,CACN,CAAA,gDAAA,EAAmDtS,MAAMiC,SAAAA,CAAUG,KAAK,EAC1E;IAEJ;IAEA,IAAIpC,MAAMyT,cAAAA,IAAkBzT,MAAMiC,SAAAA,CAAUoF,QAAAA,EAAU;QACpD,MAAMqM,2BAA2B1T,MAAMoS,YAAAA,CAAauB,KAAAA,CAAM3H,IAAAA,CACvD4H,CAAAA,OAASA,KAAKtS,KAAAA,KAAUtB,MAAMiC,SAAAA,CAAUoF,QAC3C;QAEIqM,2BACFlR,WAAWxC,MAAMyT,cAAAA,CAAe;YAC9B3R,OAAO9B,MAAMiC,SAAAA;YACbO;YACAkQ,kBAAkBU;YAClBpB;YACA6B,OAAO7T,MAAMiC,SAAAA,CAAU4R,KAAAA,IAAS;YAChC9O,MAAM;gBAAC;oBAACxD,MAAMvB,MAAMiC,SAAAA,CAAUV,IAAAA;gBAAAA,CAAK;aAAA;YACnCuQ;YACAxQ,OAAOtB,MAAMiC,SAAAA,CAAUoF,QAAAA;YACvBgL,YAAYqB;QAAAA,CACb,IAEDpI,QAAQgH,KAAAA,CACN,CAAA,oDAAA,EAAuDtS,MAAMiC,SAAAA,CAAUoF,QAAQ,EACjF;IAEJ;IAEA,OACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAC,OAAA;QACC,GAAIrH,MAAMuS,UAAAA;QACV,WAAW;YACT;YACA,iBACA;eAAIvS,MAAMiC,SAAAA,CAAUG,KAAAA,GAChB;gBAAC,CAAA,oBAAA,EAAuBpC,MAAMiC,SAAAA,CAAUG,KAAK,EAAE;aAAA,GAC/C,CAAA,CAAA,EACJ;eAAIpC,MAAMiC,SAAAA,CAAUoF,QAAAA,GAChB;gBACE;gBACA,CAAA,aAAA,EAAgBrH,MAAMiC,SAAAA,CAAUoF,QAAQ,EAAA;gBACxC,CAAA,mBAAA,EAAsBrH,MAAMiC,SAAAA,CAAU4R,KAAAA,IAAS,CAAC,EAAE;aAAA,GAEpD,CAAA,CAAG;SAAA,CACP5P,IAAAA,CAAK,GAAG;QACV,YAAYjE,MAAM8T,UAAAA;QAClB,kBAAgB9T,MAAMiC,SAAAA,CAAUV,IAAAA;QAChC,mBAAiBvB,MAAMiC,SAAAA,CAAUF,KAAAA;QACjC,mBAAgB;QAChB,GAAK/B,MAAMiC,SAAAA,CAAUoF,QAAAA,KAAaxD,KAAAA,IAC9B;YACE,kBAAkB7D,MAAMiC,SAAAA,CAAUoF,QAAAA;QAAAA,IAEpC,CAAA,CAAA;QACJ,GAAKrH,MAAMiC,SAAAA,CAAU4R,KAAAA,KAAUhQ,KAAAA,IAC3B;YACE,cAAc7D,MAAMiC,SAAAA,CAAU4R,KAAAA;QAAAA,IAEhC,CAAA,CAAA;QACJ,GAAK7T,MAAMiC,SAAAA,CAAUG,KAAAA,KAAUyB,KAAAA,IAC3B;YACE,cAAc7D,MAAMiC,SAAAA,CAAUG,KAAAA;QAAAA,IAEhC,CAAA,CAAA;QACJ,GAAKiR,cAAcxP,KAAAA,IACf;YACE,mBAAmBwP;QAAAA,IAErB,CAAA,CAAA;QAEH5B,UAAAA;YAAAA,sBAAsB,UAAU,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA,CAAA,CAAa,IAAM;YAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACpD,OAAA;gBAAI,KAAK2B;gBACPpT,UAAAA,MAAMyS,WAAAA,GACHzS,MAAMyS,WAAAA,CAAY;oBAChBjQ;oBACAkQ,kBAAkBU;oBAClBpB;oBACA6B,OAAO7T,MAAMiC,SAAAA,CAAU4R,KAAAA;oBACvBxM,UAAUrH,MAAMiC,SAAAA,CAAUoF,QAAAA;oBAC1BtC,MAAM;wBAAC;4BAACxD,MAAMvB,MAAMiC,SAAAA,CAAUV,IAAAA;wBAAAA,CAAK;qBAAA;oBACnCuQ;oBACAO,YAAYrS,MAAMoS,YAAAA,CAAatQ,KAAAA;oBAC/BM,OAAOpC,MAAMiC,SAAAA,CAAUG,KAAAA;oBACvBwO,MAAM5Q,MAAMoS,YAAAA,CAAatQ,KAAAA;oBACzBR,OAAOtB,MAAMiC,SAAAA;gBAAAA,CACd,IACDO;YAAAA,CACN;YACCiP,sBAAsB,QAAQ,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA,CAAA,CAAa,IAAM;SAAA;IAAA,CACrD;AAEJ;ACtJO,SAAAsC,cAAA/T,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,EAAA,GAWLmI,wNAAoB6I,aAAAA,EAAArD,kBAA6B,GACjDpH,gMAAeuN,cAAAA,EAAY3L,aAAW4L,OAAyB,GAC/D7B,sMAAqB4B,cAAAA,EAAY3L,aAAW6L,MAE5C,GACAC,wLAAoBtB,iBAAAA,CAAAA;IAG4C,IAA9D,cAAc7S,MAAK6G,OAAAA,IAAY7G,MAAK6G,OAAAA,CAAA9D,QAAAA,KAAA,CAAA,GAE1B;QAAA,IAAAxC;QAAA,OAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAmS,gBAAAnS,CAAAA,CAAAA,EAAAA,KAAAD,MAAAuS,UAAAA,IAAAtS,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwC,QAAAA,IAAAvC,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwS,QAAAA,IAAAvS,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAiT,WAAAA,IAAAhT,CAAAA,CAAAA,EAAAA,KAAAwG,SAAAA,CAERlG,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,oBAAA;YACa,YAAAP,MAAKuS,UAAAA;YACR,SAAAvS,MAAK6G,OAAAA;YACAuL;YACJ,UAAApS,MAAKwS,QAAAA;YACF,aAAAxS,MAAKiT,WAAAA;YACVxM;YAEPzG,UAAAA,MAAKwC,QAAAA;QAAAA,CACR,GAAqBvC,CAAAA,CAAAA,EAAAA,GAAAmS,cAAAnS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuS,UAAAA,EAAAtS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwC,QAAAA,EAAAvC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwS,QAAAA,EAAAvS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAiT,WAAAA,EAAAhT,CAAAA,CAAAA,EAAAA,GAAAwG,QAAAxG,CAAAA,CAAAA,EAAAA,GAAAM,GAAAA,IAAAA,MAAAN,CAAAA,CAAA,CAAA,CAAA,EATrBM;IASqB;IAAA,IAAAuB,OAAAvB;IAAA,IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,MAAA6G,OAAAA,CAAAtF,IAAAA,IAAAtB,CAAAA,CAAA,CAAA,CAAA,KAAAwG,UAAAxG,CAAAA,CAAA,EAAA,CAAA,KAAAkU,YAAAtH,aAAAA,IAAA5M,CAAAA,CAAA,EAAA,CAAA,KAAAkU,YAAA7S,KAAAA,EAAA;QAIzB,MAAAoD,aAAmByP,YAAWtH,aAAAA,CAAAC,GAAAA,CAAmB9M,MAAK6G,OAAAA,CAAAtF,IAAa;QACnEO,QACE4C,eAAUb,KAAAA,IAAiBsQ,YAAW7S,KAAAA,CAAAiD,EAAAA,CAAUG,UAAU,IAACb,KAAAA,GAEzDtD,oMAAAgH,eAAAA,EAAA;YAAAd;QAAAA,GAAsB3E,KAAK,GAAC7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAtF,IAAAA,EAAAtB,CAAAA,CAAAA,EAAAA,GAAAwG,QAAAxG,CAAAA,CAAA,EAAA,CAAA,GAAAkU,YAAAtH,aAAAA,EAAA5M,CAAAA,CAAA,EAAA,CAAA,GAAAkU,YAAA7S,KAAAA,EAAArB,CAAAA,CAAAA,GAAAA,GAAA6B,OAAA7B,CAAAA,CAAAA,GAAAA,GAAAM;IAAA,OAAAuB,QAAA7B,CAAAA,CAAA,EAAA,CAAA,EAAAM,KAAAN,CAAAA,CAAA,EAAA,CAAA;IAAA,IAA5BM,IAA4B;QAAA,IAAAG;QAAA,OAAAT,CAAAA,CAAA,EAAA,CAAA,KAAA6B,SAAA7B,CAAAA,CAAAA,GAAAA,KAAAmS,gBAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuS,UAAAA,IAAAtS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAwC,QAAAA,IAAAvC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAAA,GAAAA,KAAAD,MAAAwS,QAAAA,IAAAvS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAyS,WAAAA,IAAAxS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAyT,cAAAA,IAAAxT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuT,WAAAA,IAAAtT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA8T,UAAAA,GAAAA,CAE5BpT,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,iBAAA;YACa,YAAAV,MAAKuS,UAAAA;YACR,SAAAvS,MAAK6G,OAAAA;YACAuL;YACJ,UAAApS,MAAKwS,QAAAA;YACF,aAAAxS,MAAKyS,WAAAA;YACF,gBAAAzS,MAAKyT,cAAAA;YACR,aAAAzT,MAAKuT,WAAAA;YACN,YAAAvT,MAAK8T,UAAAA;YACNhS,WAAAA;YAEV9B,UAAAA,MAAKwC,QAAAA;QAAAA,CACR,GAAkBvC,CAAAA,CAAAA,GAAAA,GAAA6B,OAAA7B,CAAAA,CAAAA,GAAAA,GAAAmS,cAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuS,UAAAA,EAAAtS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAwC,QAAAA,EAAAvC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAwS,QAAAA,EAAAvS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyS,WAAAA,EAAAxS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyT,cAAAA,EAAAxT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuT,WAAAA,EAAAtT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA8T,UAAAA,EAAA7T,CAAAA,CAAAA,GAAAA,GAAAS,GAAAA,IAAAA,MAAAT,CAAAA,CAAA,EAAA,CAAA,EAZlBS;IAYkB;IAAA,IAAAA;IAAA,OAAAT,CAAAA,CAAA,EAAA,CAAA,KAAA6B,SAAA7B,CAAAA,CAAA,EAAA,CAAA,KAAAmS,gBAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuS,UAAAA,IAAAtS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAwC,QAAAA,IAAAvC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAwS,QAAAA,IAAAvS,CAAAA,CAAAA,GAAAA,KAAAD,MAAAyS,WAAAA,IAAAxS,CAAAA,CAAAA,GAAAA,KAAAwG,SAAAA,CAKpB/F,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,mBAAA;QACa,YAAAV,MAAKuS,UAAAA;QACJzQ,aAAAA;QACJ,SAAA9B,MAAK6G,OAAAA;QACAuL;QACJ,UAAApS,MAAKwS,QAAAA;QACF,aAAAxS,MAAKyS,WAAAA;QACVhM;QAEPzG,UAAAA,MAAKwC,QAAAA;IAAAA,CACR,GAAoBvC,CAAAA,CAAAA,GAAAA,GAAA6B,OAAA7B,CAAAA,CAAAA,GAAAA,GAAAmS,cAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuS,UAAAA,EAAAtS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAwC,QAAAA,EAAAvC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAwS,QAAAA,EAAAvS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyS,WAAAA,EAAAxS,CAAAA,CAAAA,GAAAA,GAAAwG,QAAAxG,CAAAA,CAAAA,GAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,EAAA,CAAA,EAVpBS;AAUoB;AArEjB,SAAAwT,OAAAE,GAAAA,EAAA;IAAA,OAcHC,IAACvL,OAAAA,CAAAwL,eAAAA,CAAAA;AAA0B;AAdxB,SAAAL,QAAAI,CAAAA,EAAA;IAAA,OAY0CA,EAACvL,OAAAA,CAAArC,MAAAA;AAAA;ACtB3C,MAAM8N,sOACXzG,gBAAAA,EAAyC,IAAI,GAOlC0G,wBAAwBA,MAAA;IACnC,MAAArU,mNAAe+Q,aAAAA,EAAAqD,yBAAoC;IAAC,IAAA,CAE/CpU,QAAM,MAAA,IAAAkD,MAEP,oGAAsG;IAAA,OAInGlD;AAAM,GChBTsU,eAAeA,CACnBC,UACAC,aACG;IACHA,SAASD,QAAQ;IACjB,MAAMlS,WAAWkS,SAASlM,WAAAA,CAAAA,EAAchG,QAAAA;IACpCA,YACFoS,OAAOC,MAAAA,CAAOrS,QAAQ,EAAEsS,OAAAA,CAASrS,CAAAA,UAAU;QACzCgS,aAAahS,OAAsBkS,QAAQ;IAC7C,CAAC;AAEL;AAEO,SAASI,UAAUL,QAAAA,EAAuB;IAK/C,MAAMM,qBAA8D,CAAA,CAAA;IACpEP,aAAaC,UAAWO,CAAAA,QAAQ;QAC9BD,mBAAmB7M,IAAAA,CAAK;YAAC8M;YAAKA,IAAIzM,WAAAA,EAAa;SAAC,GAK9CyM,IAAYC,SAAAA,GAAY,aAAA,GAAA,IAAIC,IAAAA;IAChC,CAAC;IACD,MAAMC,iBAAiBV,SAASW,MAAAA,CAAO7M,WAAAA,GAAAA;IAEvCkM,SAASY,IAAAA,CAAAA,GACPZ,SAASW,MAAAA,CAAeE,SAAAA,GAAYH,gBACtCJ,mBAAmBF,OAAAA,CAAQ,CAAC,CAACG,KAAK3I,QAAQ,CAAA,KAAM;QAC5C2I,IAAYO,iBAAAA,GAAoB,GAChCP,IAAYM,SAAAA,GAAYjJ;IAC5B,CAAC;AACH;ACxCO,MAAMmJ,gBAAgC;IAC3CC,UAAU;IACVC,WAAWA,CAAC,EAACrJ,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAChC,MAAMqN,wBAAwBtJ,SAASxD,OAAAA,CAAQ+M,UAAAA,CAAW7J,IAAAA,CACvD8J,CAAAA,YAAcA,UAAUJ,QAAAA,KAAa,6BACxC;QAEA,OAAKE,wBAcE;YACL,GANyBA,sBAAsBD,SAAAA,CAAU;gBACzDrJ;gBACA/D;YAAAA,CACD,CAAA;YAICmN,UAAU;YACVK,aAAaxN,MAAMwN,WAAAA;QAAAA,IAhBZ;YACLnF,MAAM;YACN8E,UAAU;YACVK,aAAaxN,MAAMwN,WAAAA;YACnBC,QAAQ;QAAA;IAcd;IACAC,aAAaA,CAAC,EAAC3J,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAClC,MAAMqN,wBAAwBtJ,SAASxD,OAAAA,CAAQ+M,UAAAA,CAAW7J,IAAAA,CACvD8J,CAAAA,YAAcA,UAAUJ,QAAAA,KAAa,6BACxC;QAEA,OAAKE,wBAaE;YACL,GAN2BA,sBAAsBK,WAAAA,CAAY;gBAC7D3J;gBACA/D;YAAAA,CACD,CAAA;YAICmN,UAAU;QAAA,IAdH;YACL9E,MAAM;YACN8E,UAAU;YACVM,QAAQ;QAAA;IAad;AACF,GChDaE,wBAAwC;IACnDR,UAAU;IACVC,WAAWA,CAAC,EAACrJ,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAGhC,IAAI,CAFc+D,SAASxD,OAAAA,CAAQlE,SAAAA,EAGjC,OAAO;YACLgM,MAAM;YACN8E,UAAU;YACVK,aAAaxN,MAAMwN,WAAAA;YACnBC,QAAQ;QAAA;QAIZ,MAAMG,yNAASxH,mBAAAA,EAA2BrC,QAAQ;QAElD,OAAI6J,OAAOrS,MAAAA,KAAW,IACb;YACL8M,MAAM;YACN8E,UAAU;YACVM,QAAQ;YACRD,aAAaxN,MAAMwN,WAAAA;QAAAA,IAIhB;YACLnF,MAAM;YACNwF,MAAMC,KAAKC,SAAAA,CAAUH,MAAM;YAC3BT,UAAU;YACVK,aAAaxN,MAAMwN,WAAAA;QAAAA;IAEvB;IACAE,aAAaA,CAAC,EAAC3J,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAClC,MAAM4N,SAASE,KAAKE,KAAAA,CAAMhO,MAAM6N,IAAI;QAEpC,IAAI,CAACzU,MAAMC,OAAAA,CAAQuU,MAAM,GACvB,OAAO;YACLvF,MAAM;YACN8E,UAAU;YACVM,QAAQ;QAAA;QAIZ,MAAMQ,eAAeL,OAAOM,OAAAA,CAAS3U,CAAAA,UAAU;YAC7C,MAAM4U,8MAAcC,aAAAA,EAAW;gBAC7B7N,SAASwD,SAASxD,OAAAA;gBAClBhH;gBACA8U,SAAS;oBACPC,aAAa,CAAA;oBACbC,gBAAgB,CAAA;gBAAA;YAClB,CACD;YACD,OAAOJ,cAAc;gBAACA,WAAW;aAAA,GAAI,CAAA,CAAA;QACvC,CAAC;QAED,OAAIF,aAAa1S,MAAAA,KAAW,KAAKqS,OAAOrS,MAAAA,GAAS,IACxC;YACL8M,MAAM;YACN8E,UAAU;YACVM,QAAQ;QAAA,IAIL;YACLpF,MAAM;YACNwF,MAAMI;YACNd,UAAU;QAAA;IAEd;AACF;ACjEO,SAASqB,wBACd3E,YAAAA,EACA;IACA,OAAuB;QACrBsD,UAAU;QACVC,WAAWA,CAAC,EAACrJ,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAGhC,IAAI,CAFc+D,SAASxD,OAAAA,CAAQlE,SAAAA,EAGjC,OAAO;gBACLgM,MAAM;gBACN8E,UAAU;gBACVK,aAAaxN,MAAMwN,WAAAA;gBACnBC,QAAQ;YAAA;YAIZ,MAAMG,yNAASxH,mBAAAA,EAA2BrC,QAAQ,GAE5C0K,qLAAOC,SAAAA,EAAOd,QAAQ;gBAC1Be,oBAAoB,CAAA;gBACpBC,YAAY;oBACVC,aAAaA,CAAC,EAAC5U,QAAAA,EAAAA,GACbA,aAAaqB,KAAAA,IAAY,GAAGrB,QAAQ,EAAA,GAAK;gBAAA;YAC7C,CACD;YAED,OAAIwU,SAAS,KACJ;gBACLpG,MAAM;gBACN8E,UAAU;gBACVK,aAAaxN,MAAMwN,WAAAA;gBACnBC,QAAQ;YAAA,IAIL;gBACLpF,MAAM;gBACNwF,MAAMY;gBACNtB,UAAU;gBACVK,aAAaxN,MAAMwN,WAAAA;YAAAA;QAEvB;QACAE,aAAaA,CAAC,EAAC3J,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAOlC,MAAMiO,oLANSa,eAAAA,EAAa9O,MAAM6N,IAAAA,EAAMhE,aAAakF,YAAAA,EAAc;gBACjEC,cAAcjL,SAASxD,OAAAA,CAAQyO,YAAAA;gBAC/BC,gCACEpF,aAAatQ,KAAAA,CAAM8U,OAAAA,CAAQY,8BAAAA;YAAAA,CAC9B,EAE2Bf,OAAAA,CAAS3U,CAAAA,UAAU;gBAC7C,MAAM4U,8MAAcC,aAAAA,EAAW;oBAC7B7N,SAASwD,SAASxD,OAAAA;oBAClBhH;oBACA8U,SAAS;wBACPC,aAAa,CAAA;wBACbC,gBAAgB,CAAA;oBAAA;gBAClB,CACD;gBACD,OAAOJ,cAAc;oBAACA,WAAW;iBAAA,GAAI,CAAA,CAAA;YACvC,CAAC;YAED,OAAIF,aAAa1S,MAAAA,KAAW,IACnB;gBACL8M,MAAM;gBACN8E,UAAU;gBACVM,QAAQ;YAAA,IAIL;gBACLpF,MAAM;gBACNwF,MAAMI;gBACNd,UAAU;YAAA;QAEd;IAAA;AAEJ;AC9EO,SAAS+B,yBACdrF,YAAAA,EACA;IACA,OAAuB;QACrBsD,UAAU;QACVC,WAAWA,CAAC,EAACrJ,QAAAA,EAAU/D,KAAAA,EAAAA,GACH+D,SAASxD,OAAAA,CAAQlE,SAAAA,GA6C5B;gBACLgM,MAAM;gBACNwF,sNApCazH,mBAAAA,EAA2BrC,QAAQ,EAG/CzK,GAAAA,CAAKC,CAAAA,wMACAyF,cAAAA,EAAY+E,SAASxD,OAAAA,EAAShH,KAAK,IAC9BA,MAAMU,QAAAA,CACVX,GAAAA,CAAKY,CAAAA,QACAA,MAAMV,KAAAA,KAAUuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA,GACxC0B,MAAMI,IAAAA,GAGR0F,MAAMwN,WAAAA,KAAgB,mBACzB,CAAA,CAAA,EACEzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOqM,aAAAA,CAAc9G,IAAAA,CACnC2L,CAAAA,mBACCA,iBAAiB5W,IAAAA,KAAS0B,MAAMV,KACpC,GAAG6V,SAAS,QAAQ,CAAA,CAAA,CAAA,GAEtB,EACL,EACA3T,IAAAA,CAAK,EAAE,IAGLsE,MAAMwN,WAAAA,KAAgB,mBACzB,CAAA,CAAA,EACEzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOS,YAAAA,CAAa8E,IAAAA,CAClC6L,CAAAA,kBAAoBA,gBAAgB9W,IAAAA,KAASe,MAAMC,KACtD,GAAG6V,SAAS,QAAQ,CAAA,CAAA,CAAA,GAEtB,EACL,EACAE,MAAAA,CAAQhW,CAAAA,QAAUA,UAAU,EAAE,EAC9BmC,IAAAA,CAAK,CAAA;;AAAA,CAAM;gBAKZyR,UAAU;gBACVK,aAAaxN,MAAMwN,WAAAA;YAAAA,IA9CZ;gBACLnF,MAAM;gBACN8E,UAAU;gBACVK,aAAaxN,MAAMwN,WAAAA;gBACnBC,QAAQ;YAAA;QA6CdC,aAAaA,CAAC,EAAC3J,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAUlC,MAAMwP,aAAa,CAAA,YAAA,EATNC,WAAWzP,MAAM6N,IAAI,EAC/B6B,KAAAA,CAAM,QAAQ,EACdpW,GAAAA,CAAKqW,CAAAA,OACJA,OACI,CAAA,GAAA,EAAMA,KAAKC,OAAAA,CAAQ,mBAAmB,OAAO,CAAC,CAAA,IAAA,CAAA,GAC9C,SACN,EACClU,IAAAA,CAAK,EAAE,CAE4B,CAAA,cAAA,CAAA,EAMhCuS,mLAJSa,gBAAAA,EAAaU,YAAY3F,aAAakF,YAAAA,EAAc;gBACjEC,cAAcjL,SAASxD,OAAAA,CAAQyO,YAAAA;YAAAA,CAChC,EAE2Bd,OAAAA,CAAS3U,CAAAA,UAAU;gBAC7C,MAAM4U,8MAAcC,aAAAA,EAAW;oBAC7B7N,SAASwD,SAASxD,OAAAA;oBAClBhH;oBACA8U,SAAS;wBACPC,aAAa,CAAA;wBACbC,gBAAgB,CAAA;oBAAA;gBAClB,CACD;gBACD,OAAOJ,cAAc;oBAACA,WAAW;iBAAA,GAAI,CAAA,CAAA;YACvC,CAAC;YAED,OAAIF,aAAa1S,MAAAA,KAAW,IACnB;gBACL8M,MAAM;gBACN8E,UAAU;gBACVM,QAAQ;YAAA,IAIL;gBACLpF,MAAM;gBACNwF,MAAMI;gBACNd,UAAU;YAAA;QAEd;IAAA;AAEJ;AAEA,MAAM0C,YAAoC;IACxC,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACP;AAEA,SAASJ,WAAWpI,GAAAA,EAAa;IAC/B,OAAOyI,OAAOzI,GAAG,EAAEuI,OAAAA,CAAQ,eAAgB9D,CAAAA,IAAc+D,SAAAA,CAAU/D,CAAC,CAAC;AACvE;ACrHO,SAASiE,qBACdlG,YAAAA,EACA;IACA,OAAO;QACLqD;QACAS;QACAa,wBAAwB3E,YAAY;QACpCqF,yBAAyBrF,YAAY,CAAC;KAAA;AAE1C;ACbO,SAASmG,YAAYC,OAAAA,EAAc;IACxC,2JAAOC,SAAAA,CAAOC,OAAAA,CAAQ;QACpB3X,MAAM;QACN4X,OAAO;YAACH,OAAO;SAAA;IAAA,CAChB,EAAE1L,GAAAA,CAAI0L,QAAQzX,IAAI;AACrB;ACJA,MAAM6X,gBAAAA,aAAAA,GAAAA,IAAoBC,IAAAA;AAKnB,SAASC,eACdhQ,OAAAA,EACA,EACE+D,aAAAA,EACAyG,YAAAA,EAIF,EACM;IACNzG,cAAckM,KAAAA,IACdzF,aAAayF,KAAAA,CAAAA,GACbH,cAAcG,KAAAA,CAAAA;IAEd,IAAIC;IAOJ,IAAA,IAAStU,aAAa,GAAGA,aAAaoE,QAAQxH,KAAAA,CAAMwC,MAAAA,EAAQY,aAAc;QACxE,MAAM5C,QAAQgH,QAAQxH,KAAAA,CAAMiD,EAAAA,CAAGG,UAAU;QAEzC,IAAI5C,UAAU+B,KAAAA,GAMd;YAAA,IAFAgJ,cAAcoM,GAAAA,CAAInX,MAAMP,IAAAA,EAAMmD,UAAU,GAEpC,iMAAC6C,cAAAA,EAAYuB,SAAShH,KAAK,GAAG;gBAChC8W,cAAcG,KAAAA,IACdC,mBAAmBnV,KAAAA;gBACnB;YACF;YAEA,IAAI/B,MAAMuF,QAAAA,KAAaxD,KAAAA,KAAa/B,MAAM+R,KAAAA,KAAUhQ,KAAAA,GAAW;gBAC7D+U,cAAcG,KAAAA,IACdC,mBAAmBnV,KAAAA;gBACnB;YACF;YAEA,IAAI,CAACmV,kBAAkB;gBACrBA,mBAAmB;oBACjB3R,UAAUvF,MAAMuF,QAAAA;oBAChBwM,OAAO/R,MAAM+R,KAAAA;gBAAAA,GAEf+E,cAAcK,GAAAA,CAAInX,MAAM+R,KAAAA,EAAO,CAAC,GAChCP,aAAa2F,GAAAA,CAAInX,MAAMP,IAAAA,EAAM,CAAC;gBAC9B;YACF;YAEA,IAAIyX,iBAAiB3R,QAAAA,KAAavF,MAAMuF,QAAAA,EAAU;gBAChDuR,cAAcG,KAAAA,CAAAA,GACdC,mBAAmB;oBACjB3R,UAAUvF,MAAMuF,QAAAA;oBAChBwM,OAAO/R,MAAM+R,KAAAA;gBAAAA,GAEf+E,cAAcK,GAAAA,CAAInX,MAAM+R,KAAAA,EAAO,CAAC,GAChCP,aAAa2F,GAAAA,CAAInX,MAAMP,IAAAA,EAAM,CAAC;gBAC9B;YACF;YAEA,IAAIyX,iBAAiBnF,KAAAA,KAAU/R,MAAM+R,KAAAA,EAAO;gBAC1C,MAAMqF,eAAeN,cAAc9L,GAAAA,CAAIhL,MAAM+R,KAAK,KAAK;gBACvD+E,cAAcK,GAAAA,CAAInX,MAAM+R,KAAAA,EAAOqF,eAAe,CAAC,GAC/CF,mBAAmB;oBACjB3R,UAAUvF,MAAMuF,QAAAA;oBAChBwM,OAAO/R,MAAM+R,KAAAA;gBAAAA,GAEfP,aAAa2F,GAAAA,CAAInX,MAAMP,IAAAA,EAAM2X,eAAe,CAAC;gBAC7C;YACF;YAEA,IAAIF,iBAAiBnF,KAAAA,GAAQ/R,MAAM+R,KAAAA,EAAO;gBACxC+E,cAAcK,GAAAA,CAAInX,MAAM+R,KAAAA,EAAO,CAAC,GAChCmF,mBAAmB;oBACjB3R,UAAUvF,MAAMuF,QAAAA;oBAChBwM,OAAO/R,MAAM+R,KAAAA;gBAAAA,GAEfP,aAAa2F,GAAAA,CAAInX,MAAMP,IAAAA,EAAM,CAAC;gBAC9B;YACF;YAEA,IAAIyX,iBAAiBnF,KAAAA,GAAQ/R,MAAM+R,KAAAA,EAAO;gBACxC,MAAMqF,eAAeN,cAAc9L,GAAAA,CAAIhL,MAAM+R,KAAK,KAAK;gBACvD+E,cAAcK,GAAAA,CAAInX,MAAM+R,KAAAA,EAAOqF,eAAe,CAAC,GAC/CF,mBAAmB;oBACjB3R,UAAUvF,MAAMuF,QAAAA;oBAChBwM,OAAO/R,MAAM+R,KAAAA;gBAAAA,GAEfP,aAAa2F,GAAAA,CAAInX,MAAMP,IAAAA,EAAM2X,eAAe,CAAC;YAC/C;QAAA;IACF;AACF;ACnGO,SAASC,uBACdrQ,OAAAA,EACA;IACA,OAAO;QACL/G,OAAO+G,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;QAC5BQ,MAAMuH,QAAQyO,YAAAA,CAAAA;QACdnV,OAAO0G,QAAQrC,MAAAA,CAAOvD,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,IAAQ;QACxCuB,UAAU,CAAA,CAAA;QACVE,UAAU;YACR;gBACET,OAAO+G,QAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA;gBAC3BQ,MAAMuH,QAAQyO,YAAAA,CAAAA;gBACd1U,MAAM;gBACNC,OAAO,CAAA,CAAA;YAAA,CACR;SAAA;IAAA;AAGP;ACTO,MAAMsW,oCAETA,CAAC,EAACtQ,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAM/M,WAA2B;QAC/BO,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;QAChC/D,SAAS;YACPxH,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAWyU,UAAUlZ,MAAAA,CAAOyE,SAAAA,GACxB+C,sBAAsB;gBACpBlB,QAAQqC,QAAQrC,MAAAA;gBAChBtG,QAAQkZ,UAAUlZ,MAAAA;gBAClByH,OAAOyR,UAAUlZ,MAAAA,CAAOyE,SAAAA;YAAAA,CACzB,IACD;YACJ6B,QAAQqC,QAAQrC,MAAAA;YAChB8Q,cAAczO,QAAQyO,YAAAA;YACtB1B,YAAY,CAAA,CAAA;YACZrD,UAAU,CAAA;QAAA;QAEZ8G,gBAAgBD,UAAUlZ,MAAAA,CAAOmZ,cAAAA;IAAAA,GAG7BC,oOAAYC,eAAAA,EAAalN,QAAQ,GACjCmN,2OAAmBC,sBAAAA,EAAoBpN,QAAQ,GAC/CqN,4OAAoBC,4BAAAA,EAA0BtN,QAAQ,GAEtD,CAACuN,SAAS,CAAA,GAAI5U,aAAa;QAC/B9E,QAAQkZ,UAAUlZ,MAAAA;IAAAA,CACnB;IAED,IAAI,CAAC0Z,WAAW;QACdC,4IAAAA,CAAAA,aAAAA,CAAWC,UAAAA,CAAWV,UAAUlZ,MAAAA,EAAQkZ,UAAUxW,IAAI;QACtD;IACF;IAEA,IAAI0W,aAAaA,UAAUS,KAAAA,KAAU,aAAa;QAChD,MAAMC,sBAAAA,CAAuBV,UAAUzW,KAAAA,IAAS,CAAA,CAAA,EAAIgV,MAAAA,CAAQoC,CAAAA,OAC1DpR,QAAQrC,MAAAA,CAAO0T,UAAAA,CACZtY,GAAAA,CAAKuY,CAAAA,YAAcA,UAAUrZ,IAAI,EACjCsZ,QAAAA,CAASH,IAAI,CAClB;QAEA,IACED,oBAAoBnW,MAAAA,KAAW2V,iBAAiB3V,MAAAA,IAChDmW,oBAAoBzS,KAAAA,CAAO0S,CAAAA,OAAST,iBAAiBY,QAAAA,CAASH,IAAI,CAAC,GACnE;YACAJ,4IAAAA,CAAAA,aAAAA,CAAWC,UAAAA,CAAWV,UAAUlZ,MAAAA,EAAQkZ,UAAUxW,IAAI;YACtD;QACF;IACF;IAEAiX,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYjB,UAAUlZ,MAAAA,EAAQ;QACvC4B,OAAO8X,UAAU9X,KAAAA;QACjBR,MAAMuH,QAAQyO,YAAAA,CAAAA;QACd1U,MAAMwW,UAAUxW,IAAAA;QAChBC,OAAO,CAAC;eAAG2W,kBAAkB;eAAGE,iBAAiB;SAAA;IAAA,CAClD,GAEDN,UAAUlZ,MAAAA,CAAOmZ,cAAAA,GAAiB,CAAA;AACpC;ACtDO,SAASiB,mBACd1V,IAAAA,EAC0B;IAExB,OAAAA,KAAK9C,KAAAA,KAAAA,UACL,UAAU8C,QACV,OAAOA,KAAKhC,IAAAA,IAAS,YAAA,CAAA,OACbgC,KAAK/B,KAAAA,GAAU,OACpBnB,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,KAAK+B,KAAK/B,KAAAA,CAAM0E,KAAAA,CAAO0S,CAAAA,OAAS,OAAOA,QAAS,QAAQ,CAAA;AAEvF;AAQO,SAASM,oBACd3V,IAAAA,EAC2B;IAC3B,OAAA,wEAAA;IAAA,iEAAA;IAGE,OAAOA,KAAK9C,KAAAA,IAAU,YAAA,iDAAA;IAEtB8C,KAAK9C,KAAAA,CAAM,CAAC,CAAA,KAAM,OAAA,kFAAA;IAAA,CAEjB,CAAA,CAAE,cAAc8C,IAAAA,KACf,CAACA,KAAKvC,QAAAA,IACLX,MAAMC,OAAAA,CAAQiD,KAAKvC,QAAQ,KAAA,8EAAA;IAE1BuC,KAAKvC,QAAAA,CAASkF,KAAAA,CAAOiT,CAAAA,MAAQ,OAAOA,IAAIlZ,IAAAA,IAAS,QAAQ,CAAA,KAAA,kDAAA;IAE7D,cAAcsD,QACdlD,MAAMC,OAAAA,CAAQiD,KAAKrC,QAAQ,KAAA,qFAAA;IAE3BqC,KAAKrC,QAAAA,CAASgF,KAAAA,CAAO/E,CAAAA,QAAU,OAAOA,SAAU,YAAY,WAAWA,KAAK;AAEhF;ACnDO,SAASiY,gBAAgB,EAC9Bva,MAAAA,EACAgE,SAAAA,EACAwW,QAAAA,EAKF,EAAiC;IAC/B,IAAIC;IAEJ,KAAA,MAAW,CAACnY,OAAO0K,SAAS,CAAA,iJAAKlH,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,WAAW;QAChE0W,SAAS,CAAA;IAAA,CACV,EACC,IAAK1a,OAAO+E,UAAAA,CAAWzC,KAAK,kJAIxBqY,OAAAA,CAAKC,QAAAA,CAAS5N,WAAWwN,QAAQ,GAAG;QACtCC,eAAenY;QACf;IACF;IAGF,OAAOmY;AACT;AAEO,SAASI,YAAY,EAC1B7a,MAAAA,EACAgE,SAAAA,EACAwW,QAAAA,EAKF,EAAiC;IAC/B,IAAIM;IAEJ,KAAA,MAAW,CAACxY,OAAO0K,SAAS,CAAA,iJAAKlH,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,SAAS,EAC9D,IAAKhE,OAAO+E,UAAAA,CAAWzC,KAAK,kJAIxBqY,OAAAA,CAAKI,OAAAA,CAAQ/N,WAAWwN,QAAQ,GAAG;QACrCM,WAAWxY;QACX;IACF;IAGF,OAAOwY;AACT;ACnDO,SAASE,kBAAkBhb,MAAAA,EAAgBib,EAAAA,EAAsB;IACtE,MAAMC,OAAOC,mBAAmBnb,MAAM,KAAK,CAAA;IAC3CqN,6BAA6ByL,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GAC7Cib,MACA5N,6BAA6ByL,GAAAA,CAAI9Y,QAAQkb,IAAI;AAC/C;AAEO,SAASC,mBAAmBnb,MAAAA,EAAqC;IACtE,OAAOqN,6BAA6BV,GAAAA,CAAI3M,MAAM;AAChD;ACVA,MAAMob,YAAkD,aAAA,GAAA,IAAI9N,QAAAA,GACtD+N,aAAAA,aAAAA,GAAAA,IAAuD/N,QAAAA;AAEtD,SAASgO,YAAYtb,MAAAA,EAAgBib,EAAAA,EAAgB;IAC1D,MAAMC,OAAOK,UAAUvb,MAAM;IAC7Bob,UAAUtC,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GAC1Bib,MACAG,UAAUtC,GAAAA,CAAI9Y,QAAQkb,IAAI;AAC5B;AAEO,SAASK,UAAUvb,MAAAA,EAAgB;IACxC,OAAOob,UAAUzO,GAAAA,CAAI3M,MAAM,KAAK,CAAA;AAClC;AAEO,SAASwb,aAAaxb,MAAAA,EAAgBub,UAAAA,EAAoB;IAC/DH,UAAUtC,GAAAA,CAAI9Y,QAAQub,UAAS;AACjC;AAEO,SAASE,YAAYzb,MAAAA,EAAgBib,EAAAA,EAAgB;IAC1D,MAAMC,OAAOQ,UAAU1b,MAAM;IAC7Bqb,WAAWvC,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GAC3Bib,MACAI,WAAWvC,GAAAA,CAAI9Y,QAAQkb,IAAI;AAC7B;AAEO,SAASQ,UAAU1b,MAAAA,EAAgB;IACxC,OAAOqb,WAAW1O,GAAAA,CAAI3M,MAAM,KAAK,CAAA;AACnC;AAEO,SAAS2b,aAAa3b,MAAAA,EAAgB0b,UAAAA,EAAoB;IAC/DL,WAAWvC,GAAAA,CAAI9Y,QAAQ0b,UAAS;AAClC;AC1BA,SAASE,eAAkBC,CAAAA,EAAMC,CAAAA,EAAM;IACrC,OAAOD,MAAMC;AACf;AA+BO,SAAAC,kBAAA/b,MAAAA,EAAAgc,QAAAA,EAAA5b,EAAAA,EAAA;IAAA,MAAAN,0KAAAC,EAAA,CAAA,GAGLkc,UAAA7b,OAAiEsD,KAAAA,IAAAkY,iBAAjExb;IAAiE,IAAAG;IAAA,OAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAE,UAAAF,CAAAA,CAAAA,EAAAA,KAAAkc,WAAAA,CAI/Dzb,KAAA2b,CAAAA,wBAAA;QACE,MAAA/P,WAAiBgQ,kBAAA;YAAAD;YAAAE,qBAEOpc,OAAMqc,SAAAA,CAAAlU,WAAAA,CAAAmU,QAAAA;QAAAA,CAE7B;QAAC,OAEKN,SAAS7P,QAAQ;IAAC,GAC1BrM,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAkc,UAAAlc,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA,yLAVI+T,cAAAA,EACJ7T,OAAMqc,SAAAA,CAAAnU,WAAAA,EACP3H,IASA0b,OACF;AAAC;AAGI,SAASE,kBAAkB,EAChCD,mBAAAA,EACAE,mBAAAA,EAIF,EAAmB;IACjB,OAAO;QACL1P,eAAe0P,oBAAoB1P,aAAAA;QACnC/D,SAAS;YACP+M,YAAY,CAAC;mBAAGwG,oBAAoBvT,OAAAA,CAAQ+M,UAAU;aAAA;YACtD0B,cAAc8E,oBAAoBvT,OAAAA,CAAQyO,YAAAA;YAC1C/E,UAAU6J,oBAAoB5T,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YAChEhC,QAAQ4V,oBAAoBvT,OAAAA,CAAQrC,MAAAA;YACpC7B,WAAWyX,oBAAoBvT,OAAAA,CAAQlE,SAAAA;YACvCtD,OAAOib,oBAAoBjb,KAAAA;QAAAA;QAE7BgY,gBAAgBiD,oBAAoBjD,cAAAA;IAAAA;AAExC;AC1DA,MAAMzY,UAAQC,cAAc,kCAAkC;AAEvD,SAAS4b,gCACdrU,WAAAA,EAC8D;IAC9D,OAAO,SAAmClI,MAAAA,EAAiC;QACzE,MAAM,EAACwc,OAAAA,MAAAA,EAAOC,aAAAA,EAAAA,GAAiBzc,QACzBga,aAAa9R,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWtY,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI;QAG9CZ,OAAAA,OAAOyc,aAAAA,GAAiBC,CAAAA,cAAc;YACpC,MAAM,CAAChY,MAAME,IAAI,CAAA,GAAI8X;YAErB,IAAI1c,OAAOoH,WAAAA,CAAY1C,IAAI,GAAG;gBAC5B,MAAMrC,wJAAWyD,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQ4E,IAAI;gBAE3C,KAAA,MAAW,CAACtC,OAAO0K,SAAS,CAAA,IAAK3K,SAAU;oBACzC,MAAMsa,WAAWjY,KAAKrC,QAAAA,CAAS2K,SAAAA,CAAU,CAAC,CAAA,GAAI,CAAC,CAAA;oBAE/C,IACEhN,OAAO+E,UAAAA,CAAWzC,KAAK,KACvBtC,OAAO+E,UAAAA,CAAW4X,QAAQ,KAC1Bra,MAAMK,KAAAA,EAAO0E,MAAO0S,CAAAA,OAAS4C,SAASha,KAAAA,EAAOuX,SAASH,IAAI,CAAC,KAC3D4C,SAASha,KAAAA,EAAO0E,MAAO0S,CAAAA,OAASzX,MAAMK,KAAAA,EAAOuX,SAASH,IAAI,CAAC,GAC3D;wBACArZ,QACE,iBACAwV,KAAKC,SAAAA,CAAU7T,OAAO,MAAM,CAAC,GAC7B4T,KAAKC,SAAAA,CAAUwG,UAAU,MAAM,CAAC,CAClC,GACAzU,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,gJACtCkJ,aAAAA,CAAWiD,UAAAA,CAAW5c,QAAQ;4BAC5BoE,IAAI;gCAAC4I,SAAAA,CAAU,CAAC,CAAA;gCAAGA,SAAAA,CAAU,CAAC,CAAA,GAAI,CAAC;6BAAA;4BACnC6P,OAAO,CAAA;wBAAA,CACR,GACD3U,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YACF;YAKA,IAAIzQ,OAAOoH,WAAAA,CAAY1C,IAAI,KAAK,CAAClD,MAAMC,OAAAA,CAAQiD,KAAKvC,QAAQ,GAAG;gBAC7DzB,QAAM,gCAAgC,GACtCwH,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ;oBAACmC,UAAU,CAAA,CAAA;gBAAA,GAAK;oBAACiC,IAAIQ;gBAAAA,CAAK,GACtDsD,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAKA,IAAIzQ,OAAO+E,UAAAA,CAAWL,IAAI,KAAK,CAAClD,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,GAAG;gBACzDjC,QAAM,4BAA4B,GAClCwH,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ;oBAAC2C,OAAO,CAAA,CAAA;gBAAA,GAAK;oBAACyB,IAAIQ;gBAAAA,CAAK,GACnDsD,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAKA,IAAIzQ,OAAO+E,UAAAA,CAAWL,IAAI,GAAG;gBAC3B,MAAMV,yJAAY2W,OAAAA,CAAKhU,MAAAA,CAAO/B,IAAI,GAC5B,CAACjD,KAAK,CAAA,gJAAIuC,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQgE,SAAS,GACvCgW,cAAa9R,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWtY,GAAAA,CAAKuY,CAAAA,YAAcA,UAAUrZ,IAAI,GACxDmS,cAAcrO,KAAK/B,KAAAA,EAAOgV,OAC7BoC,CAAAA,OAAS,CAACC,YAAWE,QAAAA,CAASH,IAAI,CACrC;gBAEA,IAAI/Z,OAAOoH,WAAAA,CAAYzF,KAAK,KACtB+C,KAAKhC,IAAAA,KAAS,MAAMqQ,eAAeA,YAAYpP,MAAAA,GAAS,GAAG;oBAC7DjD,QAAM,2CAA2C,GACjDwH,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;wBAAC2C,OAAO+B,KAAK/B,KAAAA,EAAOgV,OAAQoC,CAAAA,OAASC,YAAWE,QAAAA,CAASH,IAAI,CAAC;oBAAA,GAC9D;wBAAC3V,IAAIQ;oBAAAA,CACP,GACAsD,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YAEJ;YAKA,IAAIzQ,OAAOoH,WAAAA,CAAY1C,IAAI,GAAG;gBAC5B,MAAMsV,cAAa9R,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWtY,GAAAA,CAAKuY,CAAAA,YAAcA,UAAUrZ,IAAI;gBAE9D,KAAA,MAAW,CAAC0B,OAAO0K,SAAS,CAAA,IAAKlH,oJAAAA,CAAKzD,QAAAA,CAASrC,QAAQ4E,IAAI,EACzD,IAAI5E,OAAO+E,UAAAA,CAAWzC,KAAK,GAAG;oBAC5B,MAAMK,QAAQL,MAAMK,KAAAA,IAAS,CAAA,CAAA,EACvBoa,sBAAsBpa,MAAMgV,MAAAA,CAAQoC,CAAAA,OAEtC,CAACC,YAAWE,QAAAA,CAASH,IAAI,KACzB,CAACrV,KAAKvC,QAAAA,EAAU0J,KAAMyO,CAAAA,MAAQA,IAAIlZ,IAAAA,KAAS2Y,IAAI,CAElD;oBAED,IAAIgD,oBAAoBpZ,MAAAA,GAAS,GAAG;wBAClCjD,QAAM,8CAA8C,GACpDwH,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,GACtCkJ,0JAAAA,CAAWmD,QAAAA,CACT9c,QACA;4BACE2C,OAAOA,MAAMgV,MAAAA,CACVoC,CAAAA,OAAS,CAACgD,oBAAoB7C,QAAAA,CAASH,IAAI,CAC9C;wBAAA,GAEF;4BAAC3V,IAAI4I;wBAAAA,CACP,GACA9E,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YAEJ;YAKA,IAAIzQ,OAAO+E,UAAAA,CAAWL,IAAI,GAAG;gBAC3B,MAAMV,yJAAY2W,OAAAA,CAAKhU,MAAAA,CAAO/B,IAAI,GAC5B,CAACjD,KAAK,CAAA,gJAAIuC,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQgE,SAAS;gBAE7C,IAAIhE,OAAOoH,WAAAA,CAAYzF,KAAK,GAAG;oBAC7B,MAAMqY,cAAa9R,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWtY,GAAAA,CAAKuY,CAAAA,YAAcA,UAAUrZ,IAAI,GACxD+B,QAAQ+B,KAAK/B,KAAAA,IAAS,CAAA,CAAA,EACtBoa,sBAAsBpa,MAAMgV,MAAAA,CAAQoC,CAAAA,OAEtC,CAACC,YAAWE,QAAAA,CAASH,IAAI,KACzB,CAACpY,MAAMQ,QAAAA,EAAU0J,KAAMyO,CAAAA,MAAQA,IAAIlZ,IAAAA,KAAS2Y,IAAI,CAEnD;oBAED,IAAIgD,oBAAoBpZ,MAAAA,GAAS,GAAG;wBAClCjD,QAAM,8CAA8C,GACpDwH,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;4BACE2C,OAAOA,MAAMgV,MAAAA,CACVoC,CAAAA,OAAS,CAACgD,oBAAoB7C,QAAAA,CAASH,IAAI,CAC9C;wBAAA,GAEF;4BAAC3V,IAAIQ;wBAAAA,CACP,GACAsD,YAAYiJ,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YACF;YAGA,IAAIzQ,OAAOoH,WAAAA,CAAY1C,IAAI,GAAG;gBAC5B,MAAMvC,WAAWuC,KAAKvC,QAAAA,IAAY,CAAA,CAAA,EAC5B6a,cAAc,aAAA,GAAA,IAAIhI,OAClBiI,cAAyC,CAAA,CAAA;gBAE/C,KAAA,MAAWC,WAAW/a,SACf6a,YAAYG,GAAAA,CAAID,QAAQ9b,IAAI,KAAA,CAC/B4b,YAAYI,GAAAA,CAAIF,QAAQ9b,IAAI,GAC5B6b,YAAYjV,IAAAA,CAAKkV,OAAO,CAAA;gBAI5B,IAAI/a,SAASwB,MAAAA,KAAWsZ,YAAYtZ,MAAAA,EAAQ;oBAC1CjD,QAAM,6BAA6B,GACnCwH,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ;wBAACmC,UAAU8a;oBAAAA,GAAc;wBAAC7Y,IAAIQ;oBAAAA,CAAK,GAC/DsD,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YACF;YAGA,IACEzQ,OAAOoH,WAAAA,CAAY1C,IAAI,KACvB,CAAC1E,OAAOqd,UAAAA,CAAWxW,IAAAA,CAChByW,CAAAA,KACCA,GAAG7M,IAAAA,KAAS,gBACZ,cAAc6M,GAAGC,UAAAA,IACjBD,GAAG1Y,IAAAA,CAAKjB,MAAAA,KAAW,CACvB,GACA;gBACA,MAAMsZ,cAAAA,CAAevY,KAAKvC,QAAAA,IAAY,CAAA,CAAA,EAAIwV,MAAAA,CAAQ2C,CAAAA,MACzC5V,KAAKrC,QAAAA,CAASwJ,IAAAA,CAAMvJ,CAAAA,qJAEvBsB,OAAAA,CAAKC,MAAAA,CAAOvB,KAAK,KACjBd,MAAMC,OAAAA,CAAQa,MAAMK,KAAK,KACzBL,MAAMK,KAAAA,CAAMuX,QAAAA,CAASI,IAAIlZ,IAAI,CAEhC,CACF;gBACD,IAAIsD,KAAKvC,QAAAA,IAAY,uIAACd,UAAAA,EAAQ4b,aAAavY,KAAKvC,QAAQ,GAAG;oBACzDzB,QAAM,6BAA6B,GACnCwH,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;wBACEmC,UAAU8a;oBAAAA,GAEZ;wBAAC7Y,IAAIQ;oBAAAA,CACP,GACAsD,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YACF;YAEAgM,cAAcC,SAAS;QACzB,GAEA1c,OAAOwc,KAAAA,GAASc,CAAAA,OAAO;YAKrB,IAAInC,mBAAmBnb,MAAM,GAAG;gBAC9Bwc,OAAMc,EAAE;gBACR;YACF;YAMA,IAAI/B,UAAUvb,MAAM,KAAK0b,UAAU1b,MAAM,GAAG;gBAC1Cwc,OAAMc,EAAE;gBACR;YACF;YAEA,IAAIA,GAAG7M,IAAAA,KAAS,mBAEZ6M,GAAGC,UAAAA,IACHD,GAAGE,aAAAA,IACHF,GAAGC,UAAAA,CAAW5V,MAAAA,IACd2V,GAAGC,UAAAA,CAAW5Y,KAAAA,IACd2Y,GAAGE,aAAAA,CAAc7V,MAAAA,IACjB2V,GAAGE,aAAAA,CAAc7Y,KAAAA,EACjB;gBACA,MAAM8Y,4KAA+BvY,QAAAA,CAAM6M,WAAAA,CAAY;oBACrDpK,QAAQ2V,GAAGC,UAAAA,CAAW5V,MAAAA;oBACtBhD,OAAO2Y,GAAGC,UAAAA,CAAW5Y,KAAAA;gBAAAA,CACtB,GACK+Y,uKAA0BxY,QAAAA,CAAM6M,WAAAA,CAAY;oBAChDpK,QAAQ2V,GAAGE,aAAAA,CAAc7V,MAAAA;oBACzBhD,OAAO2Y,GAAGE,aAAAA,CAAc7Y,KAAAA;gBAAAA,CACzB;gBAED,IAAI8Y,gCAAgCC,yBAAyB;oBAC3D,MAAMhE,YAA0ClY,MAAMyC,IAAAA,CACpDC,sJAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;wBACnB4G,MAAM;wBACNxC,IAAIkZ,GAAGC,UAAAA,CAAW5Y,KAAAA;wBAClBN,OAAQC,CAAAA,IAAMtE,OAAO+E,UAAAA,CAAWT,CAAC;wBACjCuY,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,EAAA,CAAI,CAAC,CAAA,EACFc,eAA6Cnc,MAAMyC,IAAAA,8IACvDC,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;wBACnB4G,MAAM;wBACNxC,IAAIkZ,GAAGE,aAAAA,CAAc7Y,KAAAA;wBACrBN,OAAQC,CAAAA,IAAMtE,OAAO+E,UAAAA,CAAWT,CAAC;wBACjCuY,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,EAAA,CAAI,CAAC,CAAA,EACFe,kBACJlE,aACAiE,gBACAL,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAM0Y,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,IAC7D0Y,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAC3B0Y,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,GAAI,KAChC8U,UAAUhX,IAAAA,CAAKiB,MAAAA,KAAW2Z,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMkD,MAAAA,IAC9CyV,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMkD,MAAAA,KAAW,GAC9BgW,sBACJnE,aACAiE,gBACAL,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAM0Y,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,IAC7D0Y,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAC3B0Y,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,GAAI,KAChC0Y,GAAGC,UAAAA,CAAW5Y,KAAAA,CAAMkD,MAAAA,KAAW,KAC/B8V,aAAajb,IAAAA,CAAKiB,MAAAA,KAAW2Z,GAAGE,aAAAA,CAAc7Y,KAAAA,CAAMkD,MAAAA;oBAIlD,CAAC+V,mBAAmB,CAACC,uBAAAA,CACvB7d,OAAOmZ,cAAAA,GAAiB,CAAA,CAAA;gBAE5B;YACF;YAGF,IAAImE,GAAG7M,IAAAA,KAAS,eAAe;gBAC7B,MAAM,EAAChM,SAAAA,EAAAA,GAAazE;gBAEpB,IAAIyE,WAAW;oBACb,MAAM,CAACqZ,QAAQ9Z,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQyE,WAAW;wBAACsZ,OAAO;oBAAA,CAAE,GAC/DtD,eAAeF,gBAAgB;wBACnCva;wBACAgE;wBACAwW,UAAU8C,GAAG1Y,IAAAA;oBAAAA,CACd,GACKoZ,0BAA0BvD,eAC5BA,aAAa9X,KAAAA,EAAOgV,OAAQoC,CAAAA,OAAS,CAACC,WAAWE,QAAAA,CAASH,IAAI,CAAC,IAC/D,CAAA,CAAA,EAEEe,WAAWD,YAAY;wBAC3B7a;wBACAgE;wBACAwW,UAAU;4BAAC8C,GAAG1Y,IAAAA,CAAK,CAAC,CAAA;4BAAG0Y,GAAG1Y,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;yBAAA;oBAAA,CACtC,GACKqZ,sBAAsBnD,WACxBA,SAASnY,KAAAA,EAAOgV,OAAQoC,CAAAA,OAAS,CAACC,WAAWE,QAAAA,CAASH,IAAI,CAAC,IAC3D,CAAA,CAAA,EAEEmE,oBACJF,yBAAyBrG,OACtBwG,CAAAA,aAAe,CAACF,qBAAqB/D,SAASiE,UAAU,CAC3D,KAAK,CAAA,CAAA,EACDC,uBAAuBF,kBAAkBva,MAAAA,GAAS;oBAExD,IACEya,wBACAhE,mBAAmBkD,GAAG5Y,IAAI,KAC1B4Y,GAAG5Y,IAAAA,CAAK/B,KAAAA,EAAOkE,KAAMkT,CAAAA,OAASmE,kBAAkBhE,QAAAA,CAASH,IAAI,CAAC,GAC9D;wBACAJ,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;4BAC7B,GAAGsd,GAAG5Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;4BACxCzU,OACE2a,GAAG5Y,IAAAA,CAAK/B,KAAAA,EAAOgV,OACZoC,CAAAA,OAAS,CAACmE,kBAAkBhE,QAAAA,CAASH,IAAI,CAC5C,KAAK,CAAA,CAAA;wBAAA,CACR;wBACD;oBACF;oBAEA,MAAMsE,sBACJJ,qBAAqBtG,OAClBwG,CAAAA,aAAe,CAACH,yBAAyB9D,SAASiE,UAAU,CAC/D,KAAK,CAAA,CAAA,EACDG,yBAAyBD,oBAAoB1a,MAAAA,GAAS;oBAE5D,IACE2a,0BACAlE,mBAAmBkD,GAAG5Y,IAAI,KAC1B4Y,GAAG5Y,IAAAA,CAAK/B,KAAAA,EAAOkE,KAAMkT,CAAAA,OAASsE,oBAAoBnE,QAAAA,CAASH,IAAI,CAAC,GAChE;wBACAJ,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;4BAC7B,GAAGsd,GAAG5Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;4BACxCzU,OACE2a,GAAG5Y,IAAAA,CAAK/B,KAAAA,EAAOgV,OACZoC,CAAAA,OAAS,CAACsE,oBAAoBnE,QAAAA,CAASH,IAAI,CAC9C,KAAK,CAAA,CAAA;wBAAA,CACR;wBACD;oBACF;oBAEA,MAAMwE,qBACJzD,UAAUnY,OAAOgV,OAAQoC,CAAAA,OAASC,WAAWE,QAAAA,CAASH,IAAI,CAAC,KAAK,CAAA,CAAA;oBAGlE,IAF0BwE,mBAAmB5a,MAAAA,GAAS,KAIpDya,wBACA,CAACE,0BACDlE,mBAAmBkD,GAAG5Y,IAAI,KAC1B4Y,GAAG5Y,IAAAA,CAAK/B,KAAAA,EAAOgB,WAAW,GAC1B;wBACAgW,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;4BAC7B,GAAGsd,GAAG5Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;4BACxCzU,OAAO4b;wBAAAA,CACR;wBACD;oBACF;gBACF;YACF;YAEA,IAAIjB,GAAG7M,IAAAA,KAAS,eAAe;gBAC7B,MAAMtE,WAAWgQ,kBAAkB;oBACjCD,qBAAqBhU,YAAYG,WAAAA,CAAAA;oBACjC+T,qBAAqBpc;gBAAAA,CACtB,GAEKoZ,oOAAYC,eAAAA,EAAalN,QAAQ;gBAEvC,IAAI,CAACiN,WAAW;oBACdoD,OAAMc,EAAE;oBACR;gBACF;gBAEA,IAAIlE,UAAUS,KAAAA,KAAU,aAAa;oBACnC2C,OAAMc,EAAE;oBACR;gBACF;gBAEA3D,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;oBAC7B4B,OAAO;oBACPR,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;oBACxC1U,MAAM4a,GAAG5a,IAAAA;oBACTC,OAAOyW,UAAUzW,KAAAA;gBAAAA,CAClB;gBAED;YACF;YAEA,IAAI2a,GAAG7M,IAAAA,KAAS,eAAe;gBAC7B,MAAM,EAAChM,SAAAA,EAAAA,GAAazE;gBAEpB,IAAIyE,0JAAaS,QAAAA,CAAMsZ,UAAAA,CAAW/Z,SAAS,GAAG;oBAC5C,MAAM,CAAC9C,OAAOqC,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQyE,WAAW;wBACxDsZ,OAAO;oBAAA,CACR,GACK,CAACxG,MAAMiD,QAAQ,CAAA,GACnBhZ,MAAMyC,IAAAA,8IACJC,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;wBACnB4G,MAAM;wBACNxC,IAAI;4BAACQ,MAAM0Y,GAAG1Y,IAAAA;4BAAMiD,QAAQyV,GAAGzV,MAAAA;wBAAAA;wBAC/BxD,OAAQC,CAAAA,IAAMtE,OAAO+E,UAAAA,CAAWT,CAAC;wBACjCuY,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,IAAM;wBAACnZ,KAAAA;wBAAWA,KAAAA,CAAS;qBAAA;oBAEhC,IAAI6T,QAAQ5V,SAAS0Y,oBAAoB1Y,KAAK,GAAG;wBAC/C,MAAMQ,WAAWR,MAAMQ,QAAAA,IAAY,CAAA,CAAA,EAC7BQ,QAAQ4U,KAAK5U,KAAAA,IAAS,CAAA,CAAA,EACtB8b,qBAAqB9b,MAAMkE,IAAAA,CAAMkT,CAAAA,OACrC5X,SAAS0J,IAAAA,CAAMqR,CAAAA,UAAYA,QAAQ9b,IAAAA,KAAS2Y,IAAI,CAClD,GACM2E,qBACJpB,GAAGzV,MAAAA,GAASyV,GAAG5a,IAAAA,CAAKiB,MAAAA,KAAW4T,KAAK7U,IAAAA,CAAKiB,MAAAA,EACrCgb,kBAAkBrB,GAAGzV,MAAAA,KAAW,KAAK6W,oBAErCjE,eAAeF,gBAAgB;4BAACva;4BAAQgE;4BAAWwW;wBAAAA,CAAS,GAC5DM,WAAWD,YAAY;4BAAC7a;4BAAQgE;4BAAWwW;wBAAAA,CAAS,GAEpDoE,gCAAgCnE,eAClCA,aAAa9X,KAAAA,EAAOkE,KACjBkT,CAAAA,OAAS,CAACC,WAAWE,QAAAA,CAASH,IAAI,KAAKpX,MAAMuX,QAAAA,CAASH,IAAI,CAC7D,IACA,CAAA,GACE8E,4BAA4B/D,WAC9BA,SAASnY,KAAAA,EAAOkE,KACbkT,CAAAA,OAAS,CAACC,WAAWE,QAAAA,CAASH,IAAI,KAAKpX,MAAMuX,QAAAA,CAASH,IAAI,CAC7D,IACA,CAAA;wBAEJ,IACE0E,sBACAE,mBACA,CAACC,iCACD,CAACC,2BACD;4BACA,MAAM1S,WAAWgQ,kBAAkB;gCACjCD,qBAAqBhU,YAAYG,WAAAA,CAAAA;gCACjC+T,qBAAqBpc;4BAAAA,CACtB;4BAEDkE,4IAAAA,CAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQ,MAAM;gCACtCwc,OAAMc,EAAE,gJACR3D,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;oCAAC2C,+NAAO4W,sBAAAA,EAAoBpN,QAAQ;gCAAA,GACpC;oCAAC/H,IAAIkZ,GAAG1Y,IAAAA;gCAAAA,CACV;4BACF,CAAC,GAED5E,OAAO+e,QAAAA,CAAAA;4BACP;wBACF;oBACF;gBACF;YACF;YAKA,IACEzB,GAAG7M,IAAAA,KAAS,gBACZ6M,GAAG1Y,IAAAA,CAAKjB,MAAAA,KAAW,KACnB,cAAc2Z,GAAGC,UAAAA,IACjBD,GAAGC,UAAAA,CAAW3b,KAAAA,KACZsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,IACjDY,MAAMC,OAAAA,CAAQ6b,GAAGC,UAAAA,CAAWpb,QAAQ,KACpCmb,GAAGC,UAAAA,CAAWpb,QAAAA,CAASwB,MAAAA,GAAS,KAChC2Z,GAAG1Y,IAAAA,CAAK,CAAC,CAAA,GAAI,KAAK,GAClB;gBACA,MAAM,CAACoa,aAAaC,UAAU,CAAA,GAAI/a,sJAAAA,CAAOQ,IAAAA,CAAK1E,QAAQ;oBAACsd,GAAG1Y,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;iBAAC;gBAEtE,IAAI5E,OAAOoH,WAAAA,CAAY4X,WAAW,GAAG;oBACnC,MAAME,UACH1d,MAAMC,OAAAA,CAAQud,YAAY7c,QAAQ,KAAK6c,YAAY7c,QAAAA,IAAa,CAAA,CAAA,EAC7D8a,iJAAckC,UAAAA,EAAK,CAAC;2BAAGD,SAAS;2BAAG5B,GAAGC,UAAAA,CAAWpb,QAAQ;qBAAC;oBAEhEzB,QAAM,yCAAyC4c,EAAE,gJACjD3D,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;wBAACmC,UAAU8a;oBAAAA,GACX;wBAAC7Y,IAAI6a;wBAAYpC,OAAO,CAAA;oBAAA,CAC1B,GACAL,OAAMc,EAAE;oBACR;gBACF;YACF;YAEAd,OAAMc,EAAE;QACV,GAEOtd;IACT;AACF;AAEO,MAAMof,yCAETA,CAAC,EAAClG,SAAAA,EAAS,KAAM;IACnB,MAAMlZ,SAASkZ,UAAUlZ,MAAAA,EACnB+Z,OAAOb,UAAUe,SAAAA,EACjB,EAACxV,SAAAA,EAAAA,GAAazE;IAEpB,IAAIyE,WAAW;QACb,iJAAIS,QAAAA,CAAMsZ,UAAAA,CAAW/Z,SAAS,GAE5BkV,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA,CAAA,GACA;YAACqE,oJAAOT,OAAAA,CAAKC,MAAAA;YAAQiU,OAAO,CAAA;YAAMuH,SAAS,CAAA;QAAA,CAC7C,GACIrf,OAAOyE,SAAAA,IACc,CACrB;4JAAGP,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;gBACtBoE,IAAIpE,OAAOyE,SAAAA;gBACXJ,oJAAOT,OAAAA,CAAKC,MAAAA;YAAAA,CACb,CAAC;SAAA,CAEW8Q,OAAAA,CAAQ,CAAC,CAACjQ,MAAME,IAAI,CAAA,KAAM;YACvC,MAAMjD,QAAQ3B,OAAOqC,QAAAA,CAASuC,IAAAA,CAAK,CAAC,CAAC,CAAA;YACjC/B,4IAAAA,CAAAA,UAAAA,CAAQC,SAAAA,CAAUnB,KAAK,KAAKA,MAAMU,QAAAA,CAAS6X,QAAAA,CAASxV,IAAI,kJAC1DiV,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBACE2C,OAAAA,CAAQnB,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,IAAI+B,KAAK/B,KAAAA,GAAQ,CAAA,CAAA,EAAIgV,MAAAA,CAClD2H,CAAAA,QAAkBA,UAAUvF,IAC/B;gBACAnY,OAAO;YAAA,GAET;gBAACwC,IAAIQ;YAAAA,CACP;QAEJ,CAAC;aAEE;YACL,MAAM,CAACjD,OAAOqC,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQyE,WAAW;gBACxDsZ,OAAO;YAAA,CACR,GACKwB,kBACJvf,OAAOoH,WAAAA,CAAYzF,KAAK,KACxBA,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAC1B3D,OAAO+E,UAAAA,CAAWpD,MAAMU,QAAAA,CAAS,CAAC,CAAC,KACnCV,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,KACvBf,MAAMU,QAAAA,CAAS,CAAC,CAAA,GAChBqB,KAAAA;YAEN,IAAI6b,iBAAiB;gBAEnB,MAAMC,gCAAAA,CADgBD,gBAAgB5c,KAAAA,IAAS,CAAA,CAAA,EACKgV,MAAAA,CACjD8H,CAAAA,eAAiBA,iBAAiB1F,IACrC;gBAEAJ,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;oBACE2C,OAAO6c;gBAAAA,GAET;oBACEpb,IAAIJ;oBACJK,OAAQK,CAAAA,OAAS1E,OAAO+E,UAAAA,CAAWL,IAAI;gBAAA,CAE3C;YACF,OACE1E,OAAOmZ,cAAAA,CAAeY,IAAI,CAAA,GAAI,CAAA;QAElC;QAEA,IAAI/Z,OAAOyE,SAAAA,EAAW;YAEpB,MAAMA,aAAYzE,OAAOyE,SAAAA;YACzBzE,OAAOyE,SAAAA,GAAY;gBAAC,GAAGA,UAAAA;YAAAA;QACzB;IACF;AACF;ACzmBO,SAASib,UAAUC,KAAAA,EAAkB;IACpC,MAAA,CAAClP,MAAMmP,KAAK,CAAA,GAAID;IACf,OAAA;QAAClP;QAAMmP,KAAK;KAAA;AACroBAAAA,aAAAA,GAAAA,IACAvS,QAAAA;AAEC,SAASwS,aAAa9f,MAAAA,EAAgBib,EAAAA,EAAgB;IAC3D,MAAM8E,UAAUF,kBAAkBlT,GAAAA,CAAI3M,MAAM;IAE5C,IAAI+f,SAAS;QACX9E,GAAAA;QACA;IACF;IAEA4E,kBAAkB/G,GAAAA,CAChB9Y,QACA+f,WAAW;QACTC,YAAYlR,oBAAAA;IAAoB,CAEpC,GACAmM,GAAAA,GACA4E,kBAAkB/G,GAAAA,CAAI9Y,QAAQ0D,KAAAA,CAAS;AACzC;AAEO,SAASuc,qBAAqBjgB,MAAAA,EAAgB;IACnD,OAAO6f,kBAAkBlT,GAAAA,CAAI3M,MAAM,GAAGggB;AACxC;ACYA,MAAMtf,UAAQC,cAAc,qBAAqB,GAG3Cuf,SAAAA,aAAAA,GAAAA,IAAa5S,WACb6S,iBAAiB,aAAA,GAAA,IAAI7S,QAAAA,GASrB8S,kBAAkB,KAElBC,WAAYrgB,CAAAA,WAAwC;IACxD,MAAM6Z,QAAQqG,OAAOvT,GAAAA,CAAI3M,MAAM;IAC/B,OAAO6Z,UAAUnW,KAAAA,IAAY,CAAA,IAAOmW;AACtC,GAOMyG,mBAAoBtgB,CAAAA,SAAAA,CACnBmgB,eAAexT,GAAAA,CAAI3M,MAAM,KAC5BmgB,eAAerH,GAAAA,CAAI9Y,QAAQ,CAAA,CAAE,GAExBmgB,eAAexT,GAAAA,CAAI3M,MAAM,KAAK,CAAA,CAAA;AAGhC,SAASugB,mBACd9J,OAAAA,EAC8D;IAC9D,MAAM,EAACvO,WAAAA,EAAAA,GAAeuO;IAEtB,OAAQzW,CAAAA,WAAoC;QAC1C,IAAIwgB,mBAAoDxd,eACtDhD,OAAOqC,QAAAA,EACP6F,YAAYG,WAAAA,GAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IACjD;QACA,MAAM6f,gBAAgBH,iBAAiBtgB,MAAM;QAC7C,IAAI0gB,qBAAqBT,qBAAqBjgB,MAAM;QAEpDyW,QAAQkK,aAAAA,CAAc3Y,IAAAA,CAAK,MAAM;YAC/BtH,QAAM,wBAAwB;YAC9B,MAAMkgB,MAAM1Y,YAAYhI,EAAAA,CAAG,WAAW,CAAC,EAAC2gB,OAAAA,EAAS1U,QAAAA,EAAAA,KAAc;gBAC7D,IAAI2U,QAAQ,CAAA;gBACZD,QAAQlM,OAAAA,CAASiL,CAAAA,UAAU;oBACzB,IAAI,CAACkB,SAASlB,MAAMmB,MAAAA,KAAW,WAAWN,eAAe;wBACvD,IAAIb,MAAMnP,IAAAA,KAAS,WAAWmP,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;4BACrDjD,QACE,+DACF,GACAV,OAAOghB,OAAAA,GAAU;gCAACC,OAAO,CAAA,CAAA;gCAAIC,OAAO,CAAA,CAAA;4BAAA,GACpCT,cAAcU,MAAAA,CAAO,GAAGV,cAAc9c,MAAM,GAC5Cuc,OAAOpH,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GACvB8gB,QAAQ,CAAA;4BACR;wBACF;wBACAL,cAAczY,IAAAA,CAAK;4BACjB4X;4BACAwB,MAAAA,aAAAA,GAAAA,IAAUC,KAAAA;4BACVlV;4BACAqU;wBAAAA,CACD;oBACH;gBACF,CAAC,GACDA,mBAAmBrU;YACrB,CAAC;YACD,OAAO,MAAM;gBACXzL,QAAM,0BAA0B,GAChCkgB,IAAItgB,WAAAA,CAAAA;YACN;QACF,CAAC,GAEDN,OAAOghB,OAAAA,GAAU;YAACC,OAAO,CAAA,CAAA;YAAIC,OAAO,CAAA,CAAA;QAAA;QAEpC,MAAM,EAAC1E,OAAAA,MAAAA,EAAAA,GAASxc;QAEhBA,OAAAA,OAAOwc,KAAAA,GAASc,CAAAA,OAAkB;YAChC,IAAIpV,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjEkU,OAAMc,EAAE;gBACR;YACF;YAMA,IAAInC,mBAAmBnb,MAAM,GAAG;gBAC9Bwc,OAAMc,EAAE;gBACR;YACF;YAMA,IAAI/B,UAAUvb,MAAM,KAAK0b,UAAU1b,MAAM,GAAG;gBAC1Cwc,OAAMc,EAAE;gBACR;YACF;YAEA,MAAM,EAACD,UAAAA,EAAY2D,OAAAA,EAAAA,GAAWhhB,QACxB,EAACihB,KAAAA,EAAAA,GAASD,SACVM,OAAOL,KAAAA,CAAMA,MAAMtd,MAAAA,GAAS,CAAC,CAAA,EAC7B4d,SACJD,QAAQA,KAAKjE,UAAAA,IAAciE,KAAKjE,UAAAA,CAAWiE,KAAKjE,UAAAA,CAAW1Z,MAAAA,GAAS,CAAC,CAAA,EACjE6d,YAAYC,gBAAgBnE,IAAIiE,MAAM,GACtCG,OAAOrB,SAASrgB,MAAM,GAEtB2hB,oBAAoB1B,qBAAqBjgB,MAAM;YAErD,IAAI4hB,QAAQD,sBAAsBjB;YAElC,IAAIgB,MAAM;gBAUR,IATKJ,OAEMjE,WAAW1Z,MAAAA,KAAW,KAAA,CAC/Bie,QACED,sBAAsBje,KAAAA,KAAagd,uBAAuBhd,KAAAA,IACtDme,YAAYvE,IAAIiE,MAAM,KAAKC,YAC3BI,KAAAA,IALNA,QAAQ,CAAA,GAQNN,QAAQM,OACVN,KAAKjE,UAAAA,CAAWrV,IAAAA,CAAKsV,EAAE;qBAClB;oBACL,MAAMwE,UAAU;wBACdzE,YAAY,CACV;+BAAIrd,OAAOyE,SAAAA,KAAc,OACrB,EAAA,GACA;gCAACsd,sBAAsB/hB,MAAM,CAAC;6BAAA;4BAClCsd,EAAE;yBAAA;wBAEJ0E,WAAAA,aAAAA,GAAAA,IAAeX,KAAAA;oBAAK;oBAEtBJ,MAAMjZ,IAAAA,CAAK8Z,OAAO,GAClBphB,QAAM,yBAAyB4gB,IAAI;gBACrC;gBAEA,MAAOL,MAAMtd,MAAAA,GAASyc,iBACpBa,MAAMgB,KAAAA,CAAAA;gBAGJC,YAAY5E,EAAE,KAAA,CAChB0D,QAAQE,KAAAA,GAAQ,CAAA,CAAA;YAEpB;YAEAR,qBAAqBiB,mBAErBnF,OAAMc,EAAE;QACV,GAGOtd;IACT;AACF;AAEO,MAAMmiB,qCAETA,CAAC,EAACjJ,SAAAA,EAAS,KAAM;IACnB,MAAMlZ,SAASkZ,UAAUlZ,MAAAA,EACnB,EAACihB,KAAAA,EAAAA,GAASjhB,OAAOghB,OAAAA,EACjBP,gBAAgBH,iBAAiBtgB,MAAM;IAE7C,IAAIihB,MAAMtd,MAAAA,GAAS,GAAG;QACpB,MAAM2d,OAAOL,KAAAA,CAAMA,MAAMtd,MAAAA,GAAS,CAAC,CAAA;QAEnC,IADAjD,QAAM,WAAW4gB,IAAI,GACjBA,KAAKjE,UAAAA,CAAW1Z,MAAAA,GAAS,GAAG;YAC9B,MAAMye,eAAe3B,cAAc9I,MAAAA,CAChC0K,CAAAA,OAASA,KAAKjB,IAAAA,IAAQE,KAAKU,SAC9B;YACA,IAAIM,wBAAwBhB,KAAKjE,UAAAA;YACjC+E,aAAazN,OAAAA,CAAS0N,CAAAA,SAAS;gBAC7BC,8JAAwBC,UAAAA,EACtBD,sBAAsB5gB,GAAAA,CAAK4b,CAAAA,KACzBkF,mBACExiB,QACAqiB,KAAKzC,KAAAA,EACLtC,IACA+E,KAAKlW,QAAAA,EACLkW,KAAK7B,gBACP,CACF,CACF;YACF,CAAC;YACD,MAAMiC,qBAAqBH,sBACxB5gB,GAAAA,6IAAIghB,aAAAA,CAAUC,OAAO,EACrBjI,OAAAA,CAAAA;YAEH,IAAI;gBACFxW,4IAAAA,CAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQ,MAAM;oBACtCsb,YAAYtb,QAAQ,MAAM;wBACxB4iB,cAAc5iB,QAAQ,MAAM;4BAC1ByiB,mBAAmB9N,OAAAA,CAAS2I,CAAAA,OAAO;gCACjCtd,OAAOwc,KAAAA,CAAMc,EAAE;4BACjB,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,EAAA,OAASuF,KAAK;gBACZniB,QAAM,+BAA+BmiB,GAAG,GACxCpC,cAAcU,MAAAA,CAAO,GAAGV,cAAc9c,MAAM,gJAC5CgW,aAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM,GAC1BA,OAAOghB,OAAAA,GAAU;oBAACC,OAAO,CAAA,CAAA;oBAAIC,OAAO,CAAA,CAAA;gBAAA,GACpChB,OAAOpH,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GACvBwb,aAAaxb,QAAQ,CAAA,CAAK,GAC1BA,OAAO+e,QAAAA,CAAAA;gBACP;YACF;YACA/e,OAAOghB,OAAAA,CAAQE,KAAAA,CAAMlZ,IAAAA,CAAKsZ,IAAI,GAC9BthB,OAAOghB,OAAAA,CAAQC,KAAAA,CAAM8B,GAAAA,CAAAA;QACvB;IACF;AACF,GAEaC,qCAETA,CAAC,EAAC9J,SAAAA,EAAS,KAAM;IACnB,MAAMlZ,SAASkZ,UAAUlZ,MAAAA,EACnB,EAACkhB,KAAAA,EAAAA,GAASlhB,OAAOghB,OAAAA,EACjBP,gBAAgBH,iBAAiBtgB,MAAM;IAE7C,IAAIkhB,MAAMvd,MAAAA,GAAS,GAAG;QACpB,MAAM2d,OAAOJ,KAAAA,CAAMA,MAAMvd,MAAAA,GAAS,CAAC,CAAA;QAEnC,IADAjD,QAAM,WAAW4gB,IAAI,GACjBA,KAAKjE,UAAAA,CAAW1Z,MAAAA,GAAS,GAAG;YAC9B,MAAMye,eAAe3B,cAAc9I,MAAAA,CAChC0K,CAAAA,OAASA,KAAKjB,IAAAA,IAAQE,KAAKU,SAC9B;YACA,IAAIM,wBAAwBhB,KAAKjE,UAAAA;YACjC+E,aAAazN,OAAAA,CAAS0N,CAAAA,SAAS;gBAC7BC,yBAAwBC,+IAAAA,EACtBD,sBAAsB5gB,GAAAA,CAAK4b,CAAAA,KACzBkF,mBACExiB,QACAqiB,KAAKzC,KAAAA,EACLtC,IACA+E,KAAKlW,QAAAA,EACLkW,KAAK7B,gBACP,CACF,CACF;YACF,CAAC;YACD,IAAI;gBACFtc,4IAAAA,CAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQ,MAAM;oBACtCyb,YAAYzb,QAAQ,MAAM;wBACxB4iB,cAAc5iB,QAAQ,MAAM;4BAC1BsiB,sBAAsB3N,OAAAA,CAAS2I,CAAAA,OAAO;gCACpCtd,OAAOwc,KAAAA,CAAMc,EAAE;4BACjB,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,EAAA,OAASuF,KAAK;gBACZniB,QAAM,+BAA+BmiB,GAAG,GACxCpC,cAAcU,MAAAA,CAAO,GAAGV,cAAc9c,MAAM,gJAC5CgW,aAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM,GAC1BA,OAAOghB,OAAAA,GAAU;oBAACC,OAAO,CAAA,CAAA;oBAAIC,OAAO,CAAA,CAAA;gBAAA,GACpChB,OAAOpH,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GACvB2b,aAAa3b,QAAQ,CAAA,CAAK,GAC1BA,OAAO+e,QAAAA,CAAAA;gBACP;YACF;YACA/e,OAAOghB,OAAAA,CAAQC,KAAAA,CAAMjZ,IAAAA,CAAKsZ,IAAI,GAC9BthB,OAAOghB,OAAAA,CAAQE,KAAAA,CAAM6B,GAAAA,CAAAA;QACvB;IACF;AACF;AAMA,SAASP,mBACPxiB,MAAAA,EACA4f,KAAAA,EACA1G,SAAAA,EACA/M,QAAAA,EACAqU,gBAAAA,EACa;IASb,MAAMyC,uBAAuB;QAAC,GAAG/J,SAAAA;IAAAA;IAEjC,IAAI0G,MAAMnP,IAAAA,KAAS,YAAYmP,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtD,MAAMuf,mBAAAA,CAAoB/W,YAAY,CAAA,CAAA,EAAIgX,SAAAA,CAAWrX,CAAAA,2IACnDzK,WAAAA,EAAQ;gBAACD,MAAM0K,IAAI1K,IAAAA;YAAAA,GAAOwe,MAAMhb,IAAAA,CAAK,CAAC,CAAC,CACzC;QACAlE,OAAAA,QACE,CAAA,uBAAA,EAA0Bkf,MAAMwD,KAAAA,CAAMzf,MAAM,CAAA,OAAA,EAAUsf,qBAAqBxS,IAAI,CAAA,uBAAA,EAA0BmP,MAAMnP,IAAI,CAAA,CAAA,CACrH,GACO;YACL4S,gBACEJ,sBACArD,MAAMwD,KAAAA,CAAMzf,MAAAA,EACZuf,gBACF,CAAC;SAAA;IAEL;IAEA,IAAItD,MAAMnP,IAAAA,KAAS,WAAWmP,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACrD,MAAM2f,kBAAAA,CAAmB9C,oBAAoB,CAAA,CAAA,EAAI2C,SAAAA,CAAWrX,CAAAA,2IAC1DzK,WAAAA,EAAQ;gBAACD,MAAM0K,IAAI1K,IAAAA;YAAAA,GAAOwe,MAAMhb,IAAAA,CAAK,CAAC,CAAC,CACzC;QAEA,OACE,UAAUqe,wBACVzhB,MAAMC,OAAAA,CAAQwhB,qBAAqBre,IAAI,KACvCqe,qBAAqBre,IAAAA,CAAK,CAAC,CAAA,KAAM0e,kBAAAA,CAEjC5iB,QAAM,qDAAqD,GACpD,EAAA,IAQF;YAAC2iB,gBAAgBJ,sBAAsB,CAAA,GAAIK,eAAe,CAAC;SAAA;IACpE;IAGA,IAAI1D,MAAMnP,IAAAA,KAAS,WAAWmP,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAClDjD,OAAAA,QACE,CAAA,mDAAA,EAAsDwY,UAAUzI,IAAI,CAAA,UAAA,CACtE,GACO,CAAA,CAAA;IAGT,IAAImP,MAAMnP,IAAAA,KAAS,kBAAkB;QACnC,MAAM8S,uBAAuBC,yBAC3BxjB,QACAijB,oBACF;QACA,OACE,CAACM,wBACD,uIAACliB,UAAAA,EAAQ;YAACD,MAAMmiB,qBAAqBniB,IAAAA;QAAAA,GAAOwe,MAAMhb,IAAAA,CAAK,CAAC,CAAC,IAElD;YAACqe,oBAAoB;SAAA,GAAA,CAEVQ,MAAW7D,MAAMze,KAAK,EAC9BwT,OAAAA,CAAS+O,CAAAA,cAAc;YACjC,IAAIC,iBAAiB,GACjBC,gBAAgBF,UAAUG,UAAAA;YAC9B,MAAM,EAACC,KAAAA,EAAAA,GAASJ;YAgChB,IA/BAI,MAAMnP,OAAAA,CAAQ,CAACoP,OAAMC,UAAU;gBAC7B,MAAM,CAACC,UAAUvhB,IAAI,CAAA,GAAIqhB;gBACrBE,aAAaC,cAAAA,CACfP,kBAAkBjhB,KAAKiB,MAAAA,EACvBigB,iBAAiBlhB,KAAKiB,MAAAA,IACbsgB,aAAaE,cAAAA,CACtBR,kBAAkBjhB,KAAKiB,MAAAA,EACvBigB,iBAAiBlhB,KAAKiB,MAAAA,IACbsgB,aAAaG,cAAAA,CAEjBN,MAAMjf,KAAAA,CAAMmf,KAAK,EAAE3c,KAAAA,CAAM,CAAC,CAACgd,KAAK,CAAA,GAAMA,UAAUD,UAAU,KAAA,CAC7DR,iBAAiBlhB,KAAKiB,MAAAA,CAAAA;YAG5B,CAAC,GAEGsf,qBAAqBxS,IAAAA,KAAS,iBAC5BmT,gBAAgBX,qBAAqBpb,MAAAA,IAAAA,CACvCob,qBAAqBpb,MAAAA,IAAU8b,cAAAA,GAI/BV,qBAAqBxS,IAAAA,KAAS,iBAE9BmT,iBACAX,qBAAqBpb,MAAAA,GAASob,qBAAqBvgB,IAAAA,CAAKiB,MAAAA,IAAAA,CAExDsf,qBAAqBpb,MAAAA,IAAU8b,cAAAA,GAI/BV,qBAAqBxS,IAAAA,KAAS,iBAAiB;gBACjD,MAAM6T,eAAerB,qBAAqB1F,UAAAA,EAAY5Y,QAClD;oBAAC,GAAGse,qBAAqB1F,UAAAA,CAAW5Y,KAAAA;gBAAAA,IACpCjB,KAAAA,GACE6gB,gBAAgBtB,sBAAsB1F,YAAY5V,SACpD;oBAAC,GAAGsb,qBAAqB1F,UAAAA,CAAW5V,MAAAA;gBAAAA,IACpCjE,KAAAA,GACEwI,WAAW+W,sBAAsBzF,eAAe7Y,QAClD;oBAAC,GAAGse,qBAAqBzF,aAAAA,CAAc7Y,KAAAA;gBAAAA,IACvCjB,KAAAA,GACEuI,YAAYgX,sBAAsBzF,eAAe7V,SACnD;oBAAC,GAAGsb,qBAAqBzF,aAAAA,CAAc7V,MAAAA;gBAAAA,IACvCjE,KAAAA;gBACJ,CAAK4gB,gBAAgBC,iBAAmBrY,YAAYD,SAAAA,KAAAA,CACnC;oBAACqY;oBAAcC;oBAAerY;oBAAUD,SAAS;iBAAA,CACzD0I,OAAAA,CAAStP,CAAAA,UAAU;oBACpBA,SAASue,gBAAgBve,MAAMwC,MAAAA,IAAAA,CACjCxC,MAAMwC,MAAAA,IAAU8b,cAAAA;gBAEpB,CAAC,GACGW,gBAAgBC,iBAAAA,CAClBtB,qBAAqB1F,UAAAA,GAAa;oBAChC5Y,OAAO2f;oBACP3c,QAAQ4c;gBAAAA,CAAAA,GAGRrY,YAAYD,aAAAA,CACdgX,qBAAqBzF,aAAAA,GAAgB;oBACnC7Y,OAAOuH;oBACPvE,QAAQsE;gBAAAA,CAAAA,CAAAA;YAIhB;QACF,CAAC,GACM;YAACgX,oBAAoB;SAAA;IAC9B;IACA,OAAO;QAACA,oBAAoB;KAAA;AAC9B;AAIA,SAASI,gBACPnK,SAAAA,EACAxF,KAAAA,EACAnP,UAAAA,EACW;IACX,MAAM0e,uBAAuB;QAAC,GAAG/J,SAAAA;IAAAA;IACjC,IACE3U,cAAc,KACd0e,qBAAqBxS,IAAAA,KAAS,mBAC9BjP,MAAMC,OAAAA,CAAQwhB,qBAAqBre,IAAI,KACvCqe,qBAAqBre,IAAAA,CAAK,CAAC,CAAA,IAAKL,aAAamP,SAC7CuP,qBAAqBre,IAAAA,CAAK,CAAC,CAAA,GAAI8O,QAAQ,CAAA,GACvC;QACA,MAAMjI,UAAU;YACdwX,qBAAqBre,IAAAA,CAAK,CAAC,CAAA,GAAI8O,OAC/B;eAAGuP,qBAAqBre,IAAAA,CAAKC,KAAAA,CAAM,CAAC,CAAC;SAAA;QAEvCoe,qBAAqBre,IAAAA,GAAO6G;IAC9B;IACA,IAAIwX,qBAAqBxS,IAAAA,KAAS,iBAAiB;QACjD,MAAM6T,eAAerB,qBAAqB1F,UAAAA,EAAY5Y,QAClD;YAAC,GAAGse,qBAAqB1F,UAAAA,CAAW5Y,KAAAA;QAAAA,IACpCjB,KAAAA,GACE6gB,gBAAgBtB,sBAAsB1F,YAAY5V,SACpD;YAAC,GAAGsb,qBAAqB1F,UAAAA,CAAW5V,MAAAA;QAAAA,IACpCjE,KAAAA,GACEwI,WAAW+W,sBAAsBzF,eAAe7Y,QAClD;YAAC,GAAGse,qBAAqBzF,aAAAA,CAAc7Y,KAAAA;QAAAA,IACvCjB,KAAAA,GACEuI,YAAYgX,sBAAsBzF,eAAe7V,SACnD;YAAC,GAAGsb,qBAAqBzF,aAAAA,CAAc7V,MAAAA;QAAAA,IACvCjE,KAAAA;QACJ,CAAK4gB,gBAAgBC,iBAAmBrY,YAAYD,SAAAA,KAAAA,CACnC;YAACqY;YAAcC;YAAerY;YAAUD,SAAS;SAAA,CACzD0I,OAAAA,CAAStP,CAAAA,UAAU;YAEtBA,SACAA,MAAMT,IAAAA,CAAK,CAAC,CAAA,IAAKL,aAAamP,SAC9BrO,MAAMT,IAAAA,CAAK,CAAC,CAAA,GAAI8O,QAAQ,CAAA,KAAA,CAExBrO,MAAMT,IAAAA,GAAO;gBAACS,MAAMT,IAAAA,CAAK,CAAC,CAAA,GAAI8O,OAAO;mBAAGrO,MAAMT,IAAAA,CAAKC,KAAAA,CAAM,CAAC,CAAC;aAAA;QAE/D,CAAC,GACGyf,gBAAgBC,iBAAAA,CAClBtB,qBAAqB1F,UAAAA,GAAa;YAChC5Y,OAAO2f;YACP3c,QAAQ4c;QAAAA,CAAAA,GAGRrY,YAAYD,aAAAA,CACdgX,qBAAqBzF,aAAAA,GAAgB;YACnC7Y,OAAOuH;YACPvE,QAAQsE;QAAAA,CAAAA,CAAAA;IAIhB;IAEA,OAAOgX;AACT;AAIA,MAAMpB,cAAcA,CAACvE,IAAepC,OAC9BoC,CAAAA,CAAAA,CAAAA,GAAG7M,IAAAA,KAAS,mBAMdyK,QACAoC,GAAG7M,IAAAA,KAAS,iBACZyK,KAAKzK,IAAAA,KAAS,iBACd6M,GAAGzV,MAAAA,KAAWqT,KAAKrT,MAAAA,GAASqT,KAAKxY,IAAAA,CAAKiB,MAAAA,iJACtCgX,OAAAA,CAAK6J,MAAAA,CAAOlH,GAAG1Y,IAAAA,EAAMsW,KAAKtW,IAAI,KAC9B0Y,GAAG5a,IAAAA,KAAS,OAOZwY,QACAoC,GAAG7M,IAAAA,KAAS,iBACZyK,KAAKzK,IAAAA,KAAS,iBACd6M,GAAGzV,MAAAA,GAASyV,GAAG5a,IAAAA,CAAKiB,MAAAA,KAAWuX,KAAKrT,MAAAA,iJACpC8S,OAAAA,CAAK6J,MAAAA,CAAOlH,GAAG1Y,IAAAA,EAAMsW,KAAKtW,IAAI,CAAA,GAS5B6c,kBAAkBA,CACtBnE,IACApC,OAEIA,CAAAA,CAAAA,CAAAA,QAAQoC,GAAG7M,IAAAA,KAAS,mBAAmByK,KAAKzK,IAAAA,KAAS,eAAA,GAOrDyR,cAAe5E,CAAAA,KACfA,GAAG7M,IAAAA,KAAS;AAOX,SAASmS,cAAc5iB,MAAAA,EAAgBib,EAAAA,EAAsB;IAClE,MAAMC,OAAOmF,SAASrgB,MAAM;IAC5BkgB,OAAOpH,GAAAA,CAAI9Y,QAAQ,CAAA,CAAK,GACxBib,MACAiF,OAAOpH,GAAAA,CAAI9Y,QAAQkb,IAAI;AACzB;AAEA,SAAS6G,sBAAsB/hB,MAAAA,EAAoC;IACjE,OAAO;QACLyQ,MAAM;QACN8M,YAAY;YAAC,GAAGvd,OAAOyE,SAAAA;QAAAA;QACvB+Y,eAAe;YAAC,GAAGxd,OAAOyE,SAAAA;QAAAA;IAAS;AAEvC;AAEA,SAAS+e,yBACPxjB,MAAAA,EACAkZ,SAAAA,EACwB;IACxB,IAAIvX;IACJ,OAAIuX,UAAUzI,IAAAA,KAAS,mBAAmBzQ,OAAOyE,SAAAA,GAC/C9C,QAAQ3B,OAAOqC,QAAAA,CAASrC,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA,GAC7C,UAAUsU,aAAAA,CACnBvX,QAAQ3B,OAAOqC,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,GAEpCjD;AACT;ACzkBO,MAAM8iB,uCAGTA,CAAC,EAAC9b,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMwL,mNAAmBC,kBAAAA,EAAgB;QACvCxG,YAAY;YACVvc,OAAOsX,UAAUiF,UAAAA,CAAWvd,IAAAA;YAC5B,GAAGsY,UAAUiF,UAAAA,CAAWhd,KAAAA;QAAAA;QAE1BwH;QACA8N,SAAS;YAACC,aAAa,CAAA;YAAOC,gBAAgB,CAAA;QAAA;IAAI,CACnD;IAED,IAAI,CAAC+N,kBACH,MAAM,IAAIxhB,MACR,CAAA,2BAAA,EAA8BgT,KAAKC,SAAAA,CAAU+C,UAAUiF,UAAU,CAAC,EACpE;IAGF,MAAMne,SAASkZ,UAAUlZ,MAAAA;IAEzB,IAAI,CAACA,OAAOyE,SAAAA,iJAAaS,QAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS,GACzD;IAGF,IAAImgB,OACApK,UACAqK;IACJ,MAAMC,eAAuB,CAAA,CAAA,EAEvB3d,8JAAiBjD,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;QAC1CoE,IAAIpE,OAAOyE,SAAAA;QACXJ,OAAQK,CAAAA,OAAS1E,OAAOoH,WAAAA,CAAY1C,IAAI;QACxCgW,sJAASxV,QAAAA,CAAM6C,UAAAA,CAAW/H,OAAOyE,SAAS;IAAA,CAC3C;IAED,IAAIF,aAAa;IAEjB,KAAA,MAAW,CAAC5C,OAAOqC,SAAS,CAAA,IAAKmD,eAAgB;QAK/C,IAJIxF,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAI1BhC,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAAKhC,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,IAC5D;QAIF,MAAMqiB,gBACJxgB,eAAe,IAAImgB,iBAAiBtjB,IAAAA,GAAOuH,QAAQyO,YAAAA,IAC/CjV,WAAWR,MAAMQ,QAAAA,IAAY,CAAA,CAAA;QACXA,SAAS0J,IAAAA,CAC9BqR,CAAAA,UACCA,QAAQtb,KAAAA,KAAU8iB,iBAAiB9iB,KAAAA,IACnCsb,QAAQ9b,IAAAA,KAAS2jB,aACrB,MAEwBrhB,KAAAA,KAAAA,8IACtBiW,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;YACEmC,UAAU,CACR;mBAAGA;gBACH;oBACE,GAAGuiB,gBAAAA;oBACHtjB,MAAM2jB;gBAAAA,CACP;aAAA;QAAA,GAGL;YAAC3gB,IAAIJ;QAAAA,CACP,GAEA6gB,cAAc;YAAC;gBAACzjB,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAM2jB;YAAAA,CAAc;SAAA,+IAEhE7f,QAAAA,CAAM6C,UAAAA,CAAW/H,OAAOyE,SAAS,IACnCqgB,aAAaE,OAAAA,CAAQH,WAAW,IAEhCC,aAAa9c,IAAAA,CAAK6c,WAAW,CAAA,gJAIjClL,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ,CAAA,GAAI;YAACqE,oJAAOT,OAAAA,CAAKC,MAAAA;YAAQiU,OAAO,CAAA;QAAA,CAAK;QAEjE,MAAMzV,wJAAWyD,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,SAAS;QAEhD,KAAA,MAAW,CAACuT,MAAM3S,IAAI,CAAA,IAAKvC,SAAU;YAKnC,IAJI,CAACrC,OAAO+E,UAAAA,CAAWwS,IAAI,KAIvB,8IAACrS,QAAAA,CAAMgV,QAAAA,CAASla,OAAOyE,SAAAA,EAAWG,IAAI,GACxC;YAGF,MAAMjC,QAAQ4U,KAAK5U,KAAAA,IAAS,CAAA,CAAA,EACtBsiB,8BAA8BtiB,MAAMgV,MAAAA,CAAQoC,CAAAA,OAChD5X,SAAS0E,IAAAA,CACNqW,CAAAA,UACCA,QAAQ9b,IAAAA,KAAS2Y,QAAQmD,QAAQtb,KAAAA,KAAU8iB,iBAAiB9iB,KAChE,CACF;YAEA+X,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBACE2C,OAAO,CACL;uBAAGA,MAAMgV,MAAAA,CACNoC,CAAAA,OAAS,CAACkL,4BAA4B/K,QAAAA,CAASH,IAAI,CACtD;oBACAgL,aAAa;iBAAA;YAAA,GAGjB;gBAAC3gB,IAAIQ;YAAAA,CACP,GAEA4V,WAAW;gBAAC;oBAACpZ,MAAMO,MAAMP,IAAAA;gBAAAA;gBAAO;gBAAY;oBAACA,MAAMmW,KAAKnW,IAAAA;gBAAAA,CAAK;aAAA;QAC/D;QAEAmD;IACF;IAEA,OAAIsgB,eAAerK,YAAAA,CACjBoK,QAAQ;QACNC;QACAC;QACAtK;IAAAA,CAAAA,GAIGoK;AACT,GCrJaM,0CAETA,CAAC,EAAChM,SAAAA,EAAS,KAAM;IACnB,MAAMlZ,SAASkZ,UAAUlZ,MAAAA;IAEzB,IAAKA,OAAOyE,SAAAA,EAIZ,iJAAIS,QAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS,GAAG;QACvC,MAAM,CAAC9C,OAAOqC,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQA,OAAOyE,SAAAA,EAAW;YAC/DsZ,OAAO;QAAA,CACR;QAED,IAAI,CAAC/d,OAAOoH,WAAAA,CAAYzF,KAAK,GAC3B;QAIF,MAAMwjB,uBAAAA,CADWxjB,MAAMQ,QAAAA,IAAY,CAAA,CAAA,EACGwV,MAAAA,CACnCuF,CAAAA,UAAYA,QAAQtb,KAAAA,KAAUsX,UAAUiF,UAAAA,CAAWvd,IACtD,GAEM,CAACwkB,eAAeC,iBAAiB,CAAA,gJAAInhB,SAAAA,CAAOQ,IAAAA,CAChD1E,QACAA,OAAOyE,SAAAA,EACP;YACEsZ,OAAO;QAAA,CAEX;QAEA,IAAI,CAAC/d,OAAO+E,UAAAA,CAAWqgB,aAAa,GAClC;QAGF,MAAME,qBAAqBF,cAAcziB,KAAAA,EAAOkJ,KAAMkO,CAAAA,OACpDoL,qBAAqBte,IAAAA,CAAMqW,CAAAA,UAAYA,QAAQ9b,IAAAA,KAAS2Y,IAAI,CAC9D;QAEA,IAAI,CAACuL,oBACH;QAGF,MAAMC,kCAEF,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACjjB,OAAO0K,SAAS,CAAA,iJAAKlH,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,WAAW;YAChE0W,SAAS,CAAA;QAAA,CACV,EACC,IAAK1a,OAAO+E,UAAAA,CAAWzC,KAAK,kJAIvBqY,OAAAA,CAAKC,QAAAA,CAAS5N,WAAWqY,iBAAiB,GAI/C,IAAI/iB,MAAMK,KAAAA,EAAOuX,SAASoL,kBAAkB,GAC1CC,gCAAgCvd,IAAAA,CAAK;YAAC1F;YAAO0K,SAAS;SAAC;aAEvD;QAIJ,MAAMwY,8BAEF,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACljB,OAAO0K,SAAS,CAAA,iJAAKlH,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,SAAS,EAC9D,IAAKhE,OAAO+E,UAAAA,CAAWzC,KAAK,iJAIvBqY,QAAAA,CAAKI,OAAAA,CAAQ/N,WAAWqY,iBAAiB,GAI9C,IAAI/iB,MAAMK,KAAAA,EAAOuX,SAASoL,kBAAkB,GAC1CE,4BAA4Bxd,IAAAA,CAAK;YAAC1F;YAAO0K,SAAS;SAAC;aAEnD;QAIJ,KAAA,MAAW,CAAC1K,OAAO0K,SAAS,CAAA,IAAK,CAC/B;eAAGuY;YACH;gBAACH;gBAAeC,iBAAiB;aAAA,EACjC;eAAGG,2BAA2B;SAAA,CAE9B7L,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;YACE2C,OAAOL,MAAMK,KAAAA,EAAOgV,OAAQoC,CAAAA,OAASA,SAASuL,kBAAkB;QAAA,GAElE;YAAClhB,IAAI4I;QAAAA,CACP;IAEJ,OAAO;QACL2M,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA,CAAA,GACA;YACEqE,OAAQK,CAAAA,OAAS1E,OAAO+E,UAAAA,CAAWL,IAAI;YACvCoT,OAAO,CAAA;YACPuH,SAAS,CAAA;QAAA,CAEb;QAEA,MAAMrJ,sJAAS9R,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;YAClCoE,IAAIpE,OAAOyE,SAAAA;YACXJ,OAAQK,CAAAA,OAAS1E,OAAOoH,WAAAA,CAAY1C,IAAI;QAAA,CACzC;QAED,KAAA,MAAW,CAAC/C,OAAOqC,SAAS,CAAA,IAAKgS,OAAQ;YACvC,MAAM3T,wJAAWyD,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQgE,SAAS;YAEhD,KAAA,MAAW,CAAC1B,OAAO0K,SAAS,CAAA,IAAK3K,SAAU;gBAKzC,IAJI,CAACrC,OAAO+E,UAAAA,CAAWzC,KAAK,KAIxB,8IAAC4C,QAAAA,CAAMgV,QAAAA,CAASla,OAAOyE,SAAAA,EAAWuI,SAAS,GAC7C;gBAGF,MAAM7K,WAAWR,MAAMQ,QAAAA,IAAY,EAAA,EAC7BQ,QAAQL,MAAMK,KAAAA,IAAS,CAAA,CAAA,EACvB8iB,yBAAyB9iB,MAAMgV,MAAAA,CAAQoC,CAAAA,OAC3B5X,SAAS0J,IAAAA,CAAMqR,CAAAA,WAAYA,SAAQ9b,IAAAA,KAAS2Y,IAAI,GAChDnY,UAAUsX,UAAUiF,UAAAA,CAAWvd,IAChD;gBAEG6kB,uBAAuB9hB,MAAAA,KAAWhB,MAAMgB,MAAAA,iJAC1CgW,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;oBACE2C,OAAO8iB;gBAAAA,GAET;oBAACrhB,IAAI4I;gBAAAA,CACP;YAEJ;QACF;IACF;AACF,GC9Ia0Y,kCAETA,CAAC,EAAC/c,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMyM,WAAWta,aAAa;QAC5B1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACiZ,UACH,MAAM,IAAIziB,MACR,CAAA,kBAAA,EAAqBgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,CAAA,mBAAA,CACnD;IAIF,MAAMzC,qJADauC,SAAAA,CAAOQ,IAAAA,CAAKwU,UAAUlZ,MAAAA,EAAQ2lB,UAAU;QAAC5H,OAAO;IAAA,CAAE,GAAA,CAC1C,CAAC,CAAA;IAE5B,IAAI,CAACpc,OACH,MAAM,IAAIuB,MAAM,CAAA,wBAAA,EAA2BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG3E,MAAMmS,cAAcvT,eAClB;QAACrB,KAAK;KAAA,EACNgH,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAIuM,UAAUlZ,MAAM,CAC3C,EAAEoE,EAAAA,CAAG,CAAC;IAEN,IAAI,CAACmS,aACH,MAAM,IAAIrT,MAAM,CAAA,yBAAA,EAA4BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG5E,MAAM,EAACxC,KAAAA,EAAO,GAAGgkB,eAAAA,GAAiB1M,UAAUrZ,KAAAA,EAEtCgmB,+MAAerP,aAAAA,EAAW;QAC9B7N;QACAhH,OAAO;YACL,GAAG4U,WAAAA;YACH,GAAGqP,aAAAA;QAAAA;QAELnP,SAAS;YAACC,aAAa,CAAA;YAAOC,gBAAgB,CAAA;QAAA;IAAI,CACnD;IAED,IAAI,CAACkP,cACH,MAAM,IAAI3iB,MAAM,CAAA,0BAAA,EAA6BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG7E,MAAM0hB,aAAaxkB,aAAa;QAACukB,YAAY;KAAA,EAAG;QAC9CtkB,aAAaoH,QAAQrC,MAAAA;IAAAA,CACtB,GAAGlC,GAAG,CAAC;IAER,IAAI,CAAC0hB,YACH,MAAM,IAAI5iB,MAAM,wCAAwC;IAG1DyW,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CAAS5D,UAAUlZ,MAAAA,EAAQ8lB,YAAY;QAAC1hB,IAAIuhB;IAAAA,CAAS;AAClE,GC7DaI,oCAETA,CAAC,EAACpd,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMyM,WAAWta,aAAa;QAC5B1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACiZ,UACH,MAAM,IAAIziB,MACR,CAAA,kBAAA,EAAqBgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,CAAA,mBAAA,CACnD;IAIF,MAAMzC,qJADauC,SAAAA,CAAOQ,IAAAA,CAAKwU,UAAUlZ,MAAAA,EAAQ2lB,UAAU;QAAC5H,OAAO;IAAA,CAAE,GAAA,CAC1C,CAAC,CAAA;IAE5B,IAAI,CAACpc,OACH,MAAM,IAAIuB,MAAM,CAAA,wBAAA,EAA2BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG3E,MAAMmS,cAAcvT,eAClB;QAACrB,KAAK;KAAA,EACNgH,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAIuM,UAAUlZ,MAAM,CAC3C,EAAEoE,EAAAA,CAAG,CAAC;IAEN,IAAI,CAACmS,aACH,MAAM,IAAIrT,MAAM,CAAA,yBAAA,EAA4BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG5E,oMAAIgD,cAAAA,EAAYuB,SAAS4N,WAAW,GAAG;QACrC,MAAMyP,gBAAgB9M,UAAUrZ,KAAAA,CAAM8X,MAAAA,CAAQsO,CAAAA,OAASA,SAAS,OAAO,GAEjEC,mNAAmB1P,aAAAA,EAAW;YAClC7N;YACAhH,0IAAOwkB,UAAAA,EAAK5P,aAAayP,aAAa;YACtCvP,SAAS;gBAACC,aAAa,CAAA;gBAAOC,gBAAgB,CAAA;YAAA;QAAI,CACnD;QAED,IAAI,CAACuP,kBACH,MAAM,IAAIhjB,MACR,CAAA,0BAAA,EAA6BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAC3D;QAGF,MAAMgiB,aAAsC,CAAA;QAE5C,KAAA,MAAWH,QAAQD,cACXC,QAAQC,mBAGZE,UAAAA,CAAWH,IAAI,CAAA,GAAKC,gBAAAA,CAA6CD,IAAI,CAAA,GAFrEG,UAAAA,CAAWH,IAAI,CAAA,GAAIviB,KAAAA;QAMvBiW,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CAAS5D,UAAUlZ,MAAAA,EAAQomB,YAAY;YAAChiB,IAAIuhB;QAAAA,CAAS;QAEhE;IACF;IAEA,MAAMU,oNAAqB7P,cAAAA,EAAW;QACpC7N;QACAhH,OAAOwkB,6IAAAA,EACL5P,aACA2C,UAAUrZ,KAAAA,CAAM8X,MAAAA,CAAQsO,CAAAA,OAASA,SAAS,OAAO,CACnD;QACAxP,SAAS;YAACC,aAAa,CAAA;YAAOC,gBAAgB,CAAA;QAAA;IAAI,CACnD;IAED,IAAI,CAAC0P,oBACH,MAAM,IAAInjB,MAAM,CAAA,0BAAA,EAA6BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG7E,MAAM,EAACxC,KAAAA,EAAOR,IAAAA,EAAM,GAAGvB,OAAAA,GAASwmB;IAEhC1M,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT5D,UAAUlZ,MAAAA,EACV;QACE4B;QACAR;QACAD,OAAOtB;IAAAA,GAET;QAACuE,IAAIuhB;IAAAA,CACP;AACF,GChGaW,kCAETA,CAAC,EAAC3d,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMyM,WAAWta,aAAa;QAC5B1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACiZ,UACH,MAAM,IAAIziB,MACR,CAAA,kBAAA,EAAqBgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,CAAA,mBAAA,CACnD;IAGF,MAAMmiB,0JAAariB,SAAAA,CAAOQ,IAAAA,CAAKwU,UAAUlZ,MAAAA,EAAQ2lB,UAAU;QAAC5H,OAAO;IAAA,CAAE,GAC/Dzb,QAAQikB,YAAAA,CAAa,CAAC,CAAA,EACtBvZ,YAAYuZ,YAAAA,CAAa,CAAC,CAAA;IAEhC,IAAI,CAACjkB,SAAS,CAAC0K,WACb,MAAM,IAAI9J,MAAM,CAAA,wBAAA,EAA2BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG3E,IAAI8U,UAAUlZ,MAAAA,CAAO+E,UAAAA,CAAWzC,KAAK,GAAG;QACtC,MAAM,EAACV,KAAAA,EAAOc,IAAAA,EAAM,GAAGb,MAAAA,GAAQqX,UAAUrZ,KAAAA;QAEzC8Z,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT5D,UAAUlZ,MAAAA,EACV;YACE,GAAGsC,KAAAA;YACH,GAAGT,IAAAA;QAAAA,GAEL;YAACuC,IAAI4I;QAAAA,CACP,GAEI,OAAOtK,QAAS,YACdJ,MAAMI,IAAAA,KAASA,QAAAA,CACjBwW,UAAUlZ,MAAAA,CAAOwc,KAAAA,CAAM;YACrB/L,MAAM;YACN7L,MAAMoI;YACNnF,QAAQ;YACRnF,MAAMJ,MAAMI,IAAAA;QAAAA,CACb,GAEDwW,UAAUlZ,MAAAA,CAAOwc,KAAAA,CAAM;YACrB/L,MAAM;YACN7L,MAAMoI;YACNnF,QAAQ;YACRnF;QAAAA,CACD,CAAA;QAIL;IACF;IAEA,iJAAIG,UAAAA,CAAQC,SAAAA,CAAUR,KAAK,GAAG;QAC5B,MAAMkkB,aAAa7d,QAAQrC,MAAAA,CAAOqM,aAAAA,CAAc9G,IAAAA,CAC7C2a,CAAAA,cAAeA,YAAW5lB,IAAAA,KAAS0B,MAAMV,KAC5C;QAEA,IAAI,CAAC4kB,YACH,MAAM,IAAItjB,MACR,CAAA,wDAAA,EAA2DZ,MAAMV,KAAK,EACxE;QAGF,MAAMT,QACJ,WAAWmB,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAAWmB,MAAMnB,KAAAA,GAAQ,CAAA,GAChE,EAACS,KAAAA,EAAOR,IAAAA,EAAM,GAAGS,MAAAA,GAAQqX,UAAUrZ,KAAAA;QAEzC,IAAA,MAAWomB,QAAQpkB,KACZ2kB,WAAWC,MAAAA,CAAO5f,IAAAA,CAAM6f,CAAAA,QAAUA,MAAM9lB,IAAAA,KAASqlB,IAAI,KACxD,OAAOpkB,IAAAA,CAAKokB,IAAI,CAAA;QAIpBtM,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT5D,UAAUlZ,MAAAA,EACV;YACE,GAAGsC,KAAAA;YACHlB,MAAM,OAAOA,QAAS,WAAWA,OAAOkB,MAAMlB,IAAAA;YAC9CD,OAAO;gBACL,GAAGA,KAAAA;gBACH,GAAGU,IAAAA;YAAAA;QACL,GAEF;YAACuC,IAAI4I;QAAAA,CACP;QAEA;IACF;IAEA,MAAM,IAAI9J,MACR,CAAA,yCAAA,EAA4CgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAC1E;AACF,GCrGauiB,oCAETA,CAAC,EAAChe,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMyM,WAAWta,aAAa;QAC5B1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMsU,UAAU9U,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACiZ,UACH,MAAM,IAAIziB,MACR,CAAA,kBAAA,EAAqBgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,CAAA,mBAAA,CACnD;IAGF,MAAMmiB,0JAAariB,SAAAA,CAAOQ,IAAAA,CAAKwU,UAAUlZ,MAAAA,EAAQ2lB,UAAU;QAAC5H,OAAO;IAAA,CAAE,GAC/Dzb,QAAQikB,YAAAA,CAAa,CAAC,CAAA,EACtBvZ,YAAYuZ,YAAAA,CAAa,CAAC,CAAA;IAEhC,IAAI,CAACjkB,SAAS,CAAC0K,WACb,MAAM,IAAI9J,MAAM,CAAA,wBAAA,EAA2BgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAAE;IAG3E,IAAI8U,UAAUlZ,MAAAA,CAAO+E,UAAAA,CAAWzC,KAAK,GAAG;QAClC4W,UAAUrZ,KAAAA,CAAMqa,QAAAA,CAAS,MAAM,KACjChB,UAAUlZ,MAAAA,CAAOwc,KAAAA,CAAM;YACrB/L,MAAM;YACN7L,MAAMoI;YACNnF,QAAQ;YACRnF,MAAMJ,MAAMI,IAAAA;QAAAA,CACb;QAGH,MAAMkkB,UAAmC,CAAA;QAEzC,KAAA,MAAWX,QAAQ/M,UAAUrZ,KAAAA,CAC3B,IAAIomB,SAAS,SAKb;YAAA,IAAIA,SAAS,QAAQ;gBACnBW,QAAQxlB,IAAAA,GAAOuH,QAAQyO,YAAAA,CAAAA;gBACvB;YACF;YAEAwP,OAAAA,CAAQX,IAAI,CAAA,GAAI;QAAA;QAGlBtM,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CAAS5D,UAAUlZ,MAAAA,EAAQ4mB,SAAS;YAACxiB,IAAI4I;QAAAA,CAAU;QAE9D;IACF;IAEA,IAAInK,uJAAAA,CAAQC,SAAAA,CAAUR,KAAK,GAAG;QAC5B,MAAMnB,QACJ,WAAWmB,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAAWmB,MAAMnB,KAAAA,GAAQ,CAAA,GAChE0f,UAAU3H,UAAUrZ,KAAAA,CAAM6B,GAAAA,CAAKukB,CAAAA,OAAAA,CAAU;gBAC7CxV,MAAM;gBACN7L,MAAM;oBAACqhB,IAAI;iBAAA;YAAA,CAAA,CACX,GACIY,WAAWC,0KAAAA,EAAS3lB,OAAO0f,OAAO;QAExClH,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT5D,UAAUlZ,MAAAA,EACV;YACE,GAAGsC,KAAAA;YACHlB,MAAM8X,UAAUrZ,KAAAA,CAAMqa,QAAAA,CAAS,MAAM,IACjCvR,QAAQyO,YAAAA,KACR9U,MAAMlB,IAAAA;YACVD,OAAO0lB;QAAAA,GAET;YAACziB,IAAI4I;QAAAA,CACP;QAEA;IACF;IAEA,MAAM,IAAI9J,MACR,CAAA,yCAAA,EAA4CgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EAC1E;AACF,GCnFa2iB,sCAETA,CAAC,EAACpe,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMlZ,SAASkZ,UAAUlZ,MAAAA,EACnB+Z,OAAOb,UAAUe,SAAAA,EACjB9Y,QAAQ6B,eACZhD,OAAOqC,QAAAA,EACPsG,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC,GAEMgnB,eAAe9N,UAAU9U,EAAAA,EAAIuD,yMAC/BqB,kCAAAA,EAAsC;QACpCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEF4L,aAAamM,UAAU9U,EAAAA,CAAGuD,MAAAA;QAC1B8E,WAAW;IAAA,CACZ,IACD/I,KAAAA,GACEujB,cAAc/N,UAAU9U,EAAAA,EAAIO,QAC9BqE,kOAAAA,EAAsC;QACpCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEF4L,aAAamM,UAAU9U,EAAAA,CAAGO,KAAAA;QAC1B8H,WAAW;IAAA,CACZ,IACD/I,KAAAA,GACEwjB,kBACJF,gBAAgBC,cACZ;QACEtf,QAAQqf;QACRriB,OAAOsiB;IAAAA,IAETvjB,KAAAA,GAEAe,YAAYyiB,kBACb7b,aAAa;QACZ1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAWyiB;QAAAA;QAEbxa,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC,KAAK1M,OAAOyE,SAAAA,GACbzE,OAAOyE,SAAAA;IAEX,IAAI,CAACA,WACH;IAGF,MAAM0iB,kBAAkB3f,sBAAsB;QAC5ClB,QAAQqC,QAAQrC,MAAAA;QAChBtG;QACAyH,OAAOhD;IAAAA,CACR,GACK2iB,eAAeD,yNACjBne,8BAAAA,EAAkC;QAChCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEFqL,gBAAgB2a,gBAAgBxf,MAAAA;IAAAA,CACjC,IACDjE,KAAAA,GACE2jB,cAAcF,yNAChBne,8BAAAA,EAAkC;QAChCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEFqL,gBAAgB2a,gBAAgBxiB,KAAAA;IAAAA,CACjC,IACDjB,KAAAA;IAEJ,IAAI,CAAC0jB,gBAAgB,CAACC,aACpB,MAAM,IAAInkB,MAAM,uCAAuC;IAGzD,iJAAIgC,QAAAA,CAAMsZ,UAAAA,CAAW/Z,SAAS,GAAG;QAE/BkV,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA,CAAA,GACA;YAACoE,IAAIK;YAAWJ,OAAOT,oJAAAA,CAAKC,MAAAA;YAAQiU,OAAO,CAAA;YAAMuH,SAAS,CAAA;QAAA,CAC5D;QAGA,MAAMwH,WAAW7jB,eACfhD,OAAOqC,QAAAA,EACPsG,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC,GAGMsnB,mBAAete,2PAAAA,EAA8B;YACjDL,SAAS;gBACP,GAAGA,OAAAA;gBACHxH,OAAO0lB;YAAAA;YAETU,SAAS;gBAAC5f,QAAQyf;gBAAcziB,OAAO0iB;YAAAA;YACvCvf,UAAUqf,iBAAiBrf;QAAAA,CAC5B,GAEK0f,2OAAmBhZ,sBAAAA,EAA8B;YACrD9B,eAAe1M,OAAO0M,aAAAA;YACtB/D,SAAS;gBACP+M,YAAY,CAAA,CAAA;gBACZ0B,cAAczO,QAAQyO,YAAAA;gBACtB/E,UAAU,CAAA;gBACV/L,QAAQqC,QAAQrC,MAAAA;gBAChB7B,WAAW6iB;gBACXnmB,OAAO0lB;YAAAA;YAET1N,gBAAgBnZ,OAAOmZ,cAAAA;QAAAA,CACxB;QAED,IAAI,CAACqO,kBACH,MAAM,IAAItkB,MAAM,kCAAkC;QAGpD,MAAMukB,WAAWpc,aAAa;YAC5B1C,SAAS;gBACPrC,QAAQqC,QAAQrC,MAAAA;gBAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;gBACxBsD,WAAW+iB;YAAAA;YAEb9a,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;QAAAA,CACjC;QAED,IAAI,CAAC+a,UACH,MAAM,IAAIvkB,MAAM,8BAA8B;QAIhD,MAAMwkB,8JAAiBxiB,QAAAA,CAAMyiB,OAAAA,CAAQF,QAAQ,IACzC,CACE;4JAAGvjB,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;gBACtBoE,IAAIqjB;gBACJpjB,OAAQK,CAAAA,OAASd,oJAAAA,CAAKC,MAAAA,CAAOa,IAAI;YAAA,CAClC,CAAC;SAAA,GAEJ,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACA,MAAME,IAAI,CAAA,IAAK8iB,eAAgB;YACzC,MAAM/kB,QAAQ,CACZ;mBAAA,CAAInB,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,IAAI+B,KAAK/B,KAAAA,GAAQ,CAAA,CAAA,EAAIgV,MAAAA,CAC9C2H,CAAAA,QAAkBA,UAAUvF,IAC/B;gBACAA,IAAI;aAAA;YAENJ,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBAAC2C;YAAAA,GACD;gBAACyB,IAAIQ;gBAAMP,oJAAOT,OAAAA,CAAKC,MAAAA;gBAAQiU,OAAO,CAAA;gBAAMuH,SAAS,CAAA;YAAA,CACvD;QACF;IACF,OAAO;QAQL,IAAI,CAPiB7d,MAAMyC,IAAAA,8IACzBC,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;YACnBoE,IAAIK;YACJJ,OAAQK,CAAAA,OAAS1E,OAAO+E,UAAAA,CAAWL,IAAI;QAAA,CACxC,CACH,GAAGN,GAAG,CAAC,GAGL;QAGF,MAAM,CAACzC,OAAOqC,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQyE,WAAW;YACxDsZ,OAAO;QAAA,CACR,GACKwB,kBACJvf,OAAOoH,WAAAA,CAAYzF,KAAK,KACxBA,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAC1B3D,OAAO+E,UAAAA,CAAWpD,MAAMU,QAAAA,CAAS,CAAC,CAAC,KACnCV,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,KACvBf,MAAMU,QAAAA,CAAS,CAAC,CAAA,GAChBqB,KAAAA;QAEN,IAAI6b,iBAAiB;YACnB,MAAMqI,gBAAgBrI,gBAAgB5c,KAAAA,IAAS,EAAA,EACzC6c,gCAAgCoI,cAAcjQ,MAAAA,CACjD8H,CAAAA,eAAiBA,iBAAiB1F,IACrC;YAEAJ,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBACE2C,OACEilB,cAAcjkB,MAAAA,KAAW6b,8BAA8B7b,MAAAA,GACnD,CAAC;uBAAGikB;oBAAe7N,IAAI;iBAAA,GACvByF;YAAAA,GAER;gBACEpb,IAAIJ;gBACJK,OAAQK,CAAAA,OAAS1E,OAAO+E,UAAAA,CAAWL,IAAI;YAAA,CAE3C;QACF,OACE1E,OAAOmZ,cAAAA,CAAeY,IAAI,CAAA,GAAI,CAAA;IAElC;IAEA,IAAI/Z,OAAOyE,SAAAA,EAAW;QAEpB,MAAMA,aAAYzE,OAAOyE,SAAAA;QACzBzE,OAAOyE,SAAAA,GAAY;YAAC,GAAGA,UAAAA;QAAAA;IACzB;AACF,GCrNaojB,gCAETA,CAAC,EAAClf,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAM4O,iNAAiB5e,gCAAAA,EAA8BgQ,UAAU9U,EAAAA,CAAGuD,MAAM,GAClEogB,gNAAgB7e,gCAAAA,EAA8BgQ,UAAU9U,EAAAA,CAAGO,KAAK,GAChEqjB,cAAc9O,UAAU9U,EAAAA,CAAG0D,QAAAA,GAAWggB,iBAAiBC,eACvDE,YAAY/O,UAAU9U,EAAAA,CAAG0D,QAAAA,GAC3BoR,UAAU9U,EAAAA,CAAGO,KAAAA,CAAMkD,MAAAA,GACnBqR,UAAU9U,EAAAA,CAAGuD,MAAAA,CAAOE,MAAAA;IAExB,IAAI,CAACmgB,aACH,MAAM,IAAI9kB,MAAM,6BAA6B;IAG/C,MAAMglB,gBAAgBhP,UAAUlZ,MAAAA,CAAO0M,aAAAA,CAAcC,GAAAA,CAAIqb,WAAW;IAEpE,IAAIE,kBAAkBxkB,KAAAA,GACpB,MAAM,IAAIR,MAAM,+BAA+B;IAGjD,MAAMilB,WAAWjP,UAAUlZ,MAAAA,CAAOmB,KAAAA,CAAMiD,EAAAA,CAAG8jB,aAAa;IAExD,IAAI,CAACC,UACH,MAAM,IAAIjlB,MAAM,yBAAyB;IAG3C,MAAMklB,kBACJN,mBAAmBpkB,KAAAA,IACfK,aAAa;QACX/D,QAAQkZ,UAAUlZ,MAAAA;QAClBoB,MAAM0mB;IAAAA,CACP,IACDpkB,KAAAA,GACAiC,iBACJoiB,kBAAkBrkB,KAAAA,IACdK,aAAa;QACX/D,QAAQkZ,UAAUlZ,MAAAA;QAClBoB,MAAM2mB;IAAAA,CACP,IACDrkB,KAAAA;IAEN,IACEwV,UAAU9U,EAAAA,CAAGuD,MAAAA,CAAO/C,IAAAA,CAAKjB,MAAAA,KAAW,KACpCuV,UAAU9U,EAAAA,CAAGO,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,KAAW,KACnCykB,mBACAziB,kBACAyiB,eAAAA,CAAgB,CAAC,CAAA,KAAMziB,cAAAA,CAAe,CAAC,CAAA,EACvC;QACAgU,4IAAAA,CAAAA,aAAAA,CAAW0O,WAAAA,CAAYnP,UAAUlZ,MAAAA,EAAQ;YACvCoE,IAAI;gBAACgkB,eAAAA,CAAgB,CAAC,CAAC;aAAA;QAAA,CACxB,GAEGlP,UAAUlZ,MAAAA,CAAOqC,QAAAA,CAASsB,MAAAA,KAAW,kJACvCgW,aAAAA,CAAWQ,WAAAA,CAAYjB,UAAUlZ,MAAAA,EAAQgZ,uBAAuBrQ,OAAO,CAAC;QAG1E;IACF;IAEA,MAAMlB,QAAQ4D,aAAa;QACzB1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAWyU,UAAU9U,EAAAA;QAAAA;QAEvBsI,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACjF,OACH,MAAM,IAAIvE,MACR,CAAA,wCAAA,EAA2CgT,KAAKC,SAAAA,CAAU+C,UAAU9U,EAAE,CAAC,EACzE;IAGF,MAAMib,0MAAUjY,cAAAA,EAAYuB,SAASwf,QAAQ,KAAKF,cAAc;IAEhE/O,UAAUlZ,MAAAA,CAAOsoB,MAAAA,CAAO;QACtBlkB,IAAIqD;QACJiT,SAASxB,UAAUzM,SAAAA,KAAc;QACjC8b,MAAMrP,UAAUqP,IAAAA;QAChBlJ;IAAAA,CACD;AACH,GCrFamJ,4CAETA,CAAC,EAAC7f,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMuP,qNAAqBC,oBAAAA,EAAkB;QAC3C/f;QACA0F,cAAc;YACZzM,OAAOsX,UAAU7K,YAAAA,CAAazN,IAAAA;YAC9B,GAAIsY,UAAU7K,YAAAA,CAAalN,KAAAA,IAAS,CAAA,CAAA;QAAC;QAEvCsV,SAAS;YAACC,aAAa,CAAA;YAAOC,gBAAgB,CAAA;QAAA;IAAI,CACnD;IAED,IAAI,CAAC8R,oBACH,MAAM,IAAIvlB,MACR,CAAA,8BAAA,EAAiCgT,KAAKC,SAAAA,CAAU+C,UAAU7K,YAAY,CAAC,EACzE;IAGF,IAAI,CAAC6K,UAAUlZ,MAAAA,CAAOyE,SAAAA,EAAW;QAC/B0G,QAAQgH,KAAAA,CAAM,kDAAkD;QAChE;IACF;IAEA,MAAM,CAACwW,cAAc,CAAA,GAAInnB,MAAMyC,IAAAA,8IAC7BC,SAAAA,CAAOC,KAAAA,CAAM+U,UAAUlZ,MAAAA,EAAQ;QAC7BoE,IAAI8U,UAAUlZ,MAAAA,CAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA;QACrCP,OAAQK,CAAAA,OAASwU,UAAUlZ,MAAAA,CAAOoH,WAAAA,CAAY1C,IAAI;IAAA,CACnD,CACH,EAAEN,EAAAA,CAAG,CAAC,KAAK;QAACV,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAEhC,IAAI,CAACilB,gBAAgB;QACnBxd,QAAQgH,KAAAA,CAAM,mDAAmD;QACjE;IACF;IAYA,MAAM7P,QAVQhB,aACZ;QACE;YACEM,OAAO+G,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;YAC5BQ,MAAMuH,QAAQyO,YAAAA,CAAAA;YACd/U,UAAU;gBAAComB,kBAAkB;aAAA;QAAA,CAC9B;KAAA,EAEH;QAAClnB,aAAaoH,QAAQrC,MAAAA;IAAAA,CACxB,EAAElC,EAAAA,CAAG,CAAC,GACe/B,SAAS+B,GAAG,CAAC;IAElC,IAAI,CAAC9B,OAAO;QACV6I,QAAQgH,KAAAA,CAAM,gCAAgC;QAC9C;IACF;IAEAwH,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYjB,UAAUlZ,MAAAA,EAAQsC,KAAK;AAChD,GCvDasmB,oCAETA,CAAC,EAACjgB,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,IAAI,CAACA,UAAUlZ,MAAAA,CAAOyE,SAAAA,EAAW;QAC/B0G,QAAQgH,KAAAA,CAAM,8CAA8C+G,SAAS;QACrE;IACF;IAEA,MAAM,CAACxT,YAAYC,cAAc,CAAA,GAAInE,MAAMyC,IAAAA,8IACzCC,SAAAA,CAAOC,KAAAA,CAAM+U,UAAUlZ,MAAAA,EAAQ;QAC7BoE,IAAI8U,UAAUlZ,MAAAA,CAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA;QACrCP,OAAQK,CAAAA,OAASwU,UAAUlZ,MAAAA,CAAOoH,WAAAA,CAAY1C,IAAI;IAAA,CACnD,CACH,CAAA,CAAE,CAAC,CAAA,IAAK;QAAChB,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAE7B,IAAI,CAACgC,cAAc,CAACC,gBAAgB;QAClCwF,QAAQgH,KAAAA,CAAM,gDAAgD+G,SAAS;QACvE;IACF;IAEA,MAAM/W,WAAWuD,WAAWvD,QAAAA,IAAY,CAAA,CAAA,EAClC4Q,cAAcmG,UAAUnG,WAAAA,GAC1BmG,UAAUnG,WAAAA,CAAYrR,GAAAA,CAAKyc,CAAAA,aAAAA,CAAgB;YACzCvc,OAAOuc,WAAWvd,IAAAA;YAClBQ,MAAMuH,QAAQyO,YAAAA,CAAAA;YACd,GAAG+G,WAAWhd,KAAAA;QAAAA,CAAAA,CACd,IACFuC,KAAAA;IAEAqP,eAAeA,YAAYpP,MAAAA,GAAS,kJACtCgW,aAAAA,CAAWmD,QAAAA,CAAS5D,UAAUlZ,MAAAA,EAAQ;QACpCmC,UAAU,CAAC;eAAGA,UAAU;eAAG4Q,WAAW;SAAA;IAAA,CACvC,gJAGH4G,aAAAA,CAAWQ,WAAAA,CAAYjB,UAAUlZ,MAAAA,EAAQ;QACvC4B,OAAO;QACPR,MAAMuH,QAAQyO,YAAAA,CAAAA;QACd1U,MAAMwW,UAAUxW,IAAAA;QAChBC,OAAO,CACL;eAAIoQ,aAAarR,IAAKyc,CAAAA,aAAeA,WAAW/c,IAAI,KAAK,CAAA,CAAA,EACzD;eAAI8X,UAAUc,UAAAA,IAAc,CAAA,CAAG;SAAA;IAAA,CAElC;AACH,GC/Ba6O,qCAETA,CAAC,EAAClgB,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAM3C,8MAAcC,aAAAA,EAAW;QAC7B7U,OAAOuX,UAAUvX,KAAAA;QACjBgH;QACA8N,SAAS;YAACC,aAAa,CAAA;YAAOC,gBAAgB,CAAA;QAAA;IAAI,CACnD;IAED,IAAI,CAACJ,aACH,MAAM,IAAIrT,MAAM,CAAA,sBAAA,EAAyBgT,KAAKC,SAAAA,CAAU+C,UAAUvX,KAAK,CAAC,EAAE;IAG5E,MAAMmnB,WAAWxnB,aAAa;QAACiV,WAAW;KAAA,EAAG;QAAChV,aAAaoH,QAAQrC,MAAAA;IAAAA,CAAO,CAAA,CAAE,CAAC,CAAA;IAE7E,IAAI,CAACwiB,UACH,MAAM,IAAI5lB,MACR,CAAA,0CAAA,EAA6CgT,KAAKC,SAAAA,CAAUI,WAAW,CAAC,EAC1E;IAGFwS,YAAY;QACVpnB,OAAOmnB;QACPE,WAAW9P,UAAU8P,SAAAA;QACrBC,QAAQ/P,UAAU+P,MAAAA,IAAU;QAC5BjpB,QAAQkZ,UAAUlZ,MAAAA;QAClBsG,QAAQqC,QAAQrC,MAAAA;IAAAA,CACjB;AACH;AAEO,SAASyiB,YAAY,EAC1BpnB,KAAAA,EACAqnB,SAAAA,EACAC,MAAAA,EACAjpB,MAAAA,EACAsG,MAAAA,EAOF,EAAG;IACD,MAAM,CAAC4iB,YAAYC,cAAc,CAAA,GAAInkB,uBAAuB;QAAChF;IAAAA,CAAO,GAC9D,CAACmoB,UAAUiB,YAAY,CAAA,GAAI9jB,qBAAqB;QAACtF;IAAAA,CAAO;IAE9D,IACE,CAACA,OAAOyE,SAAAA,IACR,CAACykB,cACD,CAACC,kBACD,CAAChB,YACD,CAACiB,cACD;QACIH,WAAW,8JACb9f,YAAAA,CAAUxE,KAAAA,CAAM3E,MAAM;QAGxB,MAAM,CAAC6J,WAAWzD,aAAa,CAAA,GAAID,aAAa;YAACnG;QAAAA,CAAO;QAExD,IAAIgpB,cAAc,UAChBrP,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;YAAC2B,KAAK;SAAA,EAAG;YAACyC,IAAI;gBAAC,CAAC;aAAA;QAAA,CAAE,GAE7C6kB,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQ;YAAC,CAAC;SAAC,CAAC,IAC1CipB,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQ;YAAC,CAAC;SAAC,CAAC;aAAA,IAE1CgpB,cAAc,SAAS;YAChC,MAAMK,WAAWjjB,gBAAgB;gBAACA,aAAAA,CAAc,CAAC,CAAA,GAAI,CAAC;aAAA,GAAI;gBAAC,CAAC;aAAA;YAC5DuT,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBAACyC,IAAIilB;YAAAA,CAAS,GAElDJ,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC,IAC/CJ,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQqpB,QAAQ,CAAC;QAE1D,OAAO;YAGL,IAAIxf,aAAapG,qBAAqB;gBAACoG,SAAS;aAAA,EAAGvD,MAAM,GAAG;gBAG1DqT,4IAAAA,CAAAA,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;oBAACoE,IAAIgC;gBAAAA,CAAc,gJAElDuT,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACtCyC,IAAIgC;oBACJ6iB,QAAQ,CAAA;gBAAA,CACT,GAEDtP,0JAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM,GAEtBipB,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQoG,aAAa,CAAC,IACpD6iB,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQoG,aAAa,CAAC;gBAG7D;YACF;YAEA,IACEpG,OAAOoH,WAAAA,CAAYzF,KAAK,KACxBkI,aACA7J,OAAOoH,WAAAA,CAAYyC,SAAS,GAC5B;gBACA,MAAMyf,+JAAkBplB,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQoG,aAAa;gBAExDuT,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACzCyC,IAAIF,sJAAAA,CAAOsB,GAAAA,CAAIxF,QAAQoG,aAAa;gBAAA,CACrC,GAEG6iB,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQspB,eAAe,IAChCL,WAAW,sJACpBtP,cAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM;gBAG5B;YACF;YAEA,MAAMqpB,WAAWjjB,gBAAgB;gBAACA,aAAAA,CAAc,CAAC,CAAA,GAAI,CAAC;aAAA,GAAI;gBAAC,CAAC;aAAA;YAE5DuT,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBAACyC,IAAIilB;gBAAUJ,QAAQ,CAAA;YAAA,CAAM,GAEjEA,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC,IAC/CJ,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQqpB,QAAQ,CAAC;QAE1D;IACF,OAAA,IACML,cAAc,UAAU;QAC1B,MAAMQ,mBAAmBxpB,OAAOyE,SAAAA,EAC1BQ,sBAAsBC,qJAAAA,CAAMC,KAAAA,CAAMqkB,gBAAgB;QAExD7P,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;YAAC2B,KAAK;SAAA,EAAG;YACtCyC,IAAI;gBAACa,oBAAoBL,IAAAA,CAAK,CAAC,CAAC;aAAA;YAChCqkB,QAAQ,CAAA;QAAA,CACT,GAEGA,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CACTjpB,qJACAkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQ;YAACiF,oBAAoBL,IAAAA,CAAK,CAAC,CAAC;SAAC,CACpD,IACSqkB,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CACTjpB,qJACAkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQ;YAACiF,oBAAoBL,IAAAA,CAAK,CAAC,CAAC;SAAC,CAClD;IAEJ,OAAA,IAAWokB,cAAc,SAAS;QAChC,MAAMQ,mBAAmBxpB,OAAOyE,SAAAA,EAG1B4kB,WAAW;yJAFSnkB,QAAAA,CAAMM,GAAAA,CAAIgkB,gBAAgB,EAEhB5kB,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;SAAA;QAE/C+U,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;YAAC2B,KAAK;SAAA,EAAG;YACtCyC,IAAIilB;YACJJ,QAAQ,CAAA;QAAA,CACT,GAEGA,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC,IAC/CJ,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQqpB,QAAQ,CAAC;IAE1D,OAAO;QAGL,MAAMG,mBAAmBxpB,OAAOyE,SAAAA,EAC1BglB,gKAAmBvlB,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQopB,YAAY;QAE1D,iJAAIlkB,QAAAA,CAAMsZ,UAAAA,CAAWgL,gBAAgB,KAAK,CAACxpB,OAAOoH,WAAAA,CAAYzF,KAAK,GAAG;YACpEgY,4IAAAA,CAAAA,aAAAA,CAAW2O,MAAAA,CAAOtoB,QAAQ;gBAACoE,IAAIolB;YAAAA,CAAiB;YAEhD,MAAMlC,eAAetnB,OAAOyE,SAAAA,EAEtB,CAACiB,YAAYC,cAAc,CAAA,GAAInB,cAAc;gBAACxE;YAAAA,CAAO;YAE3D2Z,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACtCkb,OAAO,CAAA;YAAA,CACR;YAED,MAAM6M,oBACJpC,aAAa3f,MAAAA,CAAOE,MAAAA,KAAW,IAC3B3C,qJAAAA,CAAMykB,SAAAA,CAAUrC,cAAc;gBAC5B7W,MAAM;gBACN/L,MAAM/C;gBACNiD,MAAM;oBAAC0iB,aAAa3f,MAAAA,CAAO/C,IAAAA,CAAK,CAAC,CAAC;iBAAA;YAAA,CACnC,IACD0iB;YAEF2B,WAAW,UAAUS,kKACvB/P,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQ0pB,iBAAiB,GAGzChkB,cAAcjC,qBAAqB;gBAACiC,UAAU;aAAA,EAAGY,MAAM,kJACzDqT,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;gBAACoE,IAAIuB;YAAAA,CAAe;YAGrD;QACF;QAEA,IAAI3F,OAAOoH,WAAAA,CAAY+gB,QAAQ,KAAKnoB,OAAOoH,WAAAA,CAAYzF,KAAK,GAAG;YAC7D,MAAMsD,mKAAsBC,QAAAA,CAAMC,KAAAA,CAAMqkB,gBAAgB;YAExD,IAAI/lB,qBAAqB;gBAAC0kB,QAAQ;aAAA,EAAG7hB,MAAM,GAAG;gBAC5C,MAAMkjB,oBAAmBxpB,OAAOyE,SAAAA;gBAEhCkV,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACtCyC,IAAIglB;oBACJH,QAAQ,CAAA;gBAAA,CACT,gJACDtP,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;oBAACoE,iJAAIuW,OAAAA,CAAKiP,IAAAA,CAAKR,YAAY;gBAAA,CAAE,GAExDH,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQiF,mBAAmB,IACpCgkB,WAAW,qJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQopB,YAAY,CAAC,iJAE1DzP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQwpB,iBAAgB;gBAG5C;YACF;YAYA,iJAVA7P,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBACEmC,UAAU,CAAC;uBAAIgmB,SAAShmB,QAAAA,IAAY,CAAA,CAAA,EAAK;uBAAIR,MAAMQ,QAAAA,IAAY,CAAA,CAAG;iBAAA;YAAA,GAEpE;gBACEiC,IAAIglB;YAAAA,CAER,GAEIH,WAAW,OAAO;gBACpBtP,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACzCkb,OAAO,CAAA;gBAAA,CACR;gBAED;YACF;YAEAlD,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACzCyC,IAAIolB;gBACJ3M,OAAO,CAAA;YAAA,CACR,GAEGoM,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQiF,mBAAmB,iJAExC4kB,QAAAA,CAAMrF,MAAAA,CAAOvf,qBAAqBwkB,gBAAgB,kJACrD9P,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQiF,mBAAmB;QAGnD,OAAA,IACOjF,OAAOoH,WAAAA,CAAY+gB,QAAQ,GAUzB;YACL,MAAM2B,iKAAqB5lB,UAAAA,CAAOiB,KAAAA,CAAMnF,QAAQopB,YAAY,GACtDK,iKAAmBvlB,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQopB,YAAY,GAClDnkB,mKAAsBC,QAAAA,CAAMC,KAAAA,CAAMqkB,gBAAgB,GAClDjkB,iKAAoBL,QAAAA,CAAMM,GAAAA,CAAIgkB,gBAAgB;YAEpD,iJACEtkB,QAAAA,CAAM6M,WAAAA,CAAYyX,gBAAgB,kJAClCK,QAAAA,CAAMrF,MAAAA,CAAOvf,qBAAqB6kB,kBAAkB,GAEpDnQ,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACtCyC,IAAIglB;gBACJH,QAAQ,CAAA;YAAA,CACT,GAAA,CAEGA,WAAW,WAAWA,WAAW,KAAA,kJACnCtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQopB,YAAY,CAAC,+MAG1DW,oBAAAA,EAAiB;gBAACzjB;YAAAA,GAAS6hB,QAAQ,kJACrCxO,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;gBAACoE,iJAAIuW,OAAAA,CAAKiP,IAAAA,CAAKR,YAAY;YAAA,CAAE;iBAAA,iJAG9DlkB,QAAAA,CAAM6M,WAAAA,CAAYyX,gBAAgB,kJAClCK,QAAAA,CAAMrF,MAAAA,CAAOjf,mBAAmBkkB,iBAAgB,GAChD;gBACA,MAAMJ,WAAW;oBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;iBAAA;gBAErCzP,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACtCyC,IAAIilB;oBACJJ,QAAQ,CAAA;gBAAA,CACT,GAAA,CAEGA,WAAW,WAAWA,WAAW,KAAA,kJACnCtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC;YAE5D,OAAA,iJACEnkB,QAAAA,CAAMsZ,UAAAA,CAAWgL,gBAAgB,kJACjCK,QAAAA,CAAMrF,MAAAA,CAAOvf,qBAAqB6kB,kBAAkB,kJACpDD,QAAAA,CAAMrF,MAAAA,CAAOjf,mBAAmBkkB,iBAAgB,GAEhD9P,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACzCyC,IAAIolB;YAAAA,CACL,GAEGP,WAAW,UACbtP,0JAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQkE,sJAAAA,CAAOiB,KAAAA,CAAMnF,QAAQopB,YAAY,CAAC,IACnDH,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQopB,YAAY,CAAC;iBAAA,IAG5DlkB,qJAAAA,CAAMsZ,UAAAA,CAAWgL,gBAAgB,kJACjCK,QAAAA,CAAMrF,MAAAA,CAAOvf,qBAAqB6kB,kBAAkB,GAEpDnQ,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACzCyC,IAAIolB;YAAAA,CACL,GAEGP,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQopB,YAAY,CAAC,IACnDH,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQopB,YAAY,CAAC;iBAAA,iJAG5DlkB,QAAAA,CAAMsZ,UAAAA,CAAWgL,gBAAgB,kJACjCK,QAAAA,CAAMrF,MAAAA,CAAOjf,mBAAmBkkB,iBAAgB,GAEhD9P,4IAAAA,CAAAA,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBACzCyC,IAAIolB;YAAAA,CACL,GAEGP,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CACTjpB,qJACAkE,SAAAA,CAAOiB,KAAAA,CAAMnF,qJAAQ2a,OAAAA,CAAKiP,IAAAA,CAAKR,YAAY,CAAC,CAC9C,IACSH,WAAW,SACpBtP,0JAAAA,CAAWsP,MAAAA,CACTjpB,qJACAkE,SAAAA,CAAOsB,GAAAA,CAAIxF,qJAAQ2a,OAAAA,CAAKiP,IAAAA,CAAKR,YAAY,CAAC,CAC5C;iBAEG;gBACL,MAAMI,oBAAmBxpB,OAAOyE,SAAAA,EAC1B,CAACoB,UAAU,CAAA,GAAIJ,cAAc;oBAACzF;gBAAAA,CAAO;gBAE3C,IAAI6F,cAAc7F,OAAO+E,UAAAA,CAAWc,UAAU,GAC5C8T,4IAAAA,CAAAA,aAAAA,CAAWqQ,UAAAA,CAAWhqB,QAAQ;oBAC5BoE,IAAIolB;gBAAAA,CACL,gJAED7P,aAAAA,CAAW4P,cAAAA,CAAevpB,QAAQ;oBAAC2B,KAAK;iBAAA,EAAG;oBACzCyC,IAAIolB;gBAAAA,CACL,GAEGP,WAAW,WAAWA,WAAW,qJACnCtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQ;oBAACopB,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;iBAAC,iJAE/CzP,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQwpB,iBAAgB;qBAEvC;oBACL,MAAMH,WAAW;wBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;qBAAA;oBACrCzP,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;wBAAC2B,KAAK;qBAAA,EAAG;wBACtCyC,IAAIilB;wBACJJ,QAAQ,CAAA;oBAAA,CACT,GACDtP,0JAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQwpB,iBAAgB,GAEtCP,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC,IAC/CJ,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQqpB,QAAQ,CAAC;gBAE1D;YACF;QACF,OA7HmC;YACjC1P,4IAAAA,CAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQ;gBAAC2B,KAAK;aAAA,EAAG;gBAACsnB,QAAQ,CAAA;YAAA,CAAM;YAEvD,MAAMI,WAAW;gBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;aAAA;YAEjCH,WAAW,uJACbtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOiB,KAAAA,CAAMnF,QAAQqpB,QAAQ,CAAC,IAC/CJ,WAAW,sJACpBtP,aAAAA,CAAWsP,MAAAA,CAAOjpB,qJAAQkE,SAAAA,CAAOsB,GAAAA,CAAIxF,QAAQqpB,QAAQ,CAAC;QAE1D;IAqHJ;AAEJ;AChZO,MAAMY,sCAETA,CAAC,EAAC/Q,SAAAA,EAAS,KAAM;IACnBS,4IAAAA,CAAAA,aAAAA,CAAWuQ,IAAAA,CAAKhR,UAAUlZ,MAAAA,EAAQ;QAChCuoB,MAAM;QACN4B,UAAUjR,UAAUiR,QAAAA;QACpBzP,SAAS,CAAA;IAAA,CACV;AACH,GCPa0P,mCAETA,CAAC,EAAClR,SAAAA,EAAS,KAAM;IACnB,MAAMmR,4MAAYnhB,gCAAAA,EAA8B;QAC9CtE,MAAMsU,UAAU9U,EAAAA;IAElB,CAAC;IAED,IAAI,CAACimB,WACH,MAAM,IAAInnB,MAAM,8CAA8C;IAGhE,MAAMonB,mBAAmBpR,UAAUlZ,MAAAA,CAAO0M,aAAAA,CAAcC,GAAAA,CAAI0d,SAAS;IAErE,IAAIC,qBAAqB5mB,KAAAA,GACvB,MAAM,IAAIR,MAAM,0CAA0C;IAG5D,MAAMqnB,iNAAiBrhB,gCAAAA,EAA8B;QACnDtE,MAAMsU,UAAUsR,EAAAA;IAElB,CAAC;IAED,IAAI,CAACD,gBACH,MAAM,IAAIrnB,MAAM,8CAA8C;IAGhE,MAAMunB,wBACJvR,UAAUlZ,MAAAA,CAAO0M,aAAAA,CAAcC,GAAAA,CAAI4d,cAAc;IAEnD,IAAIE,0BAA0B/mB,KAAAA,GAC5B,MAAM,IAAIR,MAAM,0CAA0C;IAG5DyW,4IAAAA,CAAAA,aAAAA,CAAW+Q,SAAAA,CAAUxR,UAAUlZ,MAAAA,EAAQ;QACrCoE,IAAI;YAACkmB,gBAAgB;SAAA;QACrBE,IAAI;YAACC,qBAAqB;SAAA;QAC1B7jB,MAAM;IAAA,CACP;AACH,GCxCa+jB,qCAETA,CAAC,EAACzR,SAAAA,EAAS,KAAM;IACnBS,4IAAAA,CAAAA,aAAAA,CAAWuQ,IAAAA,CAAKhR,UAAUlZ,MAAAA,EAAQ;QAChCuoB,MAAM;QACN4B,UAAUjR,UAAUiR,QAAAA;IAAAA,CACrB;AACH,GCNaS,gCAETA,CAAC,EAACjiB,OAAAA,EAASuQ,SAAAA,EAAS,KAAM;IAC5B,MAAMoO,eAAejc,aAAa;QAChC1C,SAAS;YACPrC,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAO+X,UAAUlZ,MAAAA,CAAOmB,KAAAA;YACxBsD,WAAWyU,UAAU9U,EAAAA;QAAAA;QAEvBsI,eAAewM,UAAUlZ,MAAAA,CAAO0M,aAAAA;IAAAA,CACjC;IAEG4a,4JACF3N,aAAAA,CAAWsP,MAAAA,CAAO/P,UAAUlZ,MAAAA,EAAQsnB,YAAY,iJAEhD3N,aAAAA,CAAWmJ,QAAAA,CAAS5J,UAAUlZ,MAAM;AAExC,GCoCM6qB,mCAAqE;IACzE,kBAAkBpG;IAClB,qBAAqBS;IACrB,aAAaQ;IACb,eAAeK;IACf,aAAaO;IACb,eAAeK;IACf,iBAAiBI;IACjB,oBAAoB3H;IACpB,QAAUyI;IACV,gBAAgB7E;IAChB,gBAAgBb;IAChB,gBAAgB0G;IAChB,wBAAwBL;IACxB,eAAeI;IACf,eAAe3P;IACf,iBAAiBgR;IACjB,cAAcG;IACd,gBAAgBO;IAChB,QAAUC;AACZ;AAEO,SAASE,iBAAiB,EAC/BniB,OAAAA,EACAuQ,SAAAA,EAIF,EAAG;IACD,IAAI;QACF,OAAQA,UAAUzI,IAAAA,EAAAA;YAChB,KAAK;gBAAkB;oBACrBoa,gCAAAA,CAAiC,gBAAgB,CAAA,CAAE;wBACjDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAqB;oBACxB2R,gCAAAA,CAAiC,mBAAmB,CAAA,CAAE;wBACpDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAa;oBAChB2R,gCAAAA,CAAiC,WAAW,CAAA,CAAE;wBAC5CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAe;oBAClB2R,gCAAAA,CAAiC,aAAa,CAAA,CAAE;wBAC9CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAa;oBAChB2R,gCAAAA,CAAiC,WAAW,CAAA,CAAE;wBAC5CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAe;oBAClB2R,gCAAAA,CAAiC,aAAa,CAAA,CAAE;wBAC9CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAiB;oBACpB2R,gCAAAA,CAAiC,eAAe,CAAA,CAAE;wBAChDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAoB;oBACvB2R,gCAAAA,CAAiC,kBAAkB,CAAA,CAAE;wBACnDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAU;oBACb2R,iCAAiCvC,MAAAA,CAAO;wBACtC3f;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAgB;oBACnB2R,gCAAAA,CAAiC,cAAc,CAAA,CAAE;wBAC/CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAgB;oBACnB2R,gCAAAA,CAAiC,cAAc,CAAA,CAAE;wBAC/CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAgB;oBACnB2R,gCAAAA,CAAiC,cAAc,CAAA,CAAE;wBAC/CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAwB;oBAC3B2R,gCAAAA,CAAiC,sBAAsB,CAAA,CAAE;wBACvDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAe;oBAClB2R,gCAAAA,CAAiC,aAAa,CAAA,CAAE;wBAC9CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAe;oBAClB2R,gCAAAA,CAAiC,aAAa,CAAA,CAAE;wBAC9CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAiB;oBACpB2R,gCAAAA,CAAiC,eAAe,CAAA,CAAE;wBAChDliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAc;oBACjB2R,gCAAAA,CAAiC,YAAY,CAAA,CAAE;wBAC7CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA,KAAK;gBAAgB;oBACnB2R,gCAAAA,CAAiC,cAAc,CAAA,CAAE;wBAC/CliB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;YACA;gBAAS;oBACP2R,iCAAiC5B,MAAAA,CAAO;wBACtCtgB;wBACAuQ;oBAAAA,CACD;oBACD;gBACF;QAAA;IAEJ,EAAA,OAAS/G,OAAO;QACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,WAAA,EAAcgW,UAAUzI,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EAC/D,CACF;IACF;AACF;AClOA,MAAMC,uBAAAA,aAAAA,GAAAA,IAAgE1d,QAAAA;AAE/D,SAAS2d,+BAA+BjrB,MAAAA,EAAgBib,EAAAA,EAAgB;IAC7E+P,qBAAqBlS,GAAAA,CAAI9Y,QAAQ8O,oBAAAA,CAAqB,gJACtD5K,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQib,EAAE,GACpC+P,qBAAqBlS,GAAAA,CAAI9Y,QAAQ0D,KAAAA,CAAS;AAC5C;AAEO,SAASwnB,sBAAsBlrB,MAAAA,EAAgB;IACpD,OAAOgrB,qBAAqBre,GAAAA,CAAI3M,MAAM;AACxC;AAEO,SAASmrB,6BAA6BnrB,MAAAA,EAAgB;IAC3D,OAAOkrB,sBAAsBlrB,MAAM,MAAM0D,KAAAA;AAC3C;ACVO,SAAS0nB,yBAAyBljB,WAAAA,EAA0B;IACjE,OAAO,SAA4BlI,MAAAA,EAAgB;QACjD,IAAIkI,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQ0iB,SAAAA,KAAc3nB,KAAAA,GAClD,OAAO1D;QAGT,MAAM,EAACsoB,QAAQgD,YAAAA,EAAcrC,MAAAA,EAAAA,GAAUjpB;QAEvCA,OAAAA,OAAOsoB,MAAAA,GAAU7R,CAAAA,YAAY;YAC3B,IAAI0U,6BAA6BnrB,MAAM,GAAG;gBACxCsrB,aAAa7U,OAAO;gBACpB;YACF;YAEA,MAAMrS,KAAKqS,SAASrS,MAAMpE,OAAOyE,SAAAA;YAEjC,IAAI,CAACL,IAAI;gBACP+G,QAAQgH,KAAAA,CAAM,qDAAqD;gBACnE;YACF;YAEA,MAAM1K,qJAAQvD,SAAAA,CAAOuD,KAAAA,CAAMzH,QAAQoE,EAAE,GAE/BK,YAAY+C,sBAAsB;gBACtClB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;gBAC1CtG;gBACAyH;YAAAA,CACD;YAED,IAAI,CAAChD,WAAW;gBACd0G,QAAQgH,KAAAA,CACN,0DACF;gBACA;YACF;YAEAjK,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNrM,IAAIK;oBACJgI,WAAWgK,SAASiE,UAAU,aAAa;oBAC3C6N,MAAM9R,SAAS8R;gBAAAA;gBAEjBvoB;YAAAA,CACD;QACH,GAEAA,OAAOwrB,cAAAA,GAAkBjD,CAAAA,SAAS;YAChC,IAAI4C,6BAA6BnrB,MAAM,GAAG;gBACxCmL,QAAQgH,KAAAA,CAAM,yCAAyC;gBACvD;YACF;YAEAjK,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACN8X;gBAAAA;gBAEFvoB;YAAAA,CACD;QAEH,GAEAA,OAAOyrB,aAAAA,GAAiBlD,CAAAA,SAAS;YAC/B,IAAI4C,6BAA6BnrB,MAAM,GAAG;gBACxCmL,QAAQgH,KAAAA,CAAM,wCAAwC;gBACtD;YACF;YAEAjK,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACN8X;gBAAAA;gBAEFvoB;YAAAA,CACD;QAEH,GAEAA,OAAO0rB,WAAAA,GAAc,MAAM;YACzB,IAAIP,6BAA6BnrB,MAAM,GAAG;gBACxCmL,QAAQgH,KAAAA,CAAM,sCAAsC;gBACpD;YACF;YAEAjK,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QAEH,GAEAA,OAAO2rB,UAAAA,GAAcC,CAAAA,iBAAiB;YACpC,IAAIT,6BAA6BnrB,MAAM,GAAG;gBACxCmL,QAAQgH,KAAAA,CAAM,qCAAqC;gBACnD;YACF;YAEAjK,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNmF,aAAa;wBACXgW;oBAAAA;gBACF;gBAEF5rB;YAAAA,CACD;QACH,GAEAA,OAAO6rB,eAAAA,GAAkB,MAAM;YAC7B,IAAIV,6BAA6BnrB,MAAM,GAAG;gBACxCiZ,kCAAkC;oBAChCtQ,SAAS;wBACPyO,cAAclP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;wBAChD9Q,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAAAA;oBAE5C4S,WAAW;wBAAsBxW,MAAM,CAAA;AAAA,CAAA;wBAAM1C;oBAAAA;gBAAM,CACpD;gBACD;YACF;YAEAkI,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QAEH,GAEAA,OAAO4Z,UAAAA,GAAclX,CAAAA,SAAS;YAC5B,IAAIyoB,6BAA6BnrB,MAAM,GAAG;gBACxCiZ,kCAAkC;oBAChCtQ,SAAS;wBACPyO,cAAclP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;wBAChD9Q,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAAAA;oBAE5C4S,WAAW;wBAAsBxW;wBAAM1C;oBAAAA;gBAAM,CAC9C;gBACD;YACF;YAEAkI,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACN/N;gBAAAA;gBAEF1C;YAAAA,CACD;QAEH,GAEAA,OAAO8rB,IAAAA,GAAO,MAAM;YAClB,IAAIX,6BAA6BnrB,MAAM,GAAG;gBACxC8qB,iBAAiB;oBACfniB,SAAS;wBACPyO,cAAclP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;wBAChD9Q,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAAAA;oBAE5C4S,WAAW;wBACTzI,MAAM;wBACNzQ;oBAAAA;gBACF,CACD;gBACD;YACF;YAEAkI,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QAEH,GAEAA,OAAOipB,MAAAA,GAAUtD,CAAAA,aAAa;YAC5B,IAAIwF,6BAA6BnrB,MAAM,GAAG;gBACxCipB,OAAOtD,QAAQ;gBACf;YACF;YAEA,MAAMle,qJAAQvD,SAAAA,CAAOuD,KAAAA,CAAMzH,QAAQ2lB,QAAQ;YAE3Czd,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNrM,IAAIoD,sBAAsB;wBACxBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;wBAC1CtG;wBACAyH;oBAAAA,CACD;gBAAA;gBAEHzH;YAAAA,CACD;QAEH,GAEAA,OAAO+rB,eAAAA,GAAkB,MAAM;YAC7B5gB,QAAQgH,KAAAA,CAAM,0CAA0C;QAE1D,GAEAnS,OAAOgsB,IAAAA,GAAO,MAAM;YAClB,IAAIb,6BAA6BnrB,MAAM,GAAG;gBACxC8qB,iBAAiB;oBACfniB,SAAS;wBACPyO,cAAclP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;wBAChD9Q,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAAAA;oBAE5C4S,WAAW;wBACTzI,MAAM;wBACNzQ;oBAAAA;gBACF,CACD;gBACD;YACF;YAEAkI,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QAEH,GAEOA;IACT;AACF;AC/OO,SAASisB,oBAAoB/jB,WAAAA,EAA0B;IAC5D,OAAO,SACLlI,MAAAA,EACyB;QACzB,MAAM,EAACwc,OAAAA,MAAAA,EAAAA,GAASxc;QAChBA,OAAAA,OAAOwc,KAAAA,GAAStD,CAAAA,cAAc;YAC5B,IAAIhR,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjEkU,OAAMtD,SAAS;gBACf;YACF;YAMA,IAAIiC,mBAAmBnb,MAAM,GAAG;gBAC9Bwc,OAAMtD,SAAS;gBACf;YACF;YAMA,IAAIqC,UAAUvb,MAAM,KAAK0b,UAAU1b,MAAM,GAAG;gBAC1Cwc,OAAMtD,SAAS;gBACf;YACF;YAEA,MAAMgT,OAAOhkB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQ0iB,SAAAA,IAAa,CAAA;YACxDa,OAAO,KAAKlsB,OAAOqC,QAAAA,CAASsB,MAAAA,IAAUuoB,QAAAA,CAErChT,UAAUzI,IAAAA,KAAS,iBAClByI,UAAUzI,IAAAA,KAAS,YAAA,KACrByI,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,KAK9B6Y,OAAMtD,SAAS;QACjB,GACOlZ;IACT;AACF;AC1CO,SAASmsB,qBAAqBjkB,WAAAA,EAA0B;IAC7D,OAAO,SACLlI,MAAAA,EACyB;QACzB,MAAM,EAACwc,OAAAA,MAAAA,EAAOC,aAAAA,EAAAA,GAAiBzc;QAK/BA,OAAAA,OAAOwc,KAAAA,GAAStD,CAAAA,cAAc;YAK5B,IAAIiC,mBAAmBnb,MAAM,GAAG;gBAC9Bwc,OAAMtD,SAAS;gBACf;YACF;YAMA,IAAIqC,UAAUvb,MAAM,KAAK0b,UAAU1b,MAAM,GAAG;gBAC1Cwc,OAAMtD,SAAS;gBACf;YACF;YAEA,IAAIA,UAAUzI,IAAAA,KAAS,cAAc;gBACnC,MAAM2b,eAAe,CAAC;oKAAGtmB,OAAAA,CAAKumB,WAAAA,CAAYrsB,MAAM,CAAC;iBAAA,CAAE0B,GAAAA,CACjD,CAAC,CAACgD,IAAI,CAAA,GAAMA,KAAKtD,IACnB;gBAEAob,OAAM;oBACJ,GAAGtD,SAAAA;oBACHqE,YAAY;wBACV,GAAGrE,UAAUqE,UAAAA;wBACbnc,MACE8X,UAAUqE,UAAAA,CAAWnc,IAAAA,KAASsC,KAAAA,KAC9B0oB,aAAalS,QAAAA,CAAShB,UAAUqE,UAAAA,CAAWnc,IAAI,IAC3C8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA,IAClC8B,UAAUqE,UAAAA,CAAWnc,IAAAA;oBAAAA;gBAC7B,CACD;gBAED;YACF;YAEA,IAAI8X,UAAUzI,IAAAA,KAAS,iBACjB,8IAACvM,SAAAA,CAAOqC,QAAAA,CAAS2S,UAAUxU,IAAI,GAAG;gBACpC,MAAM0nB,eAAe,CAAC;uBAAGtmB,oJAAAA,CAAKumB,WAAAA,CAAYrsB,MAAM,CAAC;iBAAA,CAAE0B,GAAAA,CACjD,CAAC,CAACgD,IAAI,CAAA,GAAMA,KAAKtD,IACnB;gBAEAob,OAAM;oBACJ,GAAGtD,SAAAA;oBACHxU,MAAM;wBACJ,GAAGwU,UAAUxU,IAAAA;wBACbtD,MACE8X,UAAUxU,IAAAA,CAAKtD,IAAAA,KAASsC,KAAAA,KACxB0oB,aAAalS,QAAAA,CAAShB,UAAUxU,IAAAA,CAAKtD,IAAI,IACrC8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA,IAClC8B,UAAUxU,IAAAA,CAAKtD,IAAAA;oBAAAA;gBACvB,CACD;gBAED;YACF;YAGFob,OAAMtD,SAAS;QACjB,GAEAlZ,OAAOyc,aAAAA,GAAiB6P,CAAAA,UAAU;YAChC,MAAM,CAAC5nB,MAAME,IAAI,CAAA,GAAI0nB;YACrB,IACEzpB,uJAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KACtBA,KAAK9C,KAAAA,KAAUsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EAC9D;gBAEA,IAAI,CAAC8D,KAAKtD,IAAAA,EAAM;oBACd8G,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;wBAACoB,MAAM8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;oBAAa,GACtD;wBAAChT,IAAIQ;oBAAAA,CACP,GACAsD,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;gBAEA,KAAA,MAAW,CAACnO,OAAO0K,SAAS,CAAA,IAAKlH,oJAAAA,CAAKzD,QAAAA,CAASrC,QAAQ4E,IAAI,EACzD,IAAI,CAACtC,MAAMlB,IAAAA,EAAM;oBACf8G,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;wBAACoB,MAAM8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;oBAAa,GACtD;wBAAChT,IAAI4I;oBAAAA,CACP,GACA9E,YAAYiJ,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YAEJ;YACAgM,cAAc6P,KAAK;QACrB,GAEOtsB;IACT;AACF;AC3FO,SAASusB,iBACdjmB,MAAAA,EAC4D;IAC5D,OAAO,CAACtG,QAAiC4f,UAA0B;QACjE,IAAI4M,UAAU,CAAA;QAEd,IAAI;YACF,OAAQ5M,MAAMnP,IAAAA,EAAAA;gBACZ,KAAK;oBACH+b,UAAUC,YAAYzsB,QAAQ4f,OAAOtZ,MAAM;oBAC3C;gBACF,KAAK;oBACHkmB,UAAUE,WAAW1sB,QAAQ4f,KAAK;oBAClC;gBACF,KAAK;oBACH4M,UAAUG,SAAS3sB,QAAQ4f,KAAK;oBAChC;gBACF,KAAK;oBACH4M,UAAUI,eAAe5sB,QAAQ4f,KAAK;oBACtC;YAAA;QAEN,EAAA,OAASiD,KAAK;YACZ1X,QAAQgH,KAAAA,CAAM0Q,GAAG;QACnB;QAEA,OAAO2J;IACT;AACF;AAEA,SAASI,eACP5sB,MAAAA,EAIA4f,KAAAA,EACS;IACT,MAAMje,QAAQkrB,UAAU7sB,OAAOqC,QAAAA,EAAUud,MAAMhb,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAGT,MAAMW,QAAQwqB,eAAenrB,OAAOie,MAAMhb,IAAI;IAa9C,IAXI,CAACtC,SAWD,CAAA,CANFX,SACA3B,OAAOoH,WAAAA,CAAYzF,MAAM+C,IAAI,KAC7Bkb,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,KACtBic,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,cAClBgb,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,MAAA,KAEa,CAAChB,oJAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GACtD,OAAO,CAAA;IAGT,MAAMmc,UAAU4C,MAAW7D,MAAMze,KAAK,GAChC,CAAC0lB,QAAQ,CAAA,GAAIkG,MAA2BlM,SAASve,MAAMoC,IAAAA,CAAKhC,IAAAA,EAAM;QACtEsqB,uBAAuB,CAAA;IAAA,CACxB,GACKjJ,SAAOkJ,kBAAkBC,KAAS5qB,MAAMoC,IAAAA,CAAKhC,IAAAA,EAAMmkB,QAAQ,GAAG,CAAC;IAErE,IAAIhf,SAAS;IACb,KAAA,MAAW,CAACyV,IAAI5a,IAAI,CAAA,IAAKqhB,OACnBzG,OAAO4G,cAAAA,CACTlkB,OAAOwc,KAAAA,CAAM;QACX/L,MAAM;QACN7L,MAAM;YAACjD,MAAMqiB,KAAAA;YAAO1hB,MAAM0hB,KAAK;SAAA;QAC/Bnc;QACAnF;IAAAA,CACD,GACDmF,UAAUnF,KAAKiB,MAAAA,IACN2Z,OAAO6G,cAChBnkB,OAAOwc,KAAAA,CAAM;QACX/L,MAAM;QACN7L,MAAM;YAACjD,MAAMqiB,KAAAA;YAAO1hB,MAAM0hB,KAAK;SAAA;QAC/Bnc;QACAnF;IAAAA,CACD,IACQ4a,OAAO8G,cAAAA,CAChBvc,UAAUnF,KAAKiB,MAAAA;IAInB,OAAO,CAAA;AACT;AAEA,SAAS8oB,YACPzsB,MAAAA,EACA4f,KAAAA,EACAtZ,MAAAA,EACA;IACA,MAAM3E,QAAQkrB,UAAU7sB,OAAOqC,QAAAA,EAAUud,MAAMhb,IAAI;IAMnD,IAJI,CAACjD,SAIDie,MAAMhb,IAAAA,CAAKjB,MAAAA,GAAS,KAAKic,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC7C,OAAO,CAAA;IAIT,IAAIgb,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,MAAM,EAACyf,OAAAA,MAAAA,EAAOzY,UAAAA,SAAAA,EAAAA,GAAYiV,OACpBuN,iBAAiB7rB,aACrB8hB,QACA;YAAC7hB,aAAa+E;QAAAA,GACdiH,qBAAqBZ,GAAAA,CAAI3M,MAAM,CACjC,GACMotB,mBAAmBzrB,MAAMqiB,KAAAA,EACzBqJ,iBACJ1iB,cAAa,UAAUyiB,mBAAmB,IAAIA,kBAE1CE,uBAAuB7pB,qBAAqBzD,OAAOqC,QAAAA,EAAUiE,MAAM;QAEzEqT,oJAAAA,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQmtB,gBAAgB;YAAC/oB,IAAI;gBAACipB,cAAa;aAAA;QAAA,CAAE,GAGlEC,wBACA,OAAO1N,MAAMhb,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzBgb,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,kJAElB+U,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;YAC7BoE,IAAI;gBAACuG,cAAa,WAAWyiB,mBAAmB,IAAIA,gBAAgB;aAAA;QAAA,CACrE,GAGI,CAAA;IACT;IAGA,MAAM,EAAChK,KAAAA,EAAOzY,QAAAA,EAAAA,GAAYiV,OAEpB2N,cAAcT,eAAenrB,OAAOie,MAAMhb,IAAI;IAEpD,IAAI,CAAC2oB,aACH,OAAO,CAAA;IAGT,MAAMC,mBAAmBlsB,aACvB;QAAC;YAAC,GAAGK,MAAM+C,IAAAA;YAAMrC,UAAU+gB;QAAAA,CAA6B;KAAA,EACxD;QAAC7hB,aAAa+E;IAAAA,GACdiH,qBAAqBZ,GAAAA,CAAI3M,MAAM,CACjC,GACMqtB,gBACJ1iB,aAAa,UAAU4iB,YAAYvJ,KAAAA,GAAQ,IAAIuJ,YAAYvJ,KAAAA,EACvDyJ,kBAAkB;QAAC9rB,MAAMqiB,KAAAA;QAAOqJ,aAAa;KAAA;IAEnD,OAAIG,iKAAoB3qB,UAAAA,CAAQC,SAAAA,CAAU0qB,gBAAAA,CAAiB,CAAC,CAAC,kJAC3D7T,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQwtB,gBAAAA,CAAiB,CAAC,CAAA,CAAEnrB,QAAAA,EAAU;QAC3D+B,IAAIqpB;IAAAA,CACL,GAGI,CAAA;AACT;AAEA,SAASd,SAAS3sB,MAAAA,EAAiC4f,KAAAA,EAAiB;IAClE,IAAIze,QAAQye,MAAMze,KAAAA;IACd,OAAOye,MAAMhb,IAAAA,CAAK,CAAC,CAAA,IAAM,YAAA,CAC3BzD,QAAQ,CAAA,GACRA,KAAAA,CAAMye,MAAMhb,IAAAA,CAAK,CAAC,CAAC,CAAA,GAAIgb,MAAMze,KAAAA;IAG/B,MAAMQ,QAAQkrB,UAAU7sB,OAAOqC,QAAAA,EAAUud,MAAMhb,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAGT,MAAMyF,eAAcpH,OAAOoH,WAAAA,CAAYzF,MAAM+C,IAAI;IAGjD,IAAI0C,gBAAewY,MAAMhb,IAAAA,CAAKjB,MAAAA,GAAS,KAAKic,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC5D,OAAO,CAAA;IAGT,MAAMtC,QAAQwqB,eAAenrB,OAAOie,MAAMhb,IAAI;IAG9C,IAAIwC,gBAAe9E,OAAO;QACxB,iJAAIsB,OAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GACxB,iJAAId,OAAAA,CAAKC,MAAAA,CAAO1C,KAAK,GAAG;YACtB,MAAMusB,UAAUprB,MAAMoC,IAAAA,CAAKhC,IAAAA,EACrBirB,UAAUxsB,MAAMuB,IAAAA;YAClBgrB,YAAYC,WAAAA,CACd3tB,OAAOwc,KAAAA,CAAM;gBACX/L,MAAM;gBACN7L,MAAM;oBAACjD,MAAMqiB,KAAAA;oBAAO1hB,MAAM0hB,KAAK;iBAAA;gBAC/Bnc,QAAQ;gBACRnF,MAAMgrB;YAAAA,CACP,GACD1tB,OAAOwc,KAAAA,CAAM;gBACX/L,MAAM;gBACN7L,MAAM;oBAACjD,MAAMqiB,KAAAA;oBAAO1hB,MAAM0hB,KAAK;iBAAA;gBAC/Bnc,QAAQ;gBACRnF,MAAMirB;YAAAA,CACP,GAGD3tB,OAAO+e,QAAAA,EAAAA;QAEX,OAAO;YAGL,MAAM6O,WAAWhO,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7BgpB,YAAYD,SAASxpB,EAAAA,CAAG,CAAC;YAO/B,IAJIypB,cAAcnqB,KAAAA,KAKhB,OAAOmqB,aAAc,YAPD;gBAAC;gBAAQ;gBAAS,MAAM;aAAA,CAQ9B3T,QAAAA,CAAS2T,SAAS,GAEhC,OAAO,CAAA;YAGT,MAAMjH,UAAUE,0KAAAA,EAASxkB,MAAMoC,IAAAA,EAAM;gBACnC;oBACE,GAAGkb,KAAAA;oBACHhb,MAAMgpB;gBAAAA,CACP;aACF;YAEDjU,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ4mB,SAAS;gBAACxiB,IAAI;oBAACzC,MAAMqiB,KAAAA;oBAAO1hB,MAAM0hB,KAAK;iBAAA;YAAA,CAAE;QACvE;aACK;YAGL,MAAM4J,WAAWhO,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7BipB,gBAAgB;gBAAC;gBAAQ;gBAAS;gBAAY,UAAU;aAAA,EACxDD,YAAYD,SAASxpB,EAAAA,CAAG,CAAC;YAM/B,IAJIypB,cAAcnqB,KAAAA,KAId,OAAOmqB,aAAc,YAAYC,cAAc5T,QAAAA,CAAS2T,SAAS,GACnE,OAAO,CAAA;YAKT,MAAM1sB,SACJ,WAAWmB,MAAMoC,IAAAA,IAAQ,OAAOpC,MAAMoC,IAAAA,CAAKvD,KAAAA,IAAU,WACjDmB,MAAMoC,IAAAA,CAAKvD,KAAAA,GACX,CAAA,GAEA0lB,0KAAWC,WAAAA,EAAS3lB,QAAO;gBAC/B;oBACE,GAAGye,KAAAA;oBACHhb,MAAMgb,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC;gBAAA,CACzB;aACF;YAED8U,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBAAC,GAAGsC,MAAMoC,IAAAA;gBAAMvD,OAAO0lB;YAAAA,GACvB;gBAACziB,IAAI;oBAACzC,MAAMqiB,KAAAA;oBAAO1hB,MAAM0hB,KAAK;iBAAA;YAAA,CAChC;QACF;QAEA,OAAO,CAAA;IACT,OAAA,iJAAWnhB,UAAAA,CAAQC,SAAAA,CAAUnB,MAAM+C,IAAI,KAAKkb,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACnE,MAAM,EAACtB,QAAAA,EAAU,GAAG0rB,UAAAA,GAAY5sB,OAC1B,EAACkB,UAAU2rB,YAAAA,EAAc,GAAGC,UAAAA,GAAYtsB,MAAM+C,IAAAA,IAAQ;YAC1DrC,UAAUqB,KAAAA;QAAAA;QAIZ1D,OAAOwc,KAAAA,CAAM;YACX/L,MAAM;YACN7L,MAAM;gBAACjD,MAAMqiB,KAAK;aAAA;YAClBzG,YAAY;gBAAC,GAAG0Q,QAAAA;YAAAA;YAChBzQ,eAAeuQ;QAAAA,CAChB;QAID,MAAMG,YAAYvsB,MAAM+C,IAAAA;QAExBwpB,UAAU7rB,QAAAA,CAASsS,OAAAA,CAAQ,CAACrS,QAAOsD,eAAe;YAChD5F,OAAOwc,KAAAA,CAAM;gBACX/L,MAAM;gBACN7L,MAAM;oBAACjD,MAAMqiB,KAAAA;oBAAOkK,UAAU7rB,QAAAA,CAASsB,MAAAA,GAAS,IAAIiC,UAAU;iBAAA;gBAC9DlB,MAAMpC;YAAAA,CACP;QACH,CAAC,GAEGd,MAAMC,OAAAA,CAAQY,QAAQ,KACxBA,SAASsS,OAAAA,CAAQ,CAACrS,QAAOsD,eAAe;YACtC5F,OAAOwc,KAAAA,CAAM;gBACX/L,MAAM;gBACN7L,MAAM;oBAACjD,MAAMqiB,KAAAA;oBAAOpe,UAAU;iBAAA;gBAC9BlB,MAAMpC;YAAAA,CACP;QACH,CAAC;IAEL,OAAA,IAAWX,SAAS,WAAWA,MAAM+C,IAAAA,EACnC,IAAIkb,MAAMhb,IAAAA,CAAKjB,MAAAA,GAAS,KAAKic,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,YAAY;QACzD,MAAMupB,wKAASrH,WAAAA,EAASnlB,MAAM+C,IAAAA,CAAKvD,KAAAA,EAAO;YACxC;gBACE,GAAGye,KAAAA;gBACHhb,MAAMgb,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC;YAAA,CACzB;SACF;QAED8U,4IAAAA,CAAAA,aAAAA,CAAWmD,QAAAA,CACT9c,QACA;YAAC,GAAG2B,MAAM+C,IAAAA;YAAMvD,OAAOgtB;QAAAA,GACvB;YAAC/pB,IAAI;gBAACzC,MAAMqiB,KAAK;aAAA;QAAA,CACnB;IACF,OACE,OAAO,CAAA;IAIX,OAAO,CAAA;AACT;AAEA,SAAS0I,WAAW1sB,MAAAA,EAAiC4f,KAAAA,EAAmB;IAEtE,IAAIA,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,MAAMyqB,oBAAoBpuB,OAAOyE,SAAAA;QACjCkV,4IAAAA,CAAAA,aAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM;QAE1B,MAAMqC,wJAAWyD,OAAAA,CAAKzD,QAAAA,CAASrC,QAAQ,CAAA,CAAA,EAAI;YACzC0a,SAAS,CAAA;QAAA,CACV;QAED,KAAA,MAAW,CAAC2T,GAAGzpB,IAAI,CAAA,IAAKvC,SACtBsX,4IAAAA,CAAAA,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;YAACoE,IAAIQ;QAAAA,CAAK;QAG3C+U,OAAAA,0JAAAA,CAAWQ,WAAAA,CAAYna,QAAQA,OAAOsuB,kBAAAA,CAAmB;YAACtU,YAAY,CAAA,CAAA;QAAA,CAAG,CAAC,GACtEoU,kKACFzU,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQ;YACxB2H,QAAQ;gBAAC/C,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;YAC/BlD,OAAO;gBAACC,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;QAAC,CAChC,GAGH7H,OAAO+e,QAAAA,CAAAA,GACA,CAAA;IACT;IAEA,MAAMpd,QAAQkrB,UAAU7sB,OAAOqC,QAAAA,EAAUud,MAAMhb,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAIT,IAAIie,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,IAAI3D,OAAOqC,QAAAA,CAASsB,MAAAA,KAAW,GAAG;YAGhC,MAAMyqB,oBAAoBpuB,OAAOyE,SAAAA;YAEjCkV,OAAAA,0JAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM,gJAC1B2Z,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;gBAACoE,IAAI;oBAACzC,MAAMqiB,KAAK;iBAAA;YAAA,CAAE,gJAClDrK,aAAAA,CAAWQ,WAAAA,CACTna,QACAA,OAAOsuB,kBAAAA,CAAmB;gBAACtU,YAAY,CAAA,CAAA;YAAA,CAAG,CAC5C,GAEIoU,kKACFzU,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQ;gBACxB2H,QAAQ;oBAAC/C,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBAAGiD,QAAQ;gBAAA;gBAC/BlD,OAAO;oBAACC,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBAAGiD,QAAQ;gBAAA;YAAC,CAChC,GAGH7H,OAAO+e,QAAAA,CAAAA,GAEA,CAAA;QACT;QAEApF,mJAAAA,cAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;YAACoE,IAAI;gBAACzC,MAAMqiB,KAAK;aAAA;QAAA,CAAE,GAE3C,CAAA;IACT;IAEA,MAAM1hB,QAAQwqB,eAAenrB,OAAOie,MAAMhb,IAAI;IAG9C,IAAI5E,OAAOoH,WAAAA,CAAYzF,MAAM+C,IAAI,KAAKpC,SAChCsd,MAAMhb,IAAAA,CAAK,CAAC,CAAA,KAAM,cAAcgb,MAAMhb,IAAAA,CAAKjB,MAAAA,KAAW,GACxDgW,oJAAAA,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;QAACoE,IAAI;YAACzC,MAAMqiB,KAAAA;YAAO1hB,MAAM0hB,KAAK;SAAA;IAAA,CAAE,GAExD,CAAA;IAIX,IAAI1hB,SAAS,8IAACsB,OAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GAAG;QAIrC,MAAMmpB,YADWjO,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC,EACRT,EAAAA,CAAG,CAAC;QAO/B,IAJIypB,cAAcnqB,KAAAA,KAId,OAAOmqB,aAAc,YANH;YAAC;YAAQ;YAAS;YAAY,UAAU;SAAA,CAMX3T,QAAAA,CAAS2T,SAAS,GAInE,OAAO,CAAA;QAGT,MAAM1sB,QACJ,WAAWmB,MAAMoC,IAAAA,IAAQ,OAAOpC,MAAMoC,IAAAA,CAAKvD,KAAAA,IAAU,WACjDmB,MAAMoC,IAAAA,CAAKvD,KAAAA,GACX,CAAA,GAEA0lB,YAAWC,yKAAAA,EAAS3lB,OAAO;YAC/B;gBACE,GAAGye,KAAAA;gBACHhb,MAAMgb,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC;YAAA,CACzB;SACF;QAED8U,OAAAA,0JAAAA,CAAWmD,QAAAA,CACT9c,QACA;YAAC,GAAGsC,MAAMoC,IAAAA;YAAMvD,OAAO0lB;QAAAA,GACvB;YAACziB,IAAI;gBAACzC,MAAMqiB,KAAAA;gBAAO1hB,MAAM0hB,KAAK;aAAA;QAAA,CAChC,GAEO,CAAA;IACT;IAEA,IAAI1hB,sJAASsB,OAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GAAG;QACpC,MAAMkpB,WAAWhO,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7BgpB,YAAYD,SAASxpB,EAAAA,CAAG,CAAC;QAO/B,IAJIypB,cAAcnqB,KAAAA,KAId,OAAOmqB,aAAc,YANH;YAAC;YAAQ,OAAO;SAAA,CAMa3T,QAAAA,CAAS2T,SAAS,GACnE,OAAO,CAAA;QAGT,IAAI,OAAOA,aAAc,YAAYA,cAAc,QACjD7tB,OAAAA,OAAOwc,KAAAA,CAAM;YACX/L,MAAM;YACN7L,MAAM;gBAACjD,MAAMqiB,KAAAA;gBAAO1hB,MAAM0hB,KAAK;aAAA;YAC/Bnc,QAAQ;YACRnF,MAAMJ,MAAMoC,IAAAA,CAAKhC,IAAAA;QAAAA,CAClB,GAEM,CAAA;QAGT,MAAMkkB,cAAUE,sKAAAA,EAASxkB,MAAMoC,IAAAA,EAAM;YACnC;gBACE,GAAGkb,KAAAA;gBACHhb,MAAMgpB;YAAAA,CACP;SACF,GACKW,UAAU9Z,OAAO+Z,IAAAA,CAAK5H,OAAO,GAE7B6H,oBAAoBha,OAAO+Z,IAAAA,CAAKlsB,MAAMoC,IAAI,EAAEiT,MAAAA,CAC/C+W,CAAAA,WAAa,CAACH,QAAQrU,QAAAA,CAASwU,QAAQ,CAC1C;QAEA/U,oJAAAA,aAAAA,CAAWgV,UAAAA,CAAW3uB,QAAQyuB,mBAAmB;YAC/CrqB,IAAI;gBAACzC,MAAMqiB,KAAAA;gBAAO1hB,MAAM0hB,KAAK;aAAA;QAAA,CAC9B,GAEM,CAAA;IACT;IAEA,IAAI,CAAC1hB,OAAO;QACV,IAAI,WAAWX,MAAM+C,IAAAA,EAAM;YACzB,MAAMypB,wKAASrH,WAAAA,EAASnlB,MAAM+C,IAAAA,CAAKvD,KAAAA,EAAO;gBACxC;oBACE,GAAGye,KAAAA;oBACHhb,MAAMgb,MAAMhb,IAAAA,CAAKC,KAAAA,CAAM,CAAC;gBAAA,CACzB;aACF;YAED8U,OAAAA,0JAAAA,CAAWmD,QAAAA,CACT9c,QACA;gBAAC,GAAG2B,MAAM+C,IAAAA;gBAAMvD,OAAOgtB;YAAAA,GACvB;gBAAC/pB,IAAI;oBAACzC,MAAMqiB,KAAK;iBAAA;YAAA,CACnB,GAEO,CAAA;QACT;QAEA,OAAO,CAAA;IACT;IAEA,OAAO,CAAA;AACT;AAEA,SAAS6I,UACPxqB,QAAAA,EACAuC,IAAAA,EAC+C;IAC/C,IAAIL,aAAa,CAAA;IAEjB,MAAM5C,QAAQU,SAASwJ,IAAAA,CAAK,CAACnH,MAAkBsf,UAAkB;QAC/D,MAAM4K,0MAAUC,iBAAAA,EAAejqB,IAAAA,CAAK,CAAC,CAAC,IAClCF,KAAKtD,IAAAA,KAASwD,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,GACtB4iB,UAAUpf,IAAAA,CAAK,CAAC,CAAA;QAEpB,OAAIgqB,WAAAA,CACFrqB,aAAayf,KAAAA,GAGR4K;IACT,CAAC;IAED,IAAKjtB,OAIL,OAAO;QAAC+C,MAAM/C;QAAOqiB,OAAOzf;IAAAA;AAC9B;AAEA,SAASuoB,eACPnrB,KAAAA,EACAiD,IAAAA,EAC+C;IAC/C,MAAMspB,YAAYvsB,MAAM+C,IAAAA;IAExB,IAAI,8IAAC7B,UAAAA,CAAQC,SAAAA,CAAUorB,SAAS,KAAKtpB,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC/C;IAGF,IAAIgB,aAAa,CAAA;IAEjB,MAAMtD,QAAQ4rB,UAAU7rB,QAAAA,CAASwJ,IAAAA,CAAK,CAACnH,MAAMsf,UAAkB;QAC7D,MAAM4K,0MAAUC,iBAAAA,EAAejqB,IAAAA,CAAK,CAAC,CAAC,IAClCF,KAAKtD,IAAAA,KAASwD,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,GACtB4iB,UAAUpf,IAAAA,CAAK,CAAC,CAAA;QAEpB,OAAIgqB,WAAAA,CACFhpB,aAAaoe,KAAAA,GAGR4K;IACT,CAAC;IAED,IAAKtsB,OAIL,OAAO;QACLoC,MAAMpC;QACN0hB,OAAOpe;IAAAA;AAEX;ACrjBO,SAASkpB,gBACdxoB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACA6V,WAAAA,EACc;IACd,MAAMptB,wMACJyF,cAAAA,EAAY;QAACd;IAAAA,GAASjE,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAC,KACjDvC,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC5B,IAAI,CAACjD,OACH,MAAM,IAAIuB,MAAM,sBAAsB;IAExC,MAAM8rB,4MACJ5nB,cAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,qMAC3BuL,SAAAA,EAAO;QAAC5G;IAAAA,GAAS3E,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAC,KACjDjD,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IACnC,IAAI,CAACoqB,WACH,MAAM,IAAI9rB,MAAM,sBAAsB;IAExC,MAAM0B,OAAa;QACjB;YAACxD,MAAMO,MAAMP,IAAAA;QAAAA;QACb;QACA;YAACA,MAAM4tB,UAAU5tB,IAAAA;QAAAA;QACjB,MAAM;KAAA,EAEF6tB,YAAYF,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EACzCsqB,4MACJ9nB,cAAAA,EAAY;QAACd;IAAAA,GAAS2oB,SAAS,KAAKA,UAAU5sB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EACpEuqB,2MAAWjiB,SAAAA,EAAO;QAAC5G;IAAAA,GAAS4oB,SAAS,IAAIA,UAAUxsB,IAAAA,GAAO,IAC1Dkd,QAAQgN,gLAAAA,EAAeuC,UAAUH,UAAUtsB,IAAAA,EAAMkC,IAAI;IAC3D,OAAOgb,MAAMze,KAAAA,CAAMwC,MAAAA,GAAS;QAACic,KAAK;KAAA,GAAI,CAAA,CAAA;AACxC;AAEO,SAASwP,gBACd9oB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACA6V,WAAAA,EACc;IACd,MAAMptB,QAAQU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IACxC,IAAI,CAACjD,OACH,MAAM,IAAIuB,MAAM,sBAAsB;IAExC,MAAMZ,wMACH8E,cAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,KAAKA,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,IACjElB,KAAAA,GACIsrB,4MAA0C9hB,SAAAA,EAAO;QAAC5G;IAAAA,GAAShE,KAAK,IAClEA,QACAoB,KAAAA;IACJ,IAAIpB,SAAS,CAAC0sB,WACZ,MAAM,IAAI9rB,MAAM,eAAe;IAEjC,IAAI,CAAC8rB,WACH,MAAM,IAAI9rB,MAAM,sBAAsB;IAExC,MAAM0B,OAAa;QACjB;YAACxD,MAAMO,MAAMP,IAAAA;QAAAA;QACb;QACA;YAACA,MAAM4tB,UAAU5tB,IAAAA;QAAAA;QACjB,MAAM;KAAA,EAEFiuB,cAAcN,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EAC3C0qB,gNACJloB,cAAAA,EAAY;QAACd;IAAAA,GAAS+oB,WAAW,KACjCA,YAAYhtB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EAClCuqB,2MAAWjiB,SAAAA,EAAO;QAAC5G;IAAAA,GAASgpB,aAAa,KAAKA,cAAc5sB,IAAAA,EAC5Dkd,uKAAQgN,iBAAAA,EAAeuC,YAAY,IAAIH,UAAUtsB,IAAAA,EAAMkC,IAAI;IACjE,OAAOgb,MAAMze,KAAAA,GAAQ;QAACye,KAAK;KAAA,GAAI,CAAA,CAAA;AACjC;AAEO,SAAS2P,aACdjpB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACc;IACd,IAAIA,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMhC,QAAQU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QACxC,IAAI,OAAOjD,MAAMP,IAAAA,IAAS,UACxB,MAAM,IAAI8B,MAAM,+BAA+B;QAEjD,MAAMssB,+IAAUC,UAAAA,EACd;YAAC,GAAGptB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;YAAG,GAAGsU,UAAUsE,aAAAA;QAAAA,yIAC9CkS,UACF;QACA,OAAO;YACL5W,qKAAAA,EAAI9V,eAAe;gBAACwsB,OAAO;aAAA,EAAGlpB,OAAO3E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA,EAAG;gBACnD;oBAACQ,MAAMO,MAAMP,IAAAA;gBAAAA,CAAK;aACnB,CAAC;SAAA;IAEN,OAAA,IAAW8X,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtC,MAAMhC,QAAQU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QACxC,oMAAIwC,cAAAA,EAAY;YAACd;QAAAA,GAAS3E,KAAK,GAAG;YAChC,MAAMW,QAAQX,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;YAC9C,IAAItC,OAAO;gBACT,MAAMqJ,WAAWhK,MAAMP,IAAAA,EACjBwK,WAAWtJ,MAAMlB,IAAAA,EACjByf,UAAmB,CAAA,CAAA,EACnB2N,OAAO/Z,OAAO+Z,IAAAA,CAAKtV,UAAUsE,aAAa;gBAChDgR,OAAAA,KAAK7Z,OAAAA,CAASgb,CAAAA,YAAY;oBAExB,IAAInB,KAAK7qB,MAAAA,KAAW,KAAKgsB,YAAY,QAAQ;wBAC3C,MAAMC,wIAAMjjB,UAAAA,EAAIuM,UAAUsE,aAAAA,EAAemS,OAAO;wBAChD9O,QAAQ7Y,IAAAA,gKACN8Q,MAAAA,EAAI8W,KAAK;4BACP;gCAACxuB,MAAMuK;4BAAAA;4BACP;4BACAhK,MAAMU,QAAAA,CAASwtB,OAAAA,CAAQvtB,KAAK;4BAC5BqtB,OAAO;yBACR,CACH;oBACF,OAAO;wBACL,MAAMC,MAAMjjB,4IAAAA,EAAIuM,UAAUsE,aAAAA,EAAemS,OAAO;wBAChD9O,QAAQ7Y,IAAAA,gKACN8Q,MAAAA,EAAI8W,KAAK;4BACP;gCAACxuB,MAAMuK;4BAAAA;4BACP;4BACA;gCAACvK,MAAMwK;4BAAAA;4BACP+jB,OAAO;yBACR,CACH;oBACF;gBACF,CAAC,GACM9O;YACT;YACA,MAAM,IAAI3d,MAAM,8BAA8B;QAChD;QACA,MAAM,IAAIA,MAAM,8BAA8B;IAChD,OACE,MAAM,IAAIA,MACR,CAAA,6BAAA,EAAgCgT,KAAKC,SAAAA,CAAU+C,UAAUtU,IAAI,CAAC,EAChE;AAEJ;AAEO,SAASkrB,gBACdxpB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACA6V,WAAAA,EACc;IACd,MAAMptB,QAAQotB,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC3C,IAAIsU,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMgH,WAAWuO,UAAUtU,IAAAA,CAAK,CAAC,CAAA,KAAM,IAAI,WAAW,SAChDyqB,cAAcN,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,EAC/CmrB,YAAY7W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,KAAM,IAAIjD,OAAOP,OAAOiuB,aAAajuB;QACvE,OAAI2uB,YACK;2KACLC,SAAAA,EACE;gBACEhtB,eACE;oBAACkW,UAAUxU,IAAI;iBAAA,EACf4B,OAAO3E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAC;aAAA,EAEN+J,UACA;gBAAC;oBAACvJ,MAAM2uB;gBAAAA,CAAU;aACpB,CAAC;SAAA,GAGE;2KACLE,eAAAA,EAAalB,aAAa,CAAA,CAAE;2KAC5BiB,SAAAA,EACE;gBAAChtB,eAAe;oBAACkW,UAAUxU,IAAI;iBAAA,EAAiB4B,OAAO3E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAC;aAAA,EACrE,UACA;gBAACsY,UAAUtU,IAAAA,CAAK,CAAC,CAAC;aACpB,CAAC;SAAA;IAEL,OAAA,oMACEwC,cAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,KAC3BuX,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,KAC1BtB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EAC1B;QACA,MAAM+F,WACJhJ,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAAK,CAAChC,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAChE,WACA,SACAF,OAAO;YAAC,GAAGwU,UAAUxU,IAAAA;QAAAA;QACvB,CAACA,KAAK9C,KAAAA,gJAASgC,QAAAA,CAAKC,MAAAA,CAAOa,IAAI,KAAA,CACjCA,KAAK9C,KAAAA,GAAQ,QACb8C,KAAK/B,KAAAA,GAAQ,CAAA,CAAA;QAYf,MAAML,QAVMU,eACV;YACE;gBACE5B,MAAM;gBACNQ,OAAO0E,OAAO3E,KAAAA,CAAMf,IAAAA;gBACpByB,UAAU;oBAACqC,IAAI;iBAAA;YAAA,CAChB;SAAA,EAEH4B,OAAO3E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA,CACeyB,QAAAA,CAAS,CAAC,CAAA;QAC5B,OAAO;0KACL2tB,UAAAA,EAAO;gBAAC1tB,KAAK;aAAA,EAAGqI,UAAU;gBACxB;oBAACvJ,MAAMO,MAAMP,IAAAA;gBAAAA;gBACb;gBACAO,MAAMU,QAAAA,CAASsB,MAAAA,IAAU,KAAK,CAAChC,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAC/D,IACA;oBAACxD,MAAMO,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,CAAExD,IAAAA;gBAAAA,CAAK;aACvD,CAAC;SAAA;IAEN;IACA,OAAO,CAAA,CAAA;AACT;AAEO,SAAS8uB,eACd5pB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACA6V,WAAAA,EACc;IACd,MAAMlO,UAAmB,CAAA,CAAA,EACnBsP,aAAa9tB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC7C,IAAI,iMAACwC,cAAAA,EAAY;QAACd;IAAAA,GAAS6pB,UAAU,GACnC,MAAM,IAAIjtB,MACR,CAAA,gBAAA,EAAmBgT,KAAKC,SAAAA,CACtB+C,UAAUtU,IAAAA,CAAK,CAAC,CAClB,CAAC,CAAA,uCAAA,CACH;IAEF,IAAIsU,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMysB,WAAWrB,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QAC9C,oMAAIwC,cAAAA,EAAY;YAACd;QAAAA,GAAS8pB,QAAQ,GAAG;YACnC,MAAMC,cAAcrtB,eAClB;gBAACX,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC;aAAA,EAChC0B,OAAO3E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA;YACCyvB,eAAAA,CACFxP,QAAQ7Y,IAAAA,KAAKgoB,oKAAAA,EAAO;gBAACK,WAAW;aAAA,EAAG,SAAS;gBAAC;oBAACjvB,MAAM+uB,WAAW/uB,IAAAA;gBAAAA,CAAK;aAAC,CAAC,GACjDgvB,SAAS/tB,QAAAA,CAASwC,KAAAA,CAAMqU,UAAUvO,QAAQ,EAClDgK,OAAAA,CAAS4C,CAAAA,SAAS;gBAC7B,MAAM3S,OAAO;oBAAC;wBAACxD,MAAMgvB,SAAShvB,IAAAA;oBAAAA;oBAAO;oBAAY;wBAACA,MAAMmW,KAAKnW,IAAAA;oBAAAA,CAAK;iBAAA;gBAClEyf,QAAQ7Y,IAAAA,gKAAKsoB,QAAAA,EAAM1rB,IAAI,CAAC;YAC1B,CAAC,CAAA;QAEL;QACA,OAAOic;IACT;IACA,IAAI3H,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAM4sB,YAAYJ,WAAW9tB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QACvD,oMAAIsI,SAAAA,EAAO;YAAC5G;QAAAA,GAASiqB,SAAS,GAAG;YAC/B,MAAMC,cACJxtB,eACE;gBACE;oBACE,GAAGmtB,UAAAA;oBACH9tB,UAAU8tB,WAAW9tB,QAAAA,CAASwC,KAAAA,CAC5BqU,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,GACpBsU,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CACtB;gBAAA,CACD;aAAA,EAEH0B,OAAO3E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA,CACHyB,QAAAA;YAEFwe,QAAQ7Y,IAAAA,gKACNgoB,SAAAA,EAAOQ,aAAa,SAAS;gBAC3B;oBAACpvB,MAAM+uB,WAAW/uB,IAAAA;gBAAAA;gBAClB;gBACA;oBAACA,MAAMmvB,UAAUnvB,IAAAA;gBAAAA,CAAK;aACvB,CACH,GACAyf,QAAQ7Y,IAAAA,CACN8Q,qKAAAA,EAAIyX,UAAU7tB,IAAAA,EAAM;gBAClB;oBAACtB,MAAM+uB,WAAW/uB,IAAAA;gBAAAA;gBAClB;gBACA;oBAACA,MAAMmvB,UAAUnvB,IAAAA;gBAAAA;gBACjB,MAAM;aACP,CACH;QACF;QACA,OAAOyf;IACT;IACA,OAAOA;AACT;AAEO,SAAS4P,gBACdnqB,MAAAA,EACAyoB,WAAAA,EACA7V,SAAAA,EACc;IACd,MAAMvX,QAAQotB,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC3C,IAAIsU,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAE/B,IAAIhC,SAASA,MAAMP,IAAAA,EACjB,OAAO;2KAACkvB,QAAAA,EAAM;gBAAC;oBAAClvB,MAAMO,MAAMP,IAAAA;gBAAAA,CAAK;aAAC,CAAC;SAAA;QAErC,MAAM,IAAI8B,MAAM,iBAAiB;IACnC,OAAA,oMAAWkE,cAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,KAAKuX,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtE,MAAM+sB,eAAe/uB,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QAErD,OAAI8rB,eACuB/uB,MAAMU,QAAAA,CAASsV,MAAAA,CACrCJ,CAAAA,OAASA,KAAKnW,IAAAA,KAAS8X,UAAUxU,IAAAA,CAAKtD,IACzC,EAEqBuC,MAAAA,GAAS,IAAA,CAC5BwH,QAAQC,IAAAA,CACN,CAAA,6BAAA,EAAgC8N,UAAUxU,IAAAA,CAAKtD,IAAI,CAAA,qCAAA,CAAA,EACnD8U,KAAKC,SAAAA,CAAUxU,OAAO,MAAM,CAAC,CAC/B,GACO,CAAA,CAAA,IAGF;2KACL2uB,QAAAA,EAAM;gBAAC;oBAAClvB,MAAMO,MAAMP,IAAAA;gBAAAA;gBAAO;gBAAY;oBAACA,MAAMsvB,aAAatvB,IAAAA;gBAAAA,CAAK;aAAC,CAAC;SAAA,GAG/D,CAAA,CAAA;IACT,OACE,OAAO,CAAA,CAAA;AAEX;AAEO,SAASuvB,eACdrqB,MAAAA,EACAjE,QAAAA,EACA6W,SAAAA,EACA6V,WAAAA,EACc;IACd,MAAMlO,UAAmB,CAAA,CAAA,EAEnBlf,QAAQotB,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EACrCihB,eAAexjB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;IAE/C,IAAIsU,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAC5B,IAAIhC,OAAOP,MAAM;QACf,MAAMwvB,WAAW5tB,eACf;YAACX,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC;SAAA,EAChC0B,OAAO3E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA;QACHigB,QAAQ7Y,IAAAA,gKAAK8Q,MAAAA,EAAI8X,UAAU;YAAC;gBAACxvB,MAAMwvB,SAASxvB,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACnDyf,QAAQ7Y,IAAAA,gKAAKsoB,QAAAA,EAAM;YAAC;gBAAClvB,MAAMO,MAAMP,IAAAA;YAAAA,CAAK;SAAC,CAAC;IAC1C,OACE,MAAM,IAAI8B,MAAM,uBAAuB;SAAA,mMAGzCkE,eAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,SAC3ByF,0MAAAA,EAAY;QAACd;IAAAA,GAASuf,YAAY,KAClC3M,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAC1B;QACA,MAAMktB,cACJhL,aAAaxjB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,oMAC3CsI,SAAAA,EAAO;YAAC5G;QAAAA,GAASuf,aAAaxjB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC,IACzDihB,aAAaxjB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAC3ClB,KAAAA,GACAotB,cACJnvB,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,oMAChCsI,SAAAA,EAAO;YAAC5G;QAAAA,GAAS3E,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAC,IAC9CjD,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,GAChClB,KAAAA;QAEFmtB,eAAAA,CACuBlvB,MAAMU,QAAAA,CAASsV,MAAAA,CACrCJ,CAAAA,OAASA,KAAKnW,IAAAA,KAASyvB,YAAYzvB,IACtC,EAEqBuC,MAAAA,KAAW,IAC9Bkd,QAAQ7Y,IAAAA,gKACN8Q,MAAAA,EAAI+X,YAAYnuB,IAAAA,EAAM;YACpB;gBAACtB,MAAMO,MAAMP,IAAAA;YAAAA;YACb;YACA;gBAACA,MAAMyvB,YAAYzvB,IAAAA;YAAAA;YACnB,MAAM;SACP,CACH,IAEA+J,QAAQC,IAAAA,CACN,CAAA,6BAAA,EAAgCylB,YAAYzvB,IAAI,CAAA,qCAAA,CAAA,EAChD8U,KAAKC,SAAAA,CAAUxU,OAAO,MAAM,CAAC,CAC/B,CAAA,GAIAmvB,eAAAA,CACuBnvB,MAAMU,QAAAA,CAASsV,MAAAA,CACrCJ,CAAAA,OAASA,KAAKnW,IAAAA,KAAS0vB,YAAY1vB,IACtC,EAEqBuC,MAAAA,KAAW,IAC9Bkd,QAAQ7Y,IAAAA,EACNsoB,sKAAAA,EAAM;YAAC;gBAAClvB,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAM0vB,YAAY1vB,IAAAA;YAAAA,CAAK;SAAC,CAClE,IAEA+J,QAAQC,IAAAA,CACN,CAAA,6BAAA,EAAgC0lB,YAAY1vB,IAAI,CAAA,qCAAA,CAAA,EAChD8U,KAAKC,SAAAA,CAAUxU,OAAO,MAAM,CAAC,CAC/B,CAAA;IAGN;IACA,OAAOkf;AACT;AAEO,SAASkQ,cACdzqB,MAAAA,EACAyoB,WAAAA,EACA7V,SAAAA,EACc;IACd,MAAM2H,UAAmB,CAAA,CAAA,EACnBlf,QAAQotB,WAAAA,CAAY7V,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EACrCoa,cAAc+P,WAAAA,CAAY7V,UAAUzN,OAAAA,CAAQ,CAAC,CAAC,CAAA;IAEpD,IAAI,CAACuT,aACH,OAAO6B;IAGT,IAAI3H,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMgH,WACJuO,UAAUtU,IAAAA,CAAK,CAAC,CAAA,GAAIsU,UAAUzN,OAAAA,CAAQ,CAAC,CAAA,GAAI,WAAW;QACxDoV,QAAQ7Y,IAAAA,gKAAKsoB,QAAAA,EAAM;YAAC;gBAAClvB,MAAMO,MAAMP,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACxCyf,QAAQ7Y,IAAAA,CACNgoB,wKAAAA,EAAO;YAAChtB,eAAe;gBAACrB,KAAK;aAAA,EAAG2E,OAAO3E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAC;SAAA,EAAG+J,UAAU;YAChE;gBAACvJ,MAAM4d,YAAY5d,IAAAA;YAAAA,CAAK;SACzB,CACH;IACF,OAAA,IACE8X,UAAUtU,IAAAA,CAAKjB,MAAAA,KAAW,qMAC1ByD,cAAAA,EAAY;QAACd;IAAAA,GAAS3E,KAAK,qMAC3ByF,cAAAA,EAAY;QAACd;IAAAA,GAAS0Y,WAAW,GACjC;QACA,MAAM1c,QAAQX,MAAMU,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA,EACxC2oB,cAAcvO,YAAY3c,QAAAA,CAAS6W,UAAUzN,OAAAA,CAAQ,CAAC,CAAC,CAAA,EACvDd,WACJuO,UAAUzN,OAAAA,CAAQ,CAAC,CAAA,KAAMuT,YAAY3c,QAAAA,CAASsB,MAAAA,GAAS,UAAU,UAC7DqtB,gBACJhuB,eAAe;YAACrB,KAAK;SAAA,EAAG2E,OAAO3E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA,CAC5CyB,QAAAA,CAAS6W,UAAUtU,IAAAA,CAAK,CAAC,CAAC,CAAA;QAC5Bic,QAAQ7Y,IAAAA,gKAAKsoB,QAAAA,EAAM;YAAC;gBAAClvB,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAMkB,MAAMlB,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACxEyf,QAAQ7Y,IAAAA,gKACNgoB,SAAAA,EAAO;YAACgB,aAAa;SAAA,EAAGrmB,UAAU;YAChC;gBAACvJ,MAAM4d,YAAY5d,IAAAA;YAAAA;YACnB;YACA;gBAACA,MAAMmsB,YAAYnsB,IAAAA;YAAAA,CAAK;SACzB,CACH;IACF;IACA,OAAOyf;AACT;AChdO,MAAMoQ,WAAAA,aAAAA,GAAAA,IAAqD3jB,QAAAA;AAE3D,SAAS4jB,gBAAgBlxB,MAAAA,EAAgBib,EAAAA,EAAsB;IACpE,MAAMC,OAAOiW,WAAWnxB,MAAM;IAC9BixB,SAASnY,GAAAA,CAAI9Y,QAAQ,CAAA,CAAK,GAC1Bib,MACAgW,SAASnY,GAAAA,CAAI9Y,QAAQkb,IAAI;AAC3B;AAEO,SAASiW,WAAWnxB,MAAAA,EAAqC;IAC9D,OAAOixB,SAAStkB,GAAAA,CAAI3M,MAAM;AAC5B;ACkBA,MAAMU,UAAQC,cAAc,oBAAoB;AASzC,SAASywB,kBAAkB,EAChClpB,WAAAA,EACAmpB,UAAAA,EACA1Q,aAAAA,EACO,EAAiE;IAGxE,IAAI2Q;IAEJ,MAAMC,aAAahF,iBAAiBrkB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAM;IAE5E,OAAO,SAAqBtG,MAAAA,EAAiC;QAC3DqN,6BAA6ByL,GAAAA,CAAI9Y,QAAQ,CAAA,CAAK,GAC9CixB,SAASnY,GAAAA,CAAI9Y,QAAQ,CAAA,CAAI,GACzBsxB,mBAAmB,CAAC;eAAGtxB,OAAOqC,QAAQ;SAAA;QAEtC,MAAM,EAACma,OAAAA,MAAAA,EAAAA,GAASxc;QAChB,IAAIwxB,kBAA2B,CAAA,CAAA;QAE/B,MAAMC,8BAA8BA,MAAM;YACxC,IAAID,gBAAgB7tB,MAAAA,KAAW,GAC7B;YAEF,MAAMkd,UAAU2Q;YAChBA,kBAAkB,CAAA,CAAA;YAClB,IAAIhF,UAAU,CAAA;YAEdxR,kBAAkBhb,QAAQ,MAAM;gBAC9BkE,4IAAAA,CAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQ,MAAM;oBACtCkxB,gBAAgBlxB,QAAQ,MAAM;wBAC5B4iB,cAAc5iB,QAAQ,MAAM;4BAC1B,KAAA,MAAW4f,SAASiB,QAAS;gCACvBngB,QAAMI,OAAAA,IACRJ,QAAM,CAAA,sBAAA,EAAyBwV,KAAKC,SAAAA,CAAUyJ,KAAK,CAAC,EAAE;gCAExD,IAAI;oCACF4M,UAAU+E,WAAWvxB,QAAQ4f,KAAK;gCACpC,EAAA,OAASzN,OAAO;oCACdhH,QAAQgH,KAAAA,CACN,CAAA,eAAA,EAAkB+D,KAAKC,SAAAA,CAAUyJ,KAAK,CAAC,CAAA,gBAAA,EAAmBzN,MAAM4Y,OAAO,EACzE;gCACF;4BACF;wBACF,CAAC;oBACH,CAAC;gBACH,CAAC,GACGyB,WAAAA,CACFxsB,OAAO0xB,SAAAA,CAAAA,GACP1xB,OAAO+e,QAAAA,EAAAA;YAEX,CAAC;QACH,GAEM4S,gBAAgBA,CAAC,EAAC9Q,OAAAA,EAAAA,KAAiC;YACvD,MAAMJ,gBAAgBI,QAAQlJ,MAAAA,CAAQia,CAAAA,IAAMA,EAAE7Q,MAAAA,KAAW,OAAO;YAC5DN,cAAc9c,MAAAA,KAAW,KAAA,CAG7B6tB,kBAAkBA,gBAAgBrkB,MAAAA,CAAOsT,aAAa,GACtDgR,6BAAAA;QACF;QAEA9Q,OAAAA,cAAc3Y,IAAAA,CAAK,MAAM;YACvBtH,QAAM,+BAA+B;YACrC,MAAMkgB,MAAM1Y,YAAYhI,EAAAA,CAAG,WAAWyxB,aAAa;YACnD,OAAO,MAAM;gBACXjxB,QAAM,iCAAiC,GACvCkgB,IAAItgB,WAAAA,CAAAA;YACN;QACF,CAAC,GAEDN,OAAOwc,KAAAA,GAAStD,CAAAA,cAAwC;YACtD,IAAI2H,UAAmB,CAAA,CAAA;YAGvByQ,mBAAmBtxB,OAAOqC,QAAAA;YAE1B,MAAMwvB,iBAAiBpuB,qBACrB6tB,kBACAppB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MACpC;YAGAkW,OAAMtD,SAAS;YAEf,MAAM4Y,gBAAgBruB,qBACpBzD,OAAOqC,QAAAA,EACP6F,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MACpC;YAEA,IAAI,CAAC6qB,WAAWnxB,MAAM,GACpB,OAKOA;YAYT,OAPE6xB,kBACA,CAACC,iBACD5Y,UAAUzI,IAAAA,KAAS,mBAEnBoQ,QAAQ7Y,IAAAA,CAAKgoB,wKAAAA,EAAOsB,kBAAkB,UAAU;gBAAC,CAAC;aAAC,CAAC,GAG9CpY,UAAUzI,IAAAA,EAAAA;gBAChB,KAAK;oBACHoQ,UAAU,CACR;2BAAGA,SACH;2BAAGiO,gBACD5mB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,WACAoY,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHzQ,UAAU,CACR;2BAAGA,SACH;2BAAGuO,gBACDlnB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,WACAoY,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHzQ,UAAU,CACR;2BAAGA,SACH;2BAAG4P,gBACDvoB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCgrB,kBACApY,SACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACH2H,UAAU,CACR;2BAAGA,SACH;2BAAGqP,eACDhoB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,WACAoY,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHzQ,UAAU,CACR;2BAAGA,SACH;2BAAGiP,gBACD5nB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,WACAoY,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHzQ,UAAU,CACR;2BAAGA,SACH;2BAAG0O,aACDrnB,YAAYG,WAAAA,GAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,SACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACH2H,UAAU,CACR;2BAAGA,SACH;2BAAG8P,eACDzoB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCtG,OAAOqC,QAAAA,EACP6W,WACAoY,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHzQ,UAAU,CACR;2BAAGA,SACH;2BAAGkQ,cACD7oB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,EAClCgrB,kBACApY,SACF,CAAC;qBAAA;oBAEH;YACF;YA6BF,IAvBE,CAAC2Y,kBACDC,iBACA;gBAAC;gBAAc;gBAAY;gBAAe,aAAa;aAAA,CAAE5X,QAAAA,CACvDhB,UAAUzI,IACZ,KAAA,CAEAoQ,UAAU,CAAC;mBAAGA;8KAASyP,SAAAA,EAAM,EAAE,CAAC;aAAA,EAChCe,WAAWlgB,IAAAA,CAAK;gBACdV,MAAM;gBACNshB,eAAe/uB,eACbsuB,kBACAppB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EAC/C4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC;YAAA,CACD,CAAA,GAIC6xB,kBAAkBhR,QAAQld,MAAAA,GAAS,KAAA,CACrCkd,UAAU;+KAACoP,eAAAA,EAAa,CAAA,CAAA,EAAI,CAAA,CAAE,GAAG;mBAAGpP,OAAO;aAAA,GAIzCA,QAAQld,MAAAA,GAAS,GACnB,KAAA,MAAWic,SAASiB,QAClB3Y,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACNmP,OAAO;oBAAC,GAAGA,KAAAA;oBAAOmB,QAAQ;gBAAA;gBAC1BiR,aAAa9G,sBAAsBlrB,MAAM;gBACzCmB,OAAOnB,OAAOmB,KAAAA;YAAAA,CACf;YAGL,OAAOnB;QACT,GACOA;IACT;AACF;AC9QA,MAAMU,UAAQC,cAAc,6BAA6B;AAMlD,SAASsxB,2BACd/pB,WAAAA,EAC8D;IAC9D,OAAO,SACLlI,MAAAA,EACyB;QACzB,MAAM,EAACwc,OAAAA,MAAAA,EAAAA,GAASxc;QAEhBA,OAAAA,OAAOwc,KAAAA,GAASc,CAAAA,OAAO;YACrB,IAAIpV,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjEkU,OAAMc,EAAE;gBACR;YACF;YAMA,IAAInC,mBAAmBnb,MAAM,GAAG;gBAC9Bwc,OAAMc,EAAE;gBACR;YACF;YAMA,IAAI/B,UAAUvb,MAAM,KAAK0b,UAAU1b,MAAM,GAAG;gBAC1Cwc,OAAMc,EAAE;gBACR;YACF;YAEA,IAAIA,GAAG7M,IAAAA,KAAS,eAAe;gBAC7B,MAAMlM,aAAa+Y,GAAG1Y,IAAAA,CAAKR,EAAAA,CAAG,CAAC,GACzB8tB,gBACJ5U,GAAG1Y,IAAAA,CAAKjB,MAAAA,KAAW,KACnBY,eAAe,KACfvE,OAAOqC,QAAAA,CAASsB,MAAAA,KAAW,GACvBwuB,gBACJ7U,GAAG5Y,IAAAA,CAAK9C,KAAAA,KAAUsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;gBAE/DsxB,iBAAiBC,iBAAAA,CACnBzxB,QAAM,0BAA0B,+IAChCwD,UAAAA,CAAOkuB,UAAAA,CAAWpyB,QAAQA,OAAOsuB,kBAAAA,CAAmB;oBAACtU,YAAY,CAAA,CAAA;gBAAA,CAAG,CAAC,CAAA;YAEzE;YAEAwC,OAAMc,EAAE;QACV,GAEOtd;IACT;AACF;AClDA,MAAMU,UAAQC,cAAc,wBAAwB;AAK7C,SAAS0xB,sBAAsB,EACpCnqB,WAAAA,EAGF,EAAG;IACD,OAAO,SACLlI,MAAAA,EACyB;QACzBA,OAAOoH,WAAAA,GAAejG,CAAAA,qJAChB+C,SAAAA,CAAOqC,QAAAA,CAASpF,KAAK,IAChB,CAAA,oMAGFiG,cAAAA,EAAYc,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAE7DnB,OAAO+E,UAAAA,GAAc5D,CAAAA,qJACf+C,SAAAA,CAAOqC,QAAAA,CAASpF,KAAK,IAChB,CAAA,oMAGF+L,SAAAA,EAAOhF,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAExDnB,OAAOsH,WAAAA,GAAenG,CAAAA,qJAChB+C,SAAAA,CAAOqC,QAAAA,CAASpF,KAAK,IAChB,CAAA,oMAGFmG,cAAAA,EAAYY,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAE7DnB,OAAOsyB,MAAAA,GAAU5rB,CAAAA,uJACXxC,SAAAA,CAAOqC,QAAAA,CAASG,OAAO,IAClB,CAAA,IAIPwB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,KAAS8F,QAAQ9E,KAAAA,IAAAA,CAC/DsG,YACEG,WAAAA,GACAM,OAAAA,CAAQrC,MAAAA,CAAOS,YAAAA,CAAarF,GAAAA,CAAK6wB,CAAAA,MAAQA,IAAI3xB,IAAI,EACjDsZ,QAAAA,CAASxT,QAAQ9E,KAAK,KACvBsG,YACGG,WAAAA,GACAM,OAAAA,CAAQrC,MAAAA,CAAOqM,aAAAA,CAAcjR,GAAAA,CAAK6wB,CAAAA,MAAQA,IAAI3xB,IAAI,EAClDsZ,QAAAA,CAASxT,QAAQ9E,KAAK,CAAA,GAG/B5B,OAAO8G,QAAAA,GAAYJ,CAAAA,uJACbxC,SAAAA,CAAOqC,QAAAA,CAASG,OAAO,IAClB,CAAA,IAGiBwB,YACvBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAOqM,aAAAA,CAAcjR,GAAAA,CAAK6wB,CAAAA,MAAQA,IAAI3xB,IAAI,EAEjCsZ,QAAAA,CAASxT,QAAQ9E,KAAK,KACxC,cAAc8E,WACdA,QAAQ9D,QAAAA,KAAa,CAAA;QAKzB,MAAM,EAAC6Z,aAAAA,EAAAA,GAAiBzc;QACxBA,OAAAA,OAAOyc,aAAAA,GAAiB6P,CAAAA,UAAU;YAChC,MAAM,CAAC5nB,MAAME,IAAI,CAAA,GAAI0nB;YAGrB,IAAI5nB,KAAK9C,KAAAA,KAAU8B,KAAAA,KAAakB,KAAKjB,MAAAA,KAAW,GAAG;gBACjDjD,QAAM,+CAA+C;gBACrD,MAAM6W,OAAO7S,MACPsL,MACJuH,KAAKnW,IAAAA,IAAQ8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;gBACjDlP,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,GACtCkJ,0JAAAA,CAAWmD,QAAAA,CACT9c,QACA;oBACE,GAAGuX,IAAAA;oBACH3V,OAAOsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA;oBACrDQ,MAAM4O;gBAAAA,GAER;oBAAC5L,IAAIQ;gBAAAA,CACP,GACAsD,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAGA,IAAI/L,KAAKtD,IAAAA,KAASsC,KAAAA,KAAAA,CAAckB,KAAKjB,MAAAA,KAAW,KAAKiB,KAAKjB,MAAAA,KAAW,CAAA,GAAI;gBACvEjD,QAAM,iDAAiD;gBACvD,MAAMsP,MAAM9H,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;gBAC9ClP,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,gJACtCkJ,aAAAA,CAAWmD,QAAAA,CAAS9c,QAAQ;oBAACoB,MAAM4O;gBAAAA,GAAM;oBAAC5L,IAAIQ;gBAAAA,CAAK,GACnDsD,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAEAgM,cAAc6P,KAAK;QACrB,GACOtsB;IACT;AACF;AC5GO,SAASwyB,gBAAgB,EAACtqB,WAAAA,EAAoB,EAAG;IACtD,OAAO,SACLlI,MAAAA,EACyB;QACzBA,OAAAA,OAAOsuB,kBAAAA,GAAsB7X,CAAAA,UAKbnV,aACZ;gBACE;oBACEM,OAAOsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBACtDQ,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;oBACxCnV,OACEiG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAOvD,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,IACnD;oBACF,GAAI6V,QAAQvP,QAAAA,GAAW;wBAACA,UAAUuP,QAAQvP,QAAAA;oBAAAA,IAAY,CAAA,CAAA;oBACtD,GAAIuP,QAAQ/C,KAAAA,GAAQ;wBAACA,OAAO+C,QAAQ/C,KAAAA;oBAAAA,IAAS,CAAA,CAAA;oBAC7CvR,UAAU,CAAA,CAAA;oBACVE,UAAU;wBACR;4BACET,OAAO;4BACPR,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;4BACxC1U,MAAM;4BACNC,OAAO8T,QAAQuD,UAAAA,CAAWrC,MAAAA,CAAQsC,CAAAA,YAChC/R,YACGG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnO,IAAAA,CACzB,CAAC,EAACjL,IAAAA,EAAAA,GAAUA,SAASqZ,SACvB,CACJ;wBAAA,CACD;qBAAA;gBAAA,CAEJ;aAAA,EAEH;gBAAC1Y,aAAa2G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YAAAA,CAClD,CAAA,CAAE,CAAC,CAAA,EAGEtG;IACT;AACF;ACjDO,SAASyyB,sBAAsB,EACpCzyB,MAAAA,EACAkI,WAAAA,EAIF,EAAG;IACD,MAAMwqB,kBAAkBA,MAAM;QAC5B,IAAI1yB,OAAOyE,SAAAA,EAAW;YACpB,MAAMkuB,oBAAoBllB,6BAA6Bd,GAAAA,CACrD3M,OAAOyE,SACT;YAEA,IAAIkuB,mBACFzqB,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACNhM,WAAWkuB;YAAAA,CACZ;iBACI;gBACL,MAAMluB,YAAY+C,sBAAsB;oBACtClB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CtG;oBACAyH,OAAOzH,OAAOyE,SAAAA;gBAAAA,CACf;gBAEDgJ,6BAA6BqL,GAAAA,CAAI9Y,OAAOyE,SAAAA,EAAWA,SAAS,GAE5DyD,YAAYiJ,IAAAA,CAAK;oBAACV,MAAM;oBAAoBhM;gBAAAA,CAAU;YACxD;QACF,OACEyD,YAAYiJ,IAAAA,CAAK;YAACV,MAAM;YAAoBhM,WAAW;QAAA,CAAK;IAEhE,GAEM,EAACsa,QAAAA,EAAAA,GAAY/e;IAEnBA,OAAAA,OAAO+e,QAAAA,GAAW,MAAM;QACtBA,YAEK7W,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;YAACC,OAAO;QAAA,CAAa,KAC1DmqB,gBAAAA;IAEJ,GAEO1yB;AACT;AChCO,SAAS4yB,aACdluB,IAAAA,EACmC;IACnC,OAAI,OAAOA,QAAS,YAAYA,SAAS,OAErC,CAAA,CAAE,WAAWA,IAAAA,KAAS,cAAcA,QAAQlD,MAAMC,OAAAA,CAAQiD,KAAKrC,QAAQ,IAIpE,CAAA;AACT;AAWO,SAASwwB,gBACdlqB,OAAAA,EACAjE,IAAAA,EACsC;IACtC,QAAOouB,+MAAAA,EAAcpuB,IAAI,KAAKA,KAAK9C,KAAAA,KAAU+G,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;AACpE;AAWO,SAASmyB,WACdpqB,OAAAA,EACAjE,IAAAA,EACiC;IAKjC,OAJI,OAAOA,QAAS,YAAYA,SAAS,QAIrC,cAAcA,OACT,CAAA,IAGL,WAAWA,OACNA,KAAK9C,KAAAA,KAAU+G,QAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA,GAGrC,UAAU8D;AACnB;AASO,SAASsuB,kBAAkBtuB,IAAAA,EAAwC;IACxE,OACE,OAAOA,QAAS,YAChBA,SAAS,QACT,UAAUA,QACV,OAAOA,KAAKhC,IAAAA,IAAS;AAEzB;AAUO,SAASuwB,aACdtqB,OAAAA,EACAjE,IAAAA,EACoB;IACpB,OACE,CAACkuB,aAAaluB,IAAI,KAClB,CAACmuB,gBAAgBlqB,SAASjE,IAAI,KAC9B,CAACquB,WAAWpqB,SAASjE,IAAI,KACzB,CAACsuB,kBAAkBtuB,IAAI;AAE3B;AAKO,SAASwuB,SACdC,IAAAA,EACAvuB,IAAAA,EACuD;IACvD,MAAMof,QAAQpf,KAAKR,EAAAA,CAAG,CAAC;IAEvB,IAAI4f,CAAAA,CAAAA,UAAUtgB,KAAAA,KAAakB,KAAKjB,MAAAA,KAAW,CAAA,GAI3C,OAAOwvB,KAAK9wB,QAAAA,CAAS+B,EAAAA,CAAG4f,KAAK;AAC/B;AASO,SAASoP,QACdzqB,OAAAA,EACAwqB,IAAAA,EACAvuB,IAAAA,EAC6C;IAC7C,IAAIA,KAAKjB,MAAAA,KAAW,GAClB,OAAOwvB;IAGT,IAAIvuB,KAAKjB,MAAAA,KAAW,GAClB,OAAOuvB,SAASC,MAAMvuB,IAAI;IAG5B,IAAIA,KAAKjB,MAAAA,KAAW,GAAG;QACrB,MAAMhC,QAAQuxB,SAASC,MAAMvuB,KAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC;QAE7C,OAAI,CAAClD,SAAS,CAACkxB,gBAAgBlqB,SAAShH,KAAK,IAC3C,KAAA,IAGYA,MAAMU,QAAAA,CAAS+B,EAAAA,CAAGQ,IAAAA,CAAK,CAAC,CAAC,KAGrC,KAAA;IAIJ;AACF;AAEO,SAASyuB,QACd1qB,OAAAA,EACAwqB,IAAAA,EACAvuB,IAAAA,EACA;IACA,MAAMF,OAAO0uB,QAAQzqB,SAASwqB,MAAMvuB,IAAI;IAExC,IAAIF,QAAQquB,WAAWpqB,SAASjE,IAAI,GAClC,OAAOA;AAIX;AAKO,SAAS4uB,UACd3qB,OAAAA,EACAwqB,IAAAA,EACAvuB,IAAAA,EACA;IACA,IAAIA,KAAKjB,MAAAA,KAAW,GAClB;IAGF,MAAM4vB,aAAa3uB,KAAKC,KAAAA,CAAM,GAAG,CAAA,CAAE;IAEnC,IAAI0uB,WAAW5vB,MAAAA,KAAW,GACxB,OAAOwvB;IAGT,MAAM5uB,aAAagvB,WAAWnvB,EAAAA,CAAG,CAAC;IAElC,IAAIG,eAAeb,KAAAA,KAAa6vB,WAAW5vB,MAAAA,KAAW,GACpD;IAGF,MAAMhC,QAAQwxB,KAAK9wB,QAAAA,CAAS+B,EAAAA,CAAGG,UAAU;IAEzC,IAAI5C,SAASkxB,gBAAgBlqB,SAAShH,KAAK,GACzC,OAAOA;AAIX;AC3LO,SAAS6xB,6BACd7qB,OAAAA,EACAxH,KAAAA,EACA+X,SAAAA,EACA;IACA,MAAMua,oJAAQC,cAAAA,EAAY;QAACrxB,UAAUlB;IAAAA,CAAM;IAE3C,IAAI;QACFwyB,kCAAkChrB,SAAS8qB,OAAOva,SAAS;IAC7D,EAAA,OAAS0a,GAAG;QACVzoB,QAAQgH,KAAAA,CAAMyhB,CAAC;IACjB;IAEA,mJAAOC,cAAAA,EAAYJ,KAAK,EAAEpxB,QAAAA;AAC5B;AAEA,SAASsxB,kCACPhrB,OAAAA,EACAwqB,IAAAA,EAGAja,SAAAA,EACA;IACA,OAAQA,UAAUzI,IAAAA,EAAAA;QAChB,KAAK;YAAe;gBAClB,MAAM,EAAC7L,IAAAA,EAAMF,MAAMovB,YAAAA,EAAAA,GAAgB5a,WAC7BvS,SAAS2sB,UAAU3qB,SAASwqB,MAAMvuB,IAAI,GACtCof,QAAQpf,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAMlC,IAJI,CAACgD,UAIDqd,QAAQrd,OAAOtE,QAAAA,CAASsB,MAAAA,EAC1B;gBAGF,IAAIiB,KAAKjB,MAAAA,KAAW,GAAG;oBAGrB,IAAIkvB,gBAAgBlqB,SAASmrB,YAAY,GAAG;wBAG1CntB,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,GAAG;4BAC/B,GAAG8P,YAAAA;4BACHzxB,UAAUyxB,aAAazxB,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,QAC/B,cAAcA,QAGT;oCACLlB,MAAMkB,MAAMlB,IAAAA;oCACZQ,OAAOU,MAAMV,KAAAA;oCACb,GAAI,WAAWU,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAC3CmB,MAAMnB,KAAAA,GACN,CAAA,CAAA;gCAAC,IAIFmB,KACR;wBAAA,CACF;wBAED;oBACF;oBAEA,iJAAIO,UAAAA,CAAQC,SAAAA,CAAUgxB,YAAY,KAAK,CAAA,CAAE,cAAcA,YAAAA,GAAe;wBAGpEntB,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,GAAG;4BAC/B5iB,MAAM0yB,aAAa1yB,IAAAA;4BACnBQ,OAAOkyB,aAAalyB,KAAAA;4BACpB,GAAI,WAAWkyB,gBACf,OAAOA,aAAa3yB,KAAAA,IAAU,WAC1B2yB,aAAa3yB,KAAAA,GACb,CAAA,CAAA;wBAAC,CACN;wBACD;oBACF;gBACF;gBAEA,IAAIyD,KAAKjB,MAAAA,KAAW,GAAG;oBAGrB,IAAI,CAACkvB,gBAAgBlqB,SAAShC,MAAM,GAElC;oBAGF,IAAIqsB,kBAAkBc,YAAY,GAAG;wBAGnCntB,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,GAAG8P,YAAY;wBAC7C;oBACF;oBAEA,IAAI,cAAcA,cAAc;wBAG9BntB,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,GAAG;4BAC/B5iB,MAAM0yB,aAAa1yB,IAAAA;4BACnBQ,OAAOkyB,aAAalyB,KAAAA;4BACpB,GAAI,WAAWkyB,gBACf,OAAOA,aAAa3yB,KAAAA,IAAU,WAC1B2yB,aAAa3yB,KAAAA,GACb,CAAA,CAAA;wBAAC,CACN;wBACD;oBACF;gBACF;gBAEA;YACF;QAEA,KAAK;YAAe;gBAClB,MAAM,EAACyD,IAAAA,EAAMiD,MAAAA,EAAQnF,IAAAA,EAAAA,GAAQwW;gBAC7B,IAAIxW,KAAKiB,MAAAA,KAAW,EAAG,CAAA;gBACvB,MAAM4T,OAAO8b,QAAQ1qB,SAASwqB,MAAMvuB,IAAI;gBAExC,IAAI,CAAC2S,MACH;gBAGF,MAAMwc,SAASxc,KAAK7U,IAAAA,CAAKmC,KAAAA,CAAM,GAAGgD,MAAM,GAClCmsB,QAAQzc,KAAK7U,IAAAA,CAAKmC,KAAAA,CAAMgD,MAAM;gBACpC0P,KAAK7U,IAAAA,GAAOqxB,SAASrxB,OAAOsxB;gBAE5B;YACF;QAEA,KAAK;YAAc;gBACjB,MAAM,EAACpvB,IAAAA,EAAAA,GAAQsU,WACTxU,OAAO0uB,QAAQzqB,SAASwqB,MAAMvuB,IAAI,GAClCqvB,wJAAWtZ,OAAAA,CAAKuZ,QAAAA,CAAStvB,IAAI,GAC7BsW,OAAOkY,QAAQzqB,SAASwqB,MAAMc,QAAQ,GACtCttB,SAAS2sB,UAAU3qB,SAASwqB,MAAMvuB,IAAI;gBAE5C,IAAI,CAACF,QAAQ,CAACwW,QAAQ,CAACvU,QACrB;gBAGF,MAAMqd,QAAQpf,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAIqvB,kBAAkBtuB,IAAI,KAAKsuB,kBAAkB9X,IAAI,GACnDA,KAAKxY,IAAAA,IAAQgC,KAAKhC,IAAAA;qBAAAA,IAElBmwB,gBAAgBlqB,SAASjE,IAAI,KAC7BmuB,gBAAgBlqB,SAASuS,IAAI,GAE7BA,KAAK7Y,QAAAA,CAAS2F,IAAAA,CAAK,GAAGtD,KAAKrC,QAAQ;qBAEnC;gBAGFsE,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,CAAC;gBAE/B;YACF;QAEA,KAAK;YAAa;gBAChB,MAAM,EAACpf,IAAAA,EAAM6G,OAAAA,EAAAA,GAAWyN;gBAExB,iJAAIyB,OAAAA,CAAKwZ,UAAAA,CAAWvvB,MAAM6G,OAAO,GAC/B;gBAGF,MAAM/G,OAAO0uB,QAAQzqB,SAASwqB,MAAMvuB,IAAI,GAClC+B,SAAS2sB,UAAU3qB,SAASwqB,MAAMvuB,IAAI,GACtCof,QAAQpf,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAI,CAACe,QAAQ,CAACiC,QACZ;gBASFA,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,OAAO,CAAC;gBAC/B,MAAMoQ,wJAAWzZ,OAAAA,CAAKgP,SAAAA,CAAU/kB,MAAMsU,SAAS,GACzCmb,YAAYjB,QAAQzqB,SAASwqB,kJAAMxY,QAAAA,CAAKhU,MAAAA,CAAOytB,QAAQ,CAAC,GACxDE,WAAWF,QAAAA,CAASA,SAASzwB,MAAAA,GAAS,CAAC,CAAA;gBAU7C,IARI,CAAC0wB,aAID,CAAA,CAAE,cAAcA,SAAAA,KAIhB,CAAC7yB,MAAMC,OAAAA,CAAQ4yB,UAAUhyB,QAAQ,GACnC;gBAGFgyB,UAAUhyB,QAAAA,CAAS8e,MAAAA,CAAOmT,UAAU,GAAG5vB,IAAI;gBAE3C;YACF;QAEA,KAAK;YAAe;gBAClB,MAAM,EAACE,IAAAA,EAAAA,GAAQsU,WACT8K,QAAQpf,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBACnB2vB,UAAU3qB,SAASwqB,MAAMvuB,IAAI,GACpCvC,SAAS8e,OAAO6C,OAAO,CAAC;gBAEhC;YACF;QAEA,KAAK;YAAe;gBAClB,MAAM,EAACpf,IAAAA,EAAMiD,MAAAA,EAAQnF,IAAAA,EAAAA,GAAQwW;gBAE7B,IAAIxW,KAAKiB,MAAAA,KAAW,GAClB;gBAGF,MAAM4T,OAAO8b,QAAQ1qB,SAASwqB,MAAMvuB,IAAI;gBAExC,IAAI,CAAC2S,MACH;gBAGF,MAAMwc,SAASxc,KAAK7U,IAAAA,CAAKmC,KAAAA,CAAM,GAAGgD,MAAM,GAClCmsB,QAAQzc,KAAK7U,IAAAA,CAAKmC,KAAAA,CAAMgD,SAASnF,KAAKiB,MAAM;gBAClD4T,KAAK7U,IAAAA,GAAOqxB,SAASC;gBAErB;YACF;QAEA,KAAK;YAAY;gBACf,MAAM,EAACpvB,IAAAA,EAAM2Y,UAAAA,EAAYC,aAAAA,EAAAA,GAAiBtE,WAEpCxU,OAAO0uB,QAAQzqB,SAASwqB,MAAMvuB,IAAI;gBAMxC,IAJI,CAACF,QAIDkuB,aAAaluB,IAAI,GACnB;gBAGF,IAAIuuB,aAAatqB,SAASjE,IAAI,GAAG;oBAC/B,MAAM6vB,cACJ,WAAWhX,cAAc,OAAOA,WAAWpc,KAAAA,IAAU,WACjDoc,WAAWpc,KAAAA,GACX,CAAA,GAEAqzB,aACJ,WAAWhX,iBAAiB,OAAOA,cAAcrc,KAAAA,IAAU,WACvDqc,cAAcrc,KAAAA,GACd,CAAA;oBAGN,IAAA,MAAW6O,OAAOwN,cAAe;wBAC/B,IAAIxN,QAAQ,SACV;wBAGF,MAAM7O,QAAQqc,aAAAA,CAAcxN,GAAG,CAAA;wBAE3B7O,SAAS,OACX,OAAOuD,IAAAA,CAA2CsL,GAAG,CAAA,GAErDtL,IAAAA,CAA2CsL,GAAG,CAAA,GAAI7O;oBAEtD;oBAEA,IAAA,MAAW6O,OAAOuN,WACZvN,QAAQ,WAAA,CAIPwN,cAAciX,cAAAA,CAAezkB,GAAG,KACnC,OAAOtL,IAAAA,CAA2CsL,GAAG,CAAA;oBAIzD,IAAA,MAAWA,OAAOwkB,WAAY;wBAC5B,MAAMrzB,QAAQqzB,UAAAA,CAAWxkB,GAAG,CAAA;wBAExB7O,SAAS,OACX,OAAOuD,IAAAA,CAA2CsL,GAAG,CAAA,GAErDtL,IAAAA,CAA2CsL,GAAG,CAAA,GAAI7O;oBAEtD;oBAEA,IAAA,MAAW6O,OAAOukB,YACXC,WAAWC,cAAAA,CAAezkB,GAAG,KAChC,OAAOtL,IAAAA,CAA2CsL,GAAG,CAAA;oBAIzD;gBACF;gBAEA,IAAI6iB,gBAAgBlqB,SAASjE,IAAI,GAAG;oBAClC,IAAA,MAAWsL,OAAOwN,cAAe;wBAC/B,IAAIxN,QAAQ,cAAcA,QAAQ,QAChC;wBAGF,MAAM7O,QAAQqc,aAAAA,CAAcxN,GAAG,CAAA;wBAE3B7O,SAAS,OACX,OAAOuD,IAAAA,CAA0BsL,GAAG,CAAA,GAEpCtL,IAAAA,CAA0BsL,GAAG,CAAA,GAAI7O;oBAErC;oBAGA,IAAA,MAAW6O,OAAOuN,WACXC,cAAciX,cAAAA,CAAezkB,GAAG,KACnC,OAAOtL,IAAAA,CAA0BsL,GAAG,CAAA;oBAIxC;gBACF;gBAEA,IAAIgjB,kBAAkBtuB,IAAI,GAAG;oBAC3B,IAAA,MAAWsL,OAAOwN,cAAe;wBAC/B,IAAIxN,QAAQ,QACV;wBAGF,MAAM7O,QAAQqc,aAAAA,CAAcxN,GAAG,CAAA;wBAE3B7O,SAAS,OACX,OAAOuD,IAAAA,CAA2CsL,GAAG,CAAA,GAErDtL,IAAAA,CAA2CsL,GAAG,CAAA,GAAI7O;oBAEtD;oBAGA,IAAA,MAAW6O,OAAOuN,WACXC,cAAciX,cAAAA,CAAezkB,GAAG,KACnC,OAAOtL,IAAAA,CAA2CsL,GAAG,CAAA;oBAIzD;gBACF;gBAEA;YACF;QAEA,KAAK;YAAc;gBACjB,MAAM,EAACpL,IAAAA,EAAM+F,QAAAA,EAAU4S,UAAAA,EAAAA,GAAcrE;gBAErC,IAAItU,KAAKjB,MAAAA,KAAW,GAClB;gBAGF,MAAMgD,SAAS2sB,UAAU3qB,SAASwqB,MAAMvuB,IAAI,GACtCof,QAAQpf,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAI,CAACgD,QACH;gBAGF,IAAIisB,aAAajsB,MAAM,GAAG;oBACxB,MAAMhF,QAAQuxB,SAASC,MAAMvuB,IAAI;oBAEjC,IAAI,CAACjD,SAAS,CAACkxB,gBAAgBlqB,SAAShH,KAAK,GAC3C;oBAGF,MAAMoyB,SAASpyB,MAAMU,QAAAA,CAASwC,KAAAA,CAAM,GAAG8F,QAAQ,GACzCqpB,QAAQryB,MAAMU,QAAAA,CAASwC,KAAAA,CAAM8F,QAAQ;oBAC3ChJ,MAAMU,QAAAA,GAAW0xB;oBAGjB,MAAMW,mBAAmB;wBACvB,GAAGnX,UAAAA;wBACHlb,UAAU2xB;wBACVpyB,OAAO+G,QAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAG9B+F,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,QAAQ,GAAG,GAAG0Q,gBAAgB;oBAErD;gBACF;gBAEA,IAAI7B,gBAAgBlqB,SAAShC,MAAM,GAAG;oBACpC,MAAMjC,OAAO0uB,QAAQzqB,SAASwqB,MAAMvuB,IAAI;oBAExC,IAAI,CAACF,QAAQ,CAACquB,WAAWpqB,SAASjE,IAAI,GACpC;oBAGF,MAAMqvB,SAASrvB,KAAKhC,IAAAA,CAAKmC,KAAAA,CAAM,GAAG8F,QAAQ,GACpCqpB,QAAQtvB,KAAKhC,IAAAA,CAAKmC,KAAAA,CAAM8F,QAAQ;oBACtCjG,KAAKhC,IAAAA,GAAOqxB;oBAGZ,MAAMY,cAAc;wBAClB,GAAGpX,UAAAA;wBACH7a,MAAMsxB;oBAAAA;oBAGRrtB,OAAOtE,QAAAA,CAAS8e,MAAAA,CAAO6C,QAAQ,GAAG,GAAG2Q,WAAW;gBAClD;gBAEA;YACF;IAAA;IAGF,OAAOxB;AACT;AC7aO,SAASyB,kBACdjsB,OAAAA,EACA3I,MAAAA,EACA;IACA,MAAM,EAACwc,OAAAA,MAAAA,EAAAA,GAASxc;IAEhBA,OAAAA,OAAOwc,KAAAA,GAAStD,CAAAA,cAAc;QAC5B,IAAIA,UAAUzI,IAAAA,KAAS,iBAAiB;YACtC+L,OAAMtD,SAAS;YACf;QACF;QAQA,IANAlZ,OAAOmB,KAAAA,GAAQqyB,6BACb7qB,SACA3I,OAAOmB,KAAAA,EACP+X,SACF,GAEIA,UAAUzI,IAAAA,KAAS,iBAAiByI,UAAUzI,IAAAA,KAAS,eAAe;YAGxE+L,OAAMtD,SAAS;YACf;QACF;QAEAP,eACE;YACErS,QAAQqC,QAAQrC,MAAAA;YAChBnF,OAAOnB,OAAOmB,KAAAA;QAAAA,GAEhB;YACEuL,eAAe1M,OAAO0M,aAAAA;YACtByG,cAAcnT,OAAOmT,YAAAA;QAAAA,CAEzB,GAEAqJ,OAAMtD,SAAS;IACjB,GAEOlZ;AACT;ACjBO,MAAM60B,cAAcA,CACzB70B,QACAyW,YAC4B;IAC5B,MAAMmd,IAAI5zB,QACJ,EAACkI,WAAAA,EAAampB,UAAAA,EAAAA,GAAc5a,SAC5Bqe,iBAAiB3I,qBAAqBjkB,WAAW,GACjD6sB,kBAAkB1C,sBAAsB;QAC5CnqB;IAAAA,CACD,GACK8sB,cAAc5D,kBAAkB;QACpClpB;QACAmpB;QACA1Q,eAAelK,QAAQkK,aAAAA;IAAAA,CACxB,GACKsU,gBAAgBhJ,oBAAoB/jB,WAAW,GAC/CgtB,eAAe3U,mBAAmB;QACtCrY;QACAyY,eAAelK,QAAQkK,aAAAA;IAAAA,CACxB,GACKwU,4BAA4B5Y,gCAAgCrU,WAAW,GAEvEktB,uBAAuBnD,2BAA2B/pB,WAAW,GAE7DmtB,YAAY7C,gBAAgB;QAChCtqB;IAAAA,CACD;IAID,OAH2BkjB,yBAAyBljB,WAAW,EAI7D6sB,gBACED,eACEK,0BACEC,qBACEC,UACEJ,cACEC,aACEF,YACEJ,kBACE1sB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAC1B8pB,sBAAsB;QACpBvqB;QACAlI,QAAQ4zB;IAAAA,CACT,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF;AACF,GCpEMlzB,UAAQC,cAAc,OAAO;AAa5B,SAAS20B,kBAAkB3lB,MAAAA,EAAwC;IACxEjP,QAAM,oCAAoC;IAE1C,MAAM4b,WAAWuY,sLAAYU,YAAAA,mJAAUC,eAAAA,CAAAA,CAAc,IAAG;QACtDttB,aAAayH,OAAOzH,WAAAA;QACpBmpB,YAAY1hB,OAAO0hB,UAAAA;QACnB1Q,eAAehR,OAAOgR,aAAAA;IAAAA,CACvB;IAEDnT,qBAAqBsL,GAAAA,CAAIwD,UAAU,CAAA,CAAE,GACrC/O,qBAAqBuL,GAAAA,CAAIwD,UAAU,CAAA,CAAE,GAErCA,SAASmZ,eAAAA,GAAkB,CAAA,CAAA,EAC3BnZ,SAASnD,cAAAA,GAAiB,CAAA;IAE1B,MAAMuc,mBAAmB1c,uBACvBrJ,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OACnC;IACA2T,SAASnb,KAAAA,GAAQ;QAACu0B,gBAAgB;KAAA,EAClCpZ,SAAS5P,aAAAA,GAAgB,aAAA,GAAA,IAAIgM,IAAAA,GAC7B4D,SAASnJ,YAAAA,GAAe,aAAA,GAAA,IAAIuF,IAAAA,GAE5BC,eACE;QACErS,QAAQqJ,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;QACjDnF,OAAOmb,SAASnb,KAAAA;IAAAA,GAElB;QACEuL,eAAe4P,SAAS5P,aAAAA;QACxByG,cAAcmJ,SAASnJ,YAAAA;IAAAA,CAE3B;IAEA,MAAMwiB,eAAer0B,aAAagb,SAASnb,KAAAA,EAAO;QAChDI,aAAaoO,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;IAAAA,CACvD;IAOD,OALiC;QAC/BgW;QACAqZ;IAAAA;AAIJ;AC3CO,SAASC,gBACdC,QAAAA,EACA1tB,WAAAA,EACW;IACX,OAAO;QACL2tB,eAAgB3pB,CAAAA,WAAa2pB,cAAc3tB,aAAagE,QAAQ;QAChE4pB,eAAgB5pB,CAAAA,WAAa4pB,cAAc5tB,aAAagE,QAAQ;QAChE6pB,cAAcA,CAAC,EAAC5tB,KAAAA,EAAO6tB,KAAAA,EAAAA,GAAWD,aAAa;gBAACH;gBAAUztB;gBAAO6tB;YAAAA,CAAM;IAAA;AAE3E;AAEA,SAASH,cACP3tB,WAAAA,EACAgE,QAAAA,EACA;IACA,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO,CAAA,CAAA;IAGT,MAAMgD,QAAQ4D,aAAac,QAAQ;IAEnC,IAAI,CAAC1E,OACH,OAAO,CAAA,CAAA;IAGT,IAAI;QASF,OARqBjG,MAAMyC,IAAAA,8IACzBC,SAAAA,CAAOC,KAAAA,CAAMgE,aAAa;YACxB/D,IAAIqD;YACJb,MAAM;YACNvC,OAAQC,CAAAA,IAAM,8IAACJ,SAAAA,CAAOqC,QAAAA,CAASjC,CAAC;QAAA,CACjC,CACH,EAEoB5C,GAAAA,CAAI,CAAC,CAACwsB,SAAS,CAAA,uJACjC/kB,YAAAA,CAAUM,SAAAA,CAAUtB,aAAa+lB,SAAS,CAC5C;IACF,EAAA,OAAQ;QACN,OAAO,CAAA,CAAA;IACT;AACF;AAEA,SAAS6H,cACP5tB,WAAAA,EACAgE,QAAAA,EACA;IACA,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO,CAAA,CAAA;IAGT,MAAMgD,QAAQ4D,aAAac,QAAQ;IAEnC,IAAI,CAAC1E,OACH,OAAO,CAAA,CAAA;IAGT,IAAI;QASF,OARqBjG,MAAMyC,IAAAA,8IACzBC,SAAAA,CAAOC,KAAAA,CAAMgE,aAAa;YACxB/D,IAAIqD;YACJb,MAAM;YACNvC,OAAQC,CAAAA,IAAM,8IAACJ,SAAAA,CAAOqC,QAAAA,CAASjC,CAAC;QAAA,CACjC,CACH,EAEoB5C,GAAAA,CAAI,CAAC,CAACw0B,SAAS,CAAA,uJACjC/sB,YAAAA,CAAUM,SAAAA,CAAUtB,aAAa+tB,SAAS,CAC5C;IACF,EAAA,OAAQ;QACN,OAAO,CAAA,CAAA;IACT;AACF;AAEA,SAASF,aAAa,EACpBH,QAAAA,EACAztB,KAAAA,EACA6tB,KAAAA,EASF,EAAG;IACD7tB,MAAMwN,WAAAA,CAAYgW,YAAAA,CAAauK,YAAAA,CAAaF,MAAMvvB,OAAAA,EAASuvB,MAAMG,CAAAA,EAAGH,MAAMI,CAAC,GAE3ER,SAAS;QACPplB,MAAM;QACNwlB,OAAOA,MAAMvvB,OAAAA;IAAAA,CACd;AACH;ACpHA,MAAM4vB,8MAAoCnmB,iBAAAA,EAAe;IACvDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,IAAI,iNAACqC,uBAAAA,EAA+BrC,QAAQ,GAC1C,OAAO,CAAA;QAGT,MAAMoqB,6OAAqB/nB,wBAAAA,EAAgCrC,QAAQ;QAEnE,OACE,CAACoqB,sBACD,iNAAC/nB,sBAAAA,EAA8B;YAE7B7F,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW8xB;YAAAA;QACb,CACD,IAEM,CAAA,IAGF;YAACA;QAAAA;IACV;IACA/lB,SAAS;QACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAACmuB,kBAAAA,EAAAA,GAAwB;0LACjCC,QAAAA,EAAM;oBAAC/lB,MAAM;oBAAUrM,IAAImyB;gBAAAA,CAAmB;0LAC9CC,QAAAA,EAAM;oBAAC/lB,MAAM;oBAAkB0N,YAAY/V,MAAM+V,UAAAA;gBAAAA,CAAW,CAAC;aAC9D;KAAA;AAEL,CAAC,GAEYsY,0BAA0B;IACrCH;AACF,GC5BaI,2BAA2B;IACtCC,wLAAWC,yBAAAA,EAAuB;QAChCC,SAAS;YACP;gBACE7mB,KAAK;gBACL8mB,KAAK,CAAA;gBACLC,MAAM,CAAA;gBACNC,MAAM,CAAA;gBACN/U,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDgV,qLAASL,0BAAAA,EAAuB;QAC9BC,SAAS;YACP;gBACE7mB,KAAK;gBACL8mB,KAAK,CAAA;gBACLC,MAAM,CAAA;gBACNC,MAAM,CAAA;gBACN/U,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDiV,oLAAON,yBAAAA,EAAuB;QAC5BC,SAAS;YACP;gBACE7mB,KAAK;gBACLiS,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDkV,wLAAWP,yBAAAA,EAAuB;QAChCC,SAAS;YACP;gBACE7mB,KAAK;gBACLiS,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDjI,YAAY;QACVod,iLAAQC,OAAAA;QACRC,6KAAIC,SAAAA;4LACJC,YAAAA;uLACAC,OAAAA;IAAAA;IAEFzW,SAAS;sLACPgL,QAAAA;uLACAF,OAAAA;IAAAA;IAEF4L,kLAAKd,yBAAAA,EAAuB;QAC1BC,SAAS;YACP;gBACE7mB,KAAK;gBACL8mB,KAAK,CAAA;gBACLC,MAAM,CAAA;gBACNC,MAAM,CAAA;gBACN/U,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACD0V,WAAUf,qMAAAA,EAAuB;QAC/BC,SAAS;YACP;gBACE7mB,KAAK;gBACL8mB,KAAK,CAAA;gBACLC,MAAM,CAAA;gBACNC,MAAM,CAAA;gBACN/U,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;AACH,GC1EM2V,mCAA+BznB,uLAAAA,EAAe;IAClDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAW5B,IANI,CAJgBsuB,yBAAyBC,SAAAA,CAAUvmB,KAAAA,CACrDhI,MAAMwN,WACR,KAQI,iNAFuBpH,uBAAAA,EAA+BrC,QAAQ,GAGhE,OAAO,CAAA;QAGT,MAAM0rB,2OAAmBrpB,sBAAAA,EAA8BrC,QAAQ,GACzD2rB,oOAAYtpB,eAAAA,EAAuBrC,QAAQ;QAEjD,OAAO0rB,oBAAoB,CAACC;IAC9B;IACAtnB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAAA,GAAc;gBACdqqB,kLAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvCooB,WAAW;gBAAA,CACZ,CAAC;aACH;KAAA;AAEL,CAAC,GAEK+O,uMAA6B5nB,iBAAAA,EAAe;IAChDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAS5B,IANI,CAFcsuB,yBAAyBO,OAAAA,CAAQ7mB,KAAAA,CAAMhI,MAAMwN,WAAW,KAQtE,iNAFuBpH,uBAAAA,EAA+BrC,QAAQ,GAGhE,OAAO,CAAA;QAGT,MAAM0rB,2OAAmBrpB,sBAAAA,EAA8BrC,QAAQ,GACzD6rB,wOAAgBxpB,mBAAAA,EAA2BrC,QAAQ;QAEzD,OAAO0rB,oBAAoB,CAACG;IAC9B;IACAxnB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAAA,GAAc;0LACdqqB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvCooB,WAAW;gBAAA,CACZ,CAAC;aACH;KAAA;AAEL,CAAC,GAEKiP,+LAAsB9nB,kBAAAA,EAAe;IACzCjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAM0rB,2OAAmBrpB,sBAAAA,EAA8BrC,QAAQ;QAG/D,uNAF2BqC,uBAAAA,EAA+BrC,QAAQ,KAErC0rB,qBAAqBn0B,KAAAA;IACpD;IACA8M,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAAA,GAAc;0LACdqqB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvCooB,WAAW;gBAAA,CACZ,CAAC;aACH;KAAA;AAEL,CAAC,GAEKkP,iCAAiC/nB,2LAAAA,EAAe;IACpDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAJI+D,SAASxD,OAAAA,CAAQ0J,QAAAA,IAKnBlG,SAASxD,OAAAA,CAAQlE,SAAAA,IACjB,iNAAC+J,uBAAAA,EAA+BrC,QAAQ,GAExC,OAAO,CAAA;QAGT,MAAM0rB,oBAAmBrpB,6OAAAA,EAA8B;YACrD,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD,GACKuzB,wOAAgBxpB,mBAAAA,EAA2B;YAC/C,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD;QAED,OACE2D,MAAMuC,QAAAA,CAASpE,QAAAA,IACf6B,MAAMuC,QAAAA,CAAShJ,KAAAA,KAAU,WACzBk2B,oBACA,CAACG;IAEL;IACAxnB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAU/D,KAAAA,EAAAA,GAAW;iBACrBouB,iLAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;gBAAAA,CACpB;0LACD+xB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvCooB,WAAW;oBACXC,QAAQ;gBAAA,CACT,CAAC;aACH;KAAA;AAEL,CAAC,GAEKkP,2MAAiChoB,iBAAAA,EAAe;IACpDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAJI+D,SAASxD,OAAAA,CAAQ0J,QAAAA,IAKnBlG,SAASxD,OAAAA,CAAQlE,SAAAA,IACjB,iNAAC+J,uBAAAA,EAA+BrC,QAAQ,GAExC,OAAO,CAAA;QAGT,MAAM0rB,2OAAmBrpB,sBAAAA,EAA8B;YACrD,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD,GACKqzB,oOAAYtpB,eAAAA,EAAuB;YACvC,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD;QAED,OACE2D,MAAMuC,QAAAA,CAASpE,QAAAA,IACf6B,MAAMuC,QAAAA,CAAShJ,KAAAA,KAAU,SACzBk2B,oBACA,CAACC;IAEL;IACAtnB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAU/D,KAAAA,EAAAA,GAAW;gBACrBouB,kLAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;gBAAAA,CACpB;0LACD+xB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvCooB,WAAW;oBACXC,QAAQ;gBAAA,CACT,CAAC;aACH;KAAA;AAEL,CAAC,GAEKmP,mNAAyCjoB,iBAAAA,EAAe;IAC5DjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ,GAC5D6rB,iBAAgBxpB,0OAAAA,EAA2BrC,QAAQ;QAEzD,OAAI,CAACwc,kBAAkB,CAAC0P,sBAAsB,CAACL,gBACtC,CAAA,iNAIPjO,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASggB,eAAejkB,IAAI,KACtD,CAAC0C,8MAAAA,EAAY+E,SAASxD,OAAAA,EAASqvB,cAActzB,IAAI,IAE1C;YAACikB;YAAgBqP;QAAAA,IAGnB,CAAA;IACT;IACAxnB,SAAS;QACP,CAAC6d,GAAG,EAAC1F,cAAAA,EAAgBqP,aAAAA,EAAAA,GAAmB;0LACtCxB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIukB,eAAe/jB,IAAAA;gBAAAA,CACpB;0LACD4xB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAI;wBACFuD,QAAQ;4BAAC/C,MAAMozB,cAAcpzB,IAAAA;4BAAMiD,QAAQ;wBAAA;wBAC3ClD,OAAO;4BAACC,MAAMozB,cAAcpzB,IAAAA;4BAAMiD,QAAQ;wBAAA;oBAAC;gBAC7C,CACD,CAAC;aACH;KAAA;AAEL,CAAC,GAEKywB,0CAA0CnoB,2LAAAA,EAAe;IAC7DjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ,GAC5D2rB,oOAAYtpB,eAAAA,EAAuBrC,QAAQ;QAEjD,OAAI,CAACwc,kBAAkB,CAAC0P,sBAAsB,CAACP,YACtC,CAAA,iNAIP/N,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASggB,eAAejkB,IAAI,KACtD,iMAAC0C,cAAAA,EAAY+E,SAASxD,OAAAA,EAASmvB,UAAUpzB,IAAI,IAEtC;YAACikB;YAAgBmP;QAAAA,IAGnB,CAAA;IACT;IACAtnB,SAAS;QACP,CAAC6d,GAAG,EAAC1F,cAAAA,EAAgBmP,SAAAA,EAAAA,GAAe;gBAClCtB,kLAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIukB,eAAe/jB,IAAAA;gBAAAA,CACpB;0LACD4xB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAI;wBACFuD,QAAQ;4BAAC/C,MAAMkzB,UAAUlzB,IAAAA;4BAAMiD,QAAQ;wBAAA;wBACvClD,OAAO;4BAACC,MAAMkzB,UAAUlzB,IAAAA;4BAAMiD,QAAQ;wBAAA;oBAAC;gBACzC,CACD,CAAC;aACH;KAAA;AAEL,CAAC,GAEY0wB,2BAA2B;IACtCX;IACAG;IACAE;IACAC;IACAC;IACAC;IACAE;AACF,GC1RaE,yBAAyB;IACpCC,0LAAgBtoB,iBAAAA,EAAe;QAC7BjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjBsuB,yBAAyB1c,UAAAA,CAAWod,MAAAA,CAAOhnB,KAAAA,CAAMhI,MAAMwN,WAAW,KAClEzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CAChCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAAS,QACpC;QACF4P,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBwJ,WAAW;oBAAA,CAAS,CAAC;iBAAC;SAAA;IAAA,CACzE;IACDye,qLAAYvoB,kBAAAA,EAAe;QACzBjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjBsuB,yBAAyB1c,UAAAA,CAAWsd,EAAAA,CAAGlnB,KAAAA,CAAMhI,MAAMwN,WAAW,KAC9DzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CAChCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAAS,IACpC;QACF4P,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBwJ,WAAW;oBAAA,CAAK,CAAC;iBAAC;SAAA;IAAA,CACrE;IACD0e,6LAAmBxoB,iBAAAA,EAAe;QAChCjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjBsuB,yBAAyB1c,UAAAA,CAAWwd,SAAAA,CAAUpnB,KAAAA,CAAMhI,MAAMwN,WAAW,KACrEzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CAChCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAAS,WACpC;QACF4P,SAAS;YACP,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBwJ,WAAW;oBAAA,CAAY,CAAC;iBAAC;SAAA;IAAA,CAEpE;IACD2e,wLAAczoB,iBAAAA,EAAe;QAC3BjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjBsuB,yBAAyB1c,UAAAA,CAAWyd,IAAAA,CAAKrnB,KAAAA,CAAMhI,MAAMwN,WAAW,KAChEzJ,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CAChCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAAS,MACpC;QACF4P,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBwJ,WAAW;oBAAA,CAAO,CAAC;iBAAC;SAAA;IAAA,CACvE;AACH;AC3CO,SAAS4e,sBAAsB10B,KAAAA,EAA6B;IACjE,IAAIA,MAAMR,MAAAA,KAAW,GACnB,OAAO,IAAIm1B,QAAQ,GAAG,GAAG,GAAG,CAAC;IAG/B,MAAMC,WAAW50B,MAAMwT,MAAAA,CAAQjT,CAAAA,OAASA,gBAAgB7B,OAAO,GAEzDm2B,YAAYD,SAAS30B,EAAAA,CAAG,CAAC,GAAGsF,sBAAAA;IAElC,IAAI,CAACsvB,WACH,OAAO,IAAIF,QAAQ,GAAG,GAAG,GAAG,CAAC;IAG/B,IAAIG,OAAOD,UAAUC,IAAAA,EACjBrvB,MAAMovB,UAAUpvB,GAAAA,EAChBsvB,QAAQF,UAAUE,KAAAA,EAClBnvB,SAASivB,UAAUjvB,MAAAA;IAEvB,IAAA,IAASmF,IAAI,GAAGA,IAAI6pB,SAASp1B,MAAAA,EAAQuL,IAAK;QACxC,MAAMiqB,OAAOJ,QAAAA,CAAS7pB,CAAC,CAAA,CAAExF,qBAAAA,CAAAA;QACzBuvB,OAAO/uB,KAAKkD,GAAAA,CAAI6rB,MAAME,KAAKF,IAAI,GAC/BrvB,MAAMM,KAAKkD,GAAAA,CAAIxD,KAAKuvB,KAAKvvB,GAAG,GAC5BsvB,QAAQhvB,KAAKkvB,GAAAA,CAAIF,OAAOC,KAAKD,KAAK,GAClCnvB,SAASG,KAAKkvB,GAAAA,CAAIrvB,QAAQovB,KAAKpvB,MAAM;IACvC;IAEA,OAAO,IAAI+uB,QAAQG,MAAMrvB,KAAKsvB,QAAQD,MAAMlvB,SAASH,GAAG;AAC1D;ACrBO,MAAMyvB,mBAAmB;IAAA;;;;;GAAA,IAO9BlpB,0LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAUmtB,GAAAA,EAAKlxB,KAAAA,EAAAA,KAAW;YACjC,MAAMmG,gBAAgBD,iBAAiB;gBACrCnC;gBACArD,gBAAgBV,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA,CAChC,GACK80B,4BAAwB/qB,8OAAAA,EAAkC;gBAC9D,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,GACKirB,kBAAkB;gBACtBC,YAAYH,IAAIxD,aAAAA,CAAc;oBAC5B,GAAG3pB,QAAAA;oBACHxD,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAW8J;oBAAAA;gBACb,CACD;gBACDmrB,YAAYJ,IAAIvD,aAAAA,CAAc;oBAC5B,GAAG5pB,QAAAA;oBACHxD,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAW8J;oBAAAA;gBACb,CACD;YAAA;YAGH,OAAO;gBACLA;gBACAirB;gBACAD;YAAAA;QAEJ;QACA/oB,SAAS;YACP,CACE,EAAC8oB,GAAAA,EAAKlxB,KAAAA,EAAAA,EACN,EAACmG,aAAAA,EAAeirB,eAAAA,EAAiBD,qBAAAA,EAAAA,KAC9B;gBACH,MAAMI,YAAYlvB,SAASmvB,aAAAA,CAAc,KAAK;gBAE9C,IAAIL,uBAAuB;oBAEzB,MAAMM,mBAAmBL,gBAAgBC,UAAAA,CAAW/3B,GAAAA,CAAKgD,CAAAA,OACvDA,KAAKo1B,SAAAA,CAAU,CAAA,CAAI,CACrB;oBAEA,KAAA,MAAWn4B,SAASk4B,iBACdl4B,iBAAiBo4B,eAAAA,CACnBp4B,MAAMM,KAAAA,CAAM0I,QAAAA,GAAW,UAAA,GAEzBgvB,UAAUK,WAAAA,CAAYr4B,KAAK;oBAI7B,MAAMs4B,cAAcN,UAAUO,aAAAA,CAC5B,8BACF;oBAaA,IAZID,eACFN,UAAUQ,eAAAA,CAAgBF,WAAW,GAIvCN,UAAUS,YAAAA,CAAa,gBAAgB,EAAE,GAEzCT,UAAU13B,KAAAA,CAAM0I,QAAAA,GAAW,YAC3BgvB,UAAU13B,KAAAA,CAAMg3B,IAAAA,GAAO,YACvBU,UAAU13B,KAAAA,CAAMo4B,SAAAA,GAAY,cAC5B5vB,SAAS6vB,IAAAA,CAAKN,WAAAA,CAAYL,SAAS,GAE/BM,aAAa;wBACf,MAAMM,kBAAkBN,YAAYvwB,qBAAAA,CAAAA,GAC9B0sB,IAAIhuB,MAAMwN,WAAAA,CAAYhL,OAAAA,GAAU2vB,gBAAgBtB,IAAAA,EAChD5C,IAAIjuB,MAAMwN,WAAAA,CAAY/K,OAAAA,GAAU0vB,gBAAgB3wB,GAAAA;wBACtD+vB,OAAAA,UAAU13B,KAAAA,CAAM8L,KAAAA,GAAQ,GAAGwsB,gBAAgBxsB,KAAK,CAAA,EAAA,CAAA,EAChD4rB,UAAU13B,KAAAA,CAAMgI,MAAAA,GAAS,GAAGswB,gBAAgBtwB,MAAM,CAAA,EAAA,CAAA,EAE3C;6BACLusB,iLAAAA,EAAM;gCACJ/lB,MAAM;gCACNrM,IAAImK;4BAAAA,CACL;sMACDmC,SAAAA,EAAO,MAAM;gCACX4oB,IAAItD,YAAAA,CAAa;oCACf5tB;oCACA6tB,OAAO;wCACLvvB,SAASizB;wCACTvD;wCACAC;oCAAAA;gCACF,CACD;4BACH,CAAC;sMACDxlB,UAAAA,EAAQzI,KAAK,CAAC;yBAAA;oBAElB,OAAO;wBACL,MAAMoyB,gBAAgB3B,sBACpBW,gBAAgBC,UAClB,GACMrD,IAAIhuB,MAAMwN,WAAAA,CAAYhL,OAAAA,GAAU4vB,cAAcvB,IAAAA,EAC9C5C,IAAIjuB,MAAMwN,WAAAA,CAAY/K,OAAAA,GAAU2vB,cAAc5wB,GAAAA;wBACpD+vB,OAAAA,UAAU13B,KAAAA,CAAM8L,KAAAA,GAAQ,GAAGysB,cAAczsB,KAAK,CAAA,EAAA,CAAA,EAC9C4rB,UAAU13B,KAAAA,CAAMgI,MAAAA,GAAS,GAAGuwB,cAAcvwB,MAAM,CAAA,EAAA,CAAA,EAEzC;6BACLusB,iLAAAA,EAAM;gCACJ/lB,MAAM;gCACNrM,IAAImK;4BAAAA,CACL;sMACDmC,SAAAA,EAAO,MAAM;gCACX4oB,IAAItD,YAAAA,CAAa;oCACf5tB;oCACA6tB,OAAO;wCAACvvB,SAASizB;wCAAWvD;wCAAGC;oCAAAA;gCAAC,CACjC;4BACH,CAAC;sMACDxlB,UAAAA,EAAQzI,KAAK,CAAC;yBAAA;oBAElB;gBACF,OAAO;oBACL,MAAMqyB,mBAAmBjB,gBAAgBE,UAAAA,CAAWh4B,GAAAA,CAAKgD,CAAAA,OACvDA,KAAKo1B,SAAAA,CAAU,CAAA,CAAI,CACrB;oBAEA,KAAA,MAAWx3B,SAASm4B,iBAClBd,UAAUK,WAAAA,CAAY13B,KAAK;oBAG7Bq3B,UAAU13B,KAAAA,CAAM0I,QAAAA,GAAW,YAC3BgvB,UAAU13B,KAAAA,CAAMg3B,IAAAA,GAAO,YACvBU,UAAU13B,KAAAA,CAAMo4B,SAAAA,GAAY,cAC5B5vB,SAAS6vB,IAAAA,CAAKN,WAAAA,CAAYL,SAAS;oBAEnC,MAAMe,kBAAkB7B,sBACtBW,gBAAgBE,UAClB,GACMtD,IAAIhuB,MAAMwN,WAAAA,CAAYhL,OAAAA,GAAU8vB,gBAAgBzB,IAAAA,EAChD5C,IAAIjuB,MAAMwN,WAAAA,CAAY/K,OAAAA,GAAU6vB,gBAAgB9wB,GAAAA;oBACtD+vB,OAAAA,UAAU13B,KAAAA,CAAM8L,KAAAA,GAAQ,GAAG2sB,gBAAgB3sB,KAAK,CAAA,EAAA,CAAA,EAChD4rB,UAAU13B,KAAAA,CAAMgI,MAAAA,GAAS,GAAGywB,gBAAgBzwB,MAAM,CAAA,EAAA,CAAA,EAE3C;kMACLusB,QAAAA,EAAM;4BACJ/lB,MAAM;4BACNrM,IAAImK;wBAAAA,CACL;wBACDmC,mLAAAA,EAAO,MAAM;4BACX4oB,IAAItD,YAAAA,CAAa;gCACf5tB;gCACA6tB,OAAO;oCAACvvB,SAASizB;oCAAWvD;oCAAGC;gCAAAA;4BAAC,CACjC;wBACH,CAAC;wBACDxlB,oLAAAA,EAAQzI,KAAK,CAAC;qBAAA;gBAElB;YACF,CAAC;SAAA;IAAA,CAEJ;IAAA;;;GAAA,IAMD+H,0LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMkI,aAAalI,MAAMkI,UAAAA;YAWzB,OAV+BA,cAC3B9B,gPAAAA,EAAiCpG,MAAMuC,QAAAA,CAASlG,SAAS,EAAE;gBACzD,GAAG0H,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW6L,WAAW7L,SAAAA;gBAAAA;YACxB,CACD,IACD,CAAA;QAGN;QACA+L,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;;GAAA,6KAMDL,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMkI,aAAalI,MAAMkI,UAAAA,EACnBqqB,eAAevyB,MAAMuC,QAAAA,CAASlG,SAAAA;YAUpC,OAT6B6L,qOACzB9B,yBAAAA,EAAiCmsB,YAAY,EAAE;gBAC7C,GAAGxuB,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW6L,WAAW7L,SAAAA;gBAAAA;YACxB,CACD,IACD,CAAA;QAEN;QACA+L,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;;GAAA,4KAKDL,kBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAWA,MAAMkI,UAAAA,KAAe5M,KAAAA;QACzC8M,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;wBACXouB,8KAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;IAAA;;GAAA,6KAID+H,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;oBAAAA,CACpB;oBACD+xB,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;IAAA;;;GAAA,6KAMD+H,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IACEA,MAAMwN,WAAAA,CAAYnF,IAAAA,KAAS,eAC3BrI,MAAMwN,WAAAA,CAAYtF,UAAAA,KAAe5M,KAAAA,GAEjC,OAAO,CAAA;YAGT,MAAM4M,aAAalI,MAAMwN,WAAAA,CAAYtF,UAAAA,EAC/B/B,gBAAgBD,iBAAiB;gBACrCxF,gBAAgBwH,WAAW7L,SAAAA;gBAC3B0H;YAAAA,CACD,GACKwuB,eAAevyB,MAAMwN,WAAAA,CAAYjL,QAAAA,CAASlG,SAAAA,EAC1Cm2B,uBAAuBtqB,qOACzB9B,yBAAAA,EAAiCmsB,YAAY,EAAE;gBAC7C,GAAGxuB,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,IACD,CAAA,GAEEssB,uBAAuBrsB,kPAAAA,EAAkC;gBAC7D,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,GAEKusB,wOAAgBtsB,oBAAAA,EAA4B;gBAChD,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD;YAED,OAAKqsB,uBAUE,CAAA,IATE;gBACLD;gBACAE;gBACAC;gBACAxqB;gBACAsF,aAAaxN,MAAMwN,WAAAA;YAAAA;QAKzB;QACApF,SAAS;YACP,CACE,EAACpI,KAAAA,EAAAA,EACD,EACEyyB,oBAAAA,EACAC,aAAAA,EACAxqB,UAAAA,EACAqqB,YAAAA,EACA/kB,WAAAA,EAAAA,GAEC;8LACH4gB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIu2B;oBAAAA,CACL,GACD;uBAAIE,uBACAC,cAAcp5B,GAAAA,CAAKC,CAAAA,kLACjB60B,QAAAA,EAAM;4BACJ/lB,MAAM;4BACNrM,IAAIzC,MAAMiD,IAAAA;wBAAAA,CACX,CACH,IACA;4BACE4xB,8KAAAA,EAAM;4BACJ/lB,MAAM;4BACNrM,IAAIkM,WAAW7L,SAAAA;wBAAAA,CAChB,CAAC;qBAAA;8LAER+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNuF,QAAQ5N,MAAM6N,IAAAA;wBACd+S,WAAW6R,uBACPjlB,YAAYjL,QAAAA,CAAShJ,KAAAA,KAAU,UAC7B,WACAiU,YAAYjL,QAAAA,CAAShJ,KAAAA,KAAU,QAC7B,UACA,SACJ;oBAAA,CACL,CAAC;iBACH;SAAA;IAAA,CAEJ;CAAC,EC3VEo5B,+BAA8B5qB,0LAAAA,EAAe;IACjDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDksB,qBAAqB7pB,uOAAAA,EAA+BrC,QAAQ;QAElE,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAAa,CAACkkB,kBAAkB,CAAC0P,oBACrD,OAAO,CAAA;QAGT,MAAM2C,0OACJxsB,oBAAAA,EAA4Bma,cAAc,EAAExc,QAAQ,GAEhD8uB,gBAAgBtS,eAAejkB,IAAAA,CAAKwC,QAAAA,EACpCg0B,aAAavS,eAAejkB,IAAAA,CAAKgP,KAAAA;QAEvC,OAAIsnB,kBACK;YAACC;YAAeC;QAAAA,IAGlB,CAAA;IACT;IACA1qB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAAA,EAAW,EAAC8uB,aAAAA,EAAeC,UAAAA,EAAAA,GAAgB;0LAC3C1E,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA;gCACpC8B,MAAM;gCACNC,OAAO,CAAA,CAAA;4BAAA,CACR;yBAAA;wBAEHR,UAAU,CAAA,CAAA;wBACV+E,UAAU+zB;wBACVvnB,OAAOwnB;wBACPj5B,OAAOkK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOvD,MAAAA,CAAO,CAAC,CAAA,EAAGnC;oBAAAA;oBAE5CooB,WAAW;gBAAA,CACZ,CAAC;aACH;KAAA;AAEL,CAAC,GAEKmS,0MAAgChrB,iBAAAA,EAAe;IACnDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDksB,sBAAqB7pB,sOAAAA,EAA+BrC,QAAQ;QAElE,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAAa,CAACkkB,kBAAkB,CAAC0P,oBACrD,OAAO,CAAA;QAGT,MAAM3e,4NAAYlL,eAAAA,EAAuBrC,QAAQ,GAE3CivB,kBAAkB1hB,WAAWhV,KAAK/B,OAAOgV,OAC5CoC,CAAAA,OACC5N,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CAChCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAASmZ,IACpC,KAAK,CAAA,CACT,GACMshB,mBACJ3hB,WAAWhV,KAAK/B,OAAOgV,OACpBoC,CAAAA,OACC,CAAC5N,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWnT,IAAAA,CACjCoT,CAAAA,YAAcA,UAAUrZ,IAAAA,KAASmZ,IACpC,CACJ,KAAK,CAAA,CAAA,EACDkhB,gBAAgBtS,eAAejkB,IAAAA,CAAKwC,QAAAA,EACpCg0B,aAAavS,eAAejkB,IAAAA,CAAKgP,KAAAA;QAKvC,8NAFElF,uBAAAA,EAA8Bma,cAAc,EAAExc,QAAQ,IAG/C;YAACkvB;YAAkBD;YAAiBH;YAAeC;QAAAA,IAGrD,CAAA;IACT;IACA1qB,SAAS;QACP,CACE,EAACrE,QAAAA,EAAAA,EACD,EAACkvB,gBAAAA,EAAkBD,eAAAA,EAAiBH,aAAAA,EAAeC,UAAAA,EAAAA,GAChD;0LACH1E,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA;gCACpC+B,OAAO04B,iBAAiB13B,MAAAA,KAAW,IAAIy3B,kBAAkB,CAAA,CAAA;gCACzD14B,MAAM;4BAAA,CACP;yBAAA;wBAEHwE,UAAU+zB;wBACVvnB,OAAOwnB;wBACPj5B,OAAOkK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOvD,MAAAA,CAAO,CAAC,CAAA,EAAGnC;oBAAAA;oBAE5CooB,WAAW;oBACXC,QAAQ;gBAAA,CACT,CAAC;aACH;KAAA;AAEL,CAAC,GAEKqS,mMAAyBnrB,iBAAAA,EAAe;IAC5CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QAKrB,IAJI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAIlB,iNAAC+J,sBAAAA,EAA8BrC,QAAQ,GACzC,OAAO,CAAA;QAGT,MAAM5C,qOAAaiF,gBAAAA,EAAwBrC,QAAQ,GAC7CtC,oOAAY2E,eAAAA,EAAuBrC,QAAQ;QAEjD,IAAI,CAAC5C,cAAc,CAACM,WAClB,OAAO,CAAA;QAGT,MAAM0xB,wBAAuBvyB,oNAAAA,EAAyB;YACpDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO4H;QAAAA,CACR,GACKtE,sNAAsB+D,yBAAAA,EAC1BmD,SAASxD,OAAAA,CAAQlE,SACnB,GACM+2B,iOAAoBxyB,mBAAAA,EAAuB;YAC/CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkI;QAAAA,CACR,GACKtE,oNAAoByD,uBAAAA,EACxBmD,SAASxD,OAAAA,CAAQlE,SACnB;QAEA,oNACEuE,yBAAAA,EAA6BuyB,sBAAsBt2B,mBAAmB,kNACtE+D,yBAAAA,EAA6BwyB,mBAAmBj2B,iBAAiB,IAE1D;YAACd,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;QAAAA,IAG/B,CAAA;IACT;IACA+L,SAAS;QACP,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;oBAClB+xB,8KAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIK;gBAAAA,CACL,CAAC;aACH;KAAA;AAEL,CAAC,GAEKg3B,uBAAuBtrB,2LAAAA,EAAe;IAC1CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QAKrB,IAJI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAIlB,iNAAC+J,sBAAAA,EAA8BrC,QAAQ,GACzC,OAAO,CAAA;QAGT,MAAMhF,yOAAiBqH,oBAAAA,EAA4BrC,QAAQ,GACrDyC,8OAAsBJ,yBAAAA,EAAiCrC,QAAQ,GAC/D0C,4OAAoBL,uBAAAA,EAA+BrC,QAAQ;QAEjE,IAAI,CAACyC,uBAAuB,CAACC,mBAC3B,OAAO,CAAA;QAGT,MAAM6sB,uNAAuB1yB,qBAAAA,EAAyB;YACpDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOiN;QAAAA,CACR,GACK3J,sNAAsB+D,yBAAAA,EAC1BmD,SAASxD,OAAAA,CAAQlE,SACnB,GACMglB,uBAAmBzgB,4NAAAA,EAAuB;YAC9CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkN;QAAAA,CACR,GACKtJ,oNAAoByD,uBAAAA,EACxBmD,SAASxD,OAAAA,CAAQlE,SACnB;QAEA,oNACEuE,yBAAAA,EAA6B/D,qBAAqBy2B,oBAAoB,kNACtE1yB,yBAAAA,EAA6BzD,mBAAmBkkB,gBAAgB,IAEzD;YAACtiB;QAAAA,IAGH,CAAA;IACT;IACAqJ,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAAA,EAAW,EAAChF,cAAAA,EAAAA,GAAoB;0LAChCqvB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAOiR,IAAAA,CAAK3W,IAAAA;gCACpC8B,MAAM;gCACNC,OAAO,CAAA,CAAA;4BAAA,CACR;yBAAA;oBAAA;oBAGLqmB,WAAW;oBACXC,QAAQ;gBAAA,CACT,GACD;mBAAG9hB,eAAezF,GAAAA,CAAKC,CAAAA,QACrB60B,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIzC,MAAMiD,IAAAA;oBAAAA,CACX,CACH,CAAC;aACF;KAAA;AAEL,CAAC,GAEK+2B,iMAAuBxrB,iBAAAA,EAAe;IAC1CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMksB,qBAAqB7pB,uOAAAA,EAA+BrC,QAAQ,GAC5DyvB,2OAAoBptB,wBAAAA,EAA+BrC,QAAQ;QAEjE,OAAOksB,sBAAsBuD;IAC/B;IACAprB,SAAS;QACP,IAAM;0LAACgmB,QAAAA,EAAM;oBAAC/lB,MAAM;oBAAgB0Z,UAAU;gBAAA,CAAE;0LAAGqM,QAAAA,EAAM;oBAAC/lB,MAAM;gBAAA,CAAQ,CAAC;aAAC;KAAA;AAE9E,CAAC,GAEYorB,2BAA2B;IACtCd;IACAI;IACAG;IACAG;IACAE;AACF,GCxPMG,iBAAiB,IAEjBC,2BAAuB5rB,uLAAAA,EAAe;IAC1CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ,GAC5Dwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDuN,4NAAYlL,eAAAA,EAAuBrC,QAAQ;QAEjD,OAAI,CAACksB,sBAAsB,CAAC1P,kBAAkB,CAACjP,YACtC,CAAA,IAIPiP,eAAejkB,IAAAA,CAAKrC,QAAAA,CAAS,CAAC,CAAA,CAAEjB,IAAAA,KAASsY,UAAUhV,IAAAA,CAAKtD,IAAAA,IACxD+K,SAASxD,OAAAA,CAAQlE,SAAAA,EAAWE,MAAMkD,WAAW,KAElB8gB,eAAejkB,IAAAA,CAAKgP,KAAAA,KAAU,IAClD;YAACiV;QAAAA,IAGH,CAAA;IACT;IACAnY,SAAS;QACP,CAAC6d,GAAG,EAAC1F,cAAAA,EAAAA,GAAoB;0LACvB6N,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN5Q,OAAO;wBAAC;wBAAY,OAAO;qBAAA;oBAC3BuE,IAAIukB,eAAe/jB,IAAAA;gBAAAA,CACpB,CAAC;aACH;KAAA;AAEL,CAAC,GAEKo3B,oMAA0B7rB,iBAAAA,EAAe;IAC7CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMksB,oOAAqB7pB,wBAAAA,EAA+BrC,QAAQ,GAC5Dwc,iOAAiBna,oBAAAA,EAA4BrC,QAAQ,GACrDuN,aAAYlL,8NAAAA,EAAuBrC,QAAQ;QAEjD,OAAI,CAACksB,sBAAsB,CAAC1P,kBAAkB,CAACjP,YACtC,CAAA,IAIPiP,eAAejkB,IAAAA,CAAKrC,QAAAA,CAAS,CAAC,CAAA,CAAEjB,IAAAA,KAASsY,UAAUhV,IAAAA,CAAKtD,IAAAA,IACxD+K,SAASxD,OAAAA,CAAQlE,SAAAA,EAAWE,MAAMkD,WAAW,KAI7C8gB,eAAejkB,IAAAA,CAAKgP,KAAAA,KAAUhQ,KAAAA,KAC9BilB,eAAejkB,IAAAA,CAAKgP,KAAAA,GAAQ,IAErB;YAACiV;YAAgBjV,OAAOiV,eAAejkB,IAAAA,CAAKgP,KAAAA,GAAQ;QAAA,IAGtD,CAAA;IACT;IACAlD,SAAS;QACP,CAAC6d,GAAG,EAAC1F,cAAAA,EAAgBjV,KAAAA,EAAAA,GAAW;0LAC9B8iB,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN5Q,OAAO;wBAAC6T;oBAAAA;oBACRtP,IAAIukB,eAAe/jB,IAAAA;gBAAAA,CACpB,CAAC;aACH;KAAA;AAEL,CAAC,GAOKq3B,sMAA4B9rB,iBAAAA,EAAe;IAC/CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAM+vB,iBAAiB1tB,4OAAAA,EAA4BrC,QAAQ,GACrD2rB,oOAAYtpB,eAAAA,EAAuBrC,QAAQ;QAUjD,OARI,CAAC+vB,kBAAkB,CAACpE,aAIpB,iMAAC1wB,cAAAA,EAAY+E,SAASxD,OAAAA,EAASmvB,UAAUpzB,IAAI,KAI7C,8MAACqlB,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASuzB,eAAex3B,IAAI,IAClD,CAAA,IAGF;YAACw3B;YAAgBpE;QAAAA;IAC1B;IACAtnB,SAAS;QACP,CAAC6d,GAAG,EAACyJ,SAAAA,EAAAA,GAAe;oBAClBtB,8KAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAOm2B,UAAUpzB,IAAAA;oBACjBskB,WAAW;oBACXC,QAAQ;gBAAA,CACT;0LACDuN,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAI0zB,UAAUlzB,IAAAA;gBAAAA,CACf,CAAC;aACH;KAAA;AAEL,CAAC,GAOKu3B,yMAA+BhsB,iBAAAA,EAAe;IAClDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMwc,gOAAiBna,qBAAAA,EAA4BrC,QAAQ,GACrD6rB,wOAAgBxpB,mBAAAA,EAA2BrC,QAAQ;QAUzD,IARI,CAACwc,kBAAkB,CAACqP,iBAIpB,iMAAC1wB,cAAAA,EAAY6E,SAASxD,OAAAA,EAASqvB,cAActzB,IAAI,KAIjD,6MAACqlB,oBAAAA,EAAiB5d,SAASxD,OAAAA,EAASqvB,cAActzB,IAAI,GACxD,OAAO,CAAA;QAGT,MAAM03B,qOAAwBC,mBAAAA,EAAiB;YAC7C1zB,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOq2B;QAAAA,CACR;QAED,OAAO;YAACrP;YAAgByT;QAAAA;IAC1B;IACA5rB,SAAS;QACP,CAAC6d,GAAG,EAAC1F,cAAAA,EAAgByT,qBAAAA,EAAAA,GAA2B;0LAC9C5F,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAI;wBACFuD,QAAQy0B;wBACRz3B,OAAOy3B;oBAAAA;gBACT,CACD;yLACD5F,SAAAA,EAAM;oBACJ/lB,MAAM;oBACN9O,OAAOgnB,eAAejkB,IAAAA;oBACtBskB,WAAW;oBACXC,QAAQ;gBAAA,CACT;0LACDuN,QAAAA,EAAM;oBACJ/lB,MAAM;oBACNrM,IAAIukB,eAAe/jB,IAAAA;gBAAAA,CACpB,CAAC;aACH;KAAA;AAEL,CAAC,GAMK03B,oBAAmBnsB,0LAAAA,EAAe;IACtCjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;QACrB,MAAMksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ,GAC5D+vB,yOAAiB1tB,oBAAAA,EAA4BrC,QAAQ;QAE3D,OACE,CAACksB,sBACD,CAAC6D,kBACD,8MAACnS,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASuzB,eAAex3B,IAAI,IAEhD,CAAA,IAGF;YAACw3B;QAAAA;IACV;IACA1rB,SAAS;QACP,CAAC6d,GAAG,EAAC6N,cAAAA,EAAAA,GAAoB;yLACvB1F,SAAAA,EAAM;oBACJ/lB,MAAM;oBACN5Q,OAAO;wBAAC;wBAAY,OAAO;qBAAA;oBAC3BuE,IAAI83B,eAAet3B,IAAAA;gBAAAA,CACpB,CAAC;aACH;KAAA;AAEL,CAAC,GAKK23B,kBAAkBpsB,2LAAAA,EAAe;IACrCjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAG5B,IAAI,CAFUsuB,yBAAyBgB,GAAAA,CAAItnB,KAAAA,CAAMhI,MAAMwN,WAAW,GAGhE,OAAO,CAAA;QAGT,MAAMzO,kBAAiBqH,2OAAAA,EAA4BrC,QAAQ,GACrDqwB,qBAAqBr1B,eAAemP,OAAAA,CAAS3U,CAAAA,wMACjD2F,cAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,MAAM+C,IAAI,IACpC;gBACE;oBACEA,MAAM/C,MAAM+C,IAAAA;oBACZE,MAAMjD,MAAMiD,IAAAA;gBAAAA,CACb;aAAA,GAEH,CAAA,CACN;QAEA,OAAI43B,mBAAmB74B,MAAAA,KAAWwD,eAAexD,MAAAA,GACxC;YAAC64B;QAAAA,IAGH,CAAA;IACT;IACAhsB,SAAS;QACP,CAAC6d,GAAG,EAACmO,kBAAAA,EAAAA,GACHA,mBAAmB96B,GAAAA,CAAK+6B,CAAAA,8LACtBjG,QAAAA,EAAM;oBACJ/lB,MAAM;oBACN5Q,OAAO;wBACL6T,OAAOxJ,KAAKkD,GAAAA,CACV0uB,gBACA5xB,KAAKkvB,GAAAA,CAAI,GAAGqD,kBAAkB/3B,IAAAA,CAAKgP,KAAAA,GAAQ,CAAC,CAC9C;oBAAA;oBAEFtP,IAAIq4B,kBAAkB73B,IAAAA;gBAAAA,CACvB,CACH,CAAC;KAAA;AAEP,CAAC,GAKK83B,mMAAyBvsB,iBAAAA,EAAe;IAC5CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAAI,CAJesuB,yBAAyBiB,QAAAA,CAASvnB,KAAAA,CACnDhI,MAAMwN,WACR,GAGE,OAAO,CAAA;QAGT,MAAMzO,yOAAiBqH,oBAAAA,EAA4BrC,QAAQ,GACrDqwB,qBAAqBr1B,eAAemP,OAAAA,CAAS3U,CAAAA,wMACjD2F,cAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,MAAM+C,IAAI,IACpC;gBACE;oBACEA,MAAM/C,MAAM+C,IAAAA;oBACZE,MAAMjD,MAAMiD,IAAAA;gBAAAA,CACb;aAAA,GAEH,CAAA,CACN;QAEA,OAAI43B,mBAAmB74B,MAAAA,KAAWwD,eAAexD,MAAAA,GACxC;YAAC64B;QAAAA,IAGH,CAAA;IACT;IACAhsB,SAAS;QACP,CAAC6d,GAAG,EAACmO,kBAAAA,EAAAA,GACHA,mBAAmB96B,GAAAA,CAAK+6B,CAAAA,qBACtBjG,iLAAAA,EAAM;oBACJ/lB,MAAM;oBACN5Q,OAAO;wBACL6T,OAAOxJ,KAAKkD,GAAAA,CACV0uB,gBACA5xB,KAAKkvB,GAAAA,CAAI,GAAGqD,kBAAkB/3B,IAAAA,CAAKgP,KAAAA,GAAQ,CAAC,CAC9C;oBAAA;oBAEFtP,IAAIq4B,kBAAkB73B,IAAAA;gBAAAA,CACvB,CACH,CAAC;KAAA;AAEP,CAAC,GAMK+3B,6LAAmBxsB,iBAAAA,EAAe;IACtCjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,MAAM8zB,kBAAiB1tB,2OAAAA,EAA4BrC,QAAQ;QAE3D,IAAI,CAAC+vB,gBACH,OAAO,CAAA;QAGT,MAAMU,qBAAqBx0B,MAAM4N,MAAAA,CAAO5R,EAAAA,CAAG,CAAC,GACtCy4B,sBAAsBz0B,MAAM4N,MAAAA,CAAO5R,EAAAA,CAAG,CAAC,GACvC04B,oBAAoBx1B,8MAAAA,EAAY6E,SAASxD,OAAAA,EAASi0B,kBAAkB,IACtEA,qNACAt1B,cAAAA,EAAY6E,SAASxD,OAAAA,EAASk0B,mBAAmB,IAC/CA,sBACAn5B,KAAAA;QAEN,IAAI,CAACo5B,mBACH,OAAO,CAAA;QAGT,MAAMC,kBAAkBb,eAAex3B,IAAAA,CAAKgP,KAAAA,GAAQopB,kBAAkBppB,KAAAA;QAEtE,OAAIqpB,oBAAoB,IACf,CAAA,IAGF;YAACA;YAAiBD;QAAAA;IAC3B;IACAtsB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAU/D,KAAAA,EAAAA,EAAQ,EAAC20B,eAAAA,EAAiBD,iBAAAA,EAAAA,KAAuB;YAC3D,IAAIE,cAAc,CAAA,GACdC,sBAAsB,CAAA;YAE1B,OAAO;0LACLzG,QAAAA,EAAM;oBACJ,GAAGpuB,KAAAA;oBACH4N,QAAQ5N,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAKC,CAAAA,QAAAA,CACpBA,MAAMP,IAAAA,KAAS07B,kBAAkB17B,IAAAA,IAAAA,CACnC67B,sBAAsB,CAAA,CAAA,GAGnBD,cAKHC,uBACAD,8MACA11B,eAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,KAAK,IAE5B;4BACL,GAAGA,KAAAA;4BACH+R,OAAOxJ,KAAKkD,GAAAA,CACV0uB,gBACA5xB,KAAKkvB,GAAAA,CAAI,GAAGz3B,MAAM+R,KAAAA,GAAQqpB,eAAe,CAC3C;wBAAA,IAAA,CAIAE,uBAAAA,CACFD,cAAc,CAAA,CAAA,GAGTr7B,KAAAA,IArBEA,KAAAA,CAsBV;gBAAA,CACF,CAAC;aAAA;QAEN,CAAC;KAAA;AAEL,CAAC,GAMKu7B,mBAAkB/sB,0LAAAA,EAAe;IACrCjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,MAAM8zB,yOAAiB1tB,oBAAAA,EAA4BrC,QAAQ;QAM3D,IAJI,CAAC+vB,+NAIDnS,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASuzB,eAAex3B,IAAI,GACxD,OAAO,CAAA;QAGT,MAAMk4B,qBAAqBx0B,MAAM4N,MAAAA,CAAO5R,EAAAA,CAAG,CAAC,GACtCy4B,sBAAsBz0B,MAAM4N,MAAAA,CAAO5R,EAAAA,CAAG,CAAC,GACvC04B,oNAAoBx1B,cAAAA,EAAY6E,SAASxD,OAAAA,EAASi0B,kBAAkB,IACtEA,qNACAt1B,cAAAA,EAAY6E,SAASxD,OAAAA,EAASk0B,mBAAmB,IAC/CA,sBACAn5B,KAAAA;QAUN,OARI,CAACo5B,qBAIDZ,eAAex3B,IAAAA,CAAKgP,KAAAA,KAAUopB,kBAAkBppB,KAAAA,IAIhDwoB,eAAex3B,IAAAA,CAAKwC,QAAAA,KAAa41B,kBAAkB51B,QAAAA,GAC9C,CAAA,IAGF;YAACA,UAAUg1B,eAAex3B,IAAAA,CAAKwC,QAAAA;YAAU41B;QAAAA;IAClD;IACAtsB,SAAS;QACP,CAAC,EAACrE,QAAAA,EAAU/D,KAAAA,EAAAA,EAAQ,EAAClB,QAAAA,EAAU41B,iBAAAA,EAAAA,KAAuB;YACpD,IAAIK,iBAAiB,CAAA,GACjBF,sBAAsB,CAAA;YAE1B,OAAO;0LACLzG,QAAAA,EAAM;oBACJ,GAAGpuB,KAAAA;oBACH4N,QAAQ5N,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAKC,CAAAA,QAAAA,CACpBA,MAAMP,IAAAA,KAAS07B,kBAAkB17B,IAAAA,IAAAA,CACnC67B,sBAAsB,CAAA,CAAA,GAGnBE,iBAKHF,uBACAE,kBACA71B,8MAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,KAAK,IAE5B;4BACL,GAAGA,KAAAA;4BACHuF,UACEvF,MAAM+R,KAAAA,KAAUopB,kBAAkBppB,KAAAA,GAC9BxM,WACAvF,MAAMuF,QAAAA;wBAAAA,IAAAA,CAIZ+1B,uBAAAA,CACFE,iBAAiB,CAAA,CAAA,GAGZx7B,KAAAA,IArBEA,KAAAA,CAsBV;gBAAA,CACF,CAAC;aAAA;QAEN,CAAC;KAAA;AAEL,CAAC,GAMKy7B,kMAAwBjtB,iBAAAA,EAAe;IAC3CjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAS5B,IARIA,MAAM4gB,SAAAA,KAAc,UAIpB5gB,MAAMzG,KAAAA,CAAMC,KAAAA,KAAUuK,SAASxD,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,IAIpDwH,MAAMzG,KAAAA,CAAMuF,QAAAA,KAAaxD,KAAAA,GAC3B,OAAO,CAAA;QAGT,MAAMw4B,yOAAiB1tB,oBAAAA,EAA4BrC,QAAQ;QAM3D,OAJI,CAAC+vB,kBAID,8MAACnS,mBAAAA,EAAiB5d,SAASxD,OAAAA,EAASuzB,eAAex3B,IAAI,IAClD,CAAA,IAGF;YACLgP,OAAOwoB,eAAex3B,IAAAA,CAAKgP,KAAAA;YAC3BxM,UAAUg1B,eAAex3B,IAAAA,CAAKwC,QAAAA;QAAAA;IAElC;IACAsJ,SAAS;QACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAACsL,KAAAA,EAAOxM,QAAAA,EAAAA,GAAc;0LAC9BsvB,QAAAA,EAAM;oBACJ,GAAGpuB,KAAAA;oBACHzG,OAAO;wBACL,GAAGyG,MAAMzG,KAAAA;wBACT+R;wBACAxM;oBAAAA;gBACF,CACD,CAAC;aACH;KAAA;AAEL,CAAC,GAEYm2B,oBAAoB;IAC/BtB;IACAC;IACAC;IACAE;IACAG;IACAC;IACAG;IACAC;IACAO;IACAE;AACF,GC5faE,sBAAsB;IACjC7G,wBAAwBH,iCAAAA;IACxBkC,uBAAuBC,cAAAA;IACvBD,uBAAuBE,UAAAA;IACvBF,uBAAuBG,iBAAAA;IACvBH,uBAAuBI,YAAAA,EACvB;OAAGS;IACHd,yBAAyBL,8BAAAA;IACzBK,yBAAyBJ,8BAAAA;IACzBI,yBAAyBX,4BAAAA;IACzBW,yBAAyBR,0BAAAA;IACzBQ,yBAAyBN,mBAAAA;IACzBM,yBAAyBH,sCAAAA;IACzBG,yBAAyBD,uCAAAA;IACzB+E,kBAAkBtB,oBAAAA;IAClBsB,kBAAkBrB,uBAAAA;IAClBqB,kBAAkBpB,yBAAAA;IAClBoB,kBAAkBlB,4BAAAA;IAClBkB,kBAAkBf,gBAAAA;IAClBe,kBAAkBd,eAAAA;IAClBc,kBAAkBX,sBAAAA;IAClBW,kBAAkBV,gBAAAA;IAClBU,kBAAkBH,eAAAA;IAClBG,kBAAkBD,qBAAAA;IAClBvB,yBAAyBd,2BAAAA;IACzBc,yBAAyBV,6BAAAA;IACzBU,yBAAyBP,sBAAAA;IACzBO,yBAAyBJ,oBAAAA;IACzBI,yBAAyBF,oBAAoB;CAAA,CAC7Cj6B,GAAAA,CAAKwO,CAAAA,WAAAA,CAAc;QACnBA;QACAS,UAAUb;IACZ,CAAA,CAAE,GCnCWytB,8BAA8B;8KACzCptB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMuD,WAAWvD,MAAMhE,EAAAA,CAAG,CAAC,CAAA,CAAEhD,IAAAA,EACvBo8B,aAAap1B,MAAMhE,EAAAA,CAAG,CAAC,CAAA,CAAEhD,IAAAA,EAEzBO,wNAAQ6M,oBAAAA,EAA4B;gBACxC,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAM;gCAAC;oCAACxD,MAAMuK;gCAAAA,CAAS;6BAAA;4BACvB9D,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAM;gCAAC;oCAACxD,MAAMuK;gCAAAA,CAAS;6BAAA;4BACvB9D,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,IAAI,CAAClG,OACH,OAAO,CAAA;YAGT,MAAM87B,kBAAkB97B,MAAM+C,IAAAA,CAAKvC,QAAAA,EAAUT,IAAKwb,CAAAA,UAC5CA,QAAQ9b,IAAAA,KAASo8B,aACZ;oBACL,GAAGtgB,OAAAA;oBACH,GAAG9U,MAAMvI,KAAAA;gBAAAA,IAINqd,OACR;YAED,OAAO;gBAACvR;gBAAU8xB;YAAAA;QACpB;QACAjtB,SAAS;YACP,CAAC6d,GAAG,EAAC1iB,QAAAA,EAAU8xB,eAAAA,EAAAA,GAAqB;8LAClCjH,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAI;4BAAC;gCAAChD,MAAMuK;4BAAAA,CAAS;yBAAA;wBACrB9L,OAAO;4BAACsC,UAAUs7B;wBAAAA;oBAAe,CAClC,CAAC;iBACH;SAAA;IAEL,CAAC;IACDttB,2LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,2NACjBs1B,qBAAAA,EAAmBt1B,MAAM+V,UAAAA,CAAWvd,IAAI,EAAEuL,QAAQ;QACpDqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAqB0N,YAAY/V,MAAM+V,UAAAA;oBAAAA,CAAW,CAAC;iBACjE;SAAA;IAEL,CAAC;8KACDhO,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjB,yNAACs1B,qBAAAA,EAAmBt1B,MAAM+V,UAAAA,CAAWvd,IAAI,EAAEuL,QAAQ;QACrDqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAkB0N,YAAY/V,MAAM+V,UAAAA;oBAAAA,CAAW,CAAC;iBAC9D;SAAA;IAEL,CAAC,CAAC;CAAA,ECtESwf,6BAA6B;8KACxCxtB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,2NAAWw1B,oBAAAA,EAAkBx1B,MAAM6R,SAAS,EAAE9N,QAAQ;QACzEqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACXouB,kLAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBwJ,WAAW7R,MAAM6R,SAAAA;oBAAAA,CAAU,CAAC;iBAC9D;SAAA;IAEL,CAAC;8KACD9J,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM8e,kBAAkB9e,MAAMhE,EAAAA,wOAC1By5B,0BAAAA,EAAwB;gBACtBl1B,SAASwD,SAASxD,OAAAA;gBAClB4e,SAASnf,MAAMhE,EAAAA;YAAAA,CAChB,IACD;YAEJ,OAAI8iB,kBACK,yNAAC0W,oBAAAA,EAAkBx1B,MAAM6R,SAAS,EAAE;gBACzC,GAAG9N,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAWyiB;gBAAAA;YACb,CACD,IAGI,yNAAC0W,oBAAAA,EAAkBx1B,MAAM6R,SAAS,EAAE9N,QAAQ;QACrD;QACAqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACXouB,kLAAAA,EAAM;wBACJ,GAAGpuB,KAAAA;wBACHqI,MAAM;oBAAA,CACP,CAAC;iBACH;SAAA;IAEL,CAAC,CAAC;CAAA,ECvCSqtB,0BAA0B;8KACrC3tB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GACFA,SAASxD,OAAAA,CAAQlE,SAAAA,GAIf;gBAACA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAH3B,CAAA;QAKX+L,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC3D,SAAAA,EAAAA,GAAe;8LACxB+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNhE,WAAW;wBACX8b,MAAMngB,MAAMmgB,IAAAA;wBACZnkB,IAAIK;oBAAAA,CACL,CAAC;iBACH;SAAA;IAEL,CAAC;8KACD0L,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GACFA,SAASxD,OAAAA,CAAQlE,SAAAA,GAIf;gBAACA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAH3B,CAAA;QAKX+L,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC3D,SAAAA,EAAAA,GAAe;8LACxB+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNhE,WAAW;wBACX8b,MAAMngB,MAAMmgB,IAAAA;wBACZnkB,IAAIK;oBAAAA,CACL,CAAC;iBACH;SAAA;IAEL,CAAC;KACD0L,0LAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACXouB,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAI;4BACFuD,QAAQ;gCACN/C,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;4BAEVlD,OAAO;gCACLC,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;wBACV;oBACF,CACD,CAAC;iBACH;SAAA;IAEL,CAAC;IACDsI,2LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMvC,iBAAa2I,4NAAAA,EAAwB;gBACzC,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAKhC,6MAIDqH,SAAAA,EAAOf,SAASxD,OAAAA,EAAS9C,WAAWnB,IAAI,IACnC;gBACLD,WAAW;oBACTkD,QAAQ;wBACN/C,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;oBAEVlD,OAAO;wBACLC,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQhC,WAAWnB,IAAAA,CAAKhC,IAAAA,CAAKiB,MAAAA;oBAAAA;gBAC/B;YACF,IAIG;gBACLc,WAAW;oBACTkD,QAAQ;wBACN/C,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;oBAEVlD,OAAO;wBACLC,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;gBACV;YACF,IA5BO,CAAA;QA8BX;QACA2I,SAAS;YAAC,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;8LAAC+xB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAUrM,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;SAAA;IACxE,CAAC;8KACD0L,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM3D,iPAAYuE,0BAAAA,EAA8B;gBAC9CL,SAASwD,SAASxD,OAAAA;gBAClB4e,SAASnf,MAAMhE,EAAAA;YAAAA,CAChB;YAED,IAAI,CAACK,WACH,OAAO,CAAA;YAGT,MAAM+iB,uBAAmBhZ,0OAAAA,EAA8B;gBACrD,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZxH,OAAOgL,SAASxD,OAAAA,CAAQxH,KAAAA;oBACxBsD;gBAAAA;YACF,CACD;YAED,OAAK+iB,mBAIE;gBACL/iB,WAAW+iB;YAAAA,IAJJ,CAAA;QAMX;QACAhX,SAAS;YAAC,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;oBAAC+xB,kLAAAA,EAAM;wBAAC/lB,MAAM;wBAAUrM,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;SAAA;IACxE,CAAC,CAAC;CAAA,EClJSs5B,0BAA0B;8KACrC5tB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAWA,MAAM4gB,SAAAA,KAAc;QACxCxY,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GACAA,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAI,CAACC,OAAOqiB,YACvBwS,8KAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O;wBACAqnB,WAAWhF,UAAU,IAAI,WAAW;wBACpCiF,QAAQ7gB,MAAM6gB,MAAAA,IAAU;oBAAA,CACzB,CACH,CAAC;SAAA;IAEP,CAAC;8KACD9Y,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAWA,MAAM4gB,SAAAA,KAAc;QACxCxY,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GACAA,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAKC,CAAAA,kLAChB60B,QAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O;wBACAqnB,WAAW;wBACXC,QAAQ7gB,MAAM6gB,MAAAA,IAAU;oBAAA,CACzB,CACH,CAAC;SAAA;IAEP,CAAC;8KACD9Y,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IAAIA,MAAM4gB,SAAAA,KAAc,QACtB,OAAO,CAAA;YAGT,MAAML,iBAAiBqV,oOAAAA,EAAkB7xB,QAAQ;YAEjD,OAAKwc,iBAIE;gBAACA;YAAAA,IAHC,CAAA;QAIX;QACAnY,SAAS;YACP,CAAC,EAACrE,QAAAA,EAAU/D,KAAAA,EAAAA,EAAQ,EAACugB,cAAAA,EAAAA,GACnBvgB,MAAM4N,MAAAA,CAAOrS,MAAAA,KAAW,IACpB;qBACE6yB,iLAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O,OAAOyG,MAAM4N,MAAAA,CAAO,CAAC,CAAA;wBACrBgT,WAAW;wBACXC,QAAQ7gB,MAAM6gB,MAAAA,IAAU;oBAAA,CACzB,CAAC;iBAAA,GAEJc,gOAAAA,EAAiB5d,SAASxD,OAAAA,EAASggB,eAAejkB,IAAI,IACpD0D,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAI,CAACC,OAAOqiB,QACvBwS,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O;wBACAqnB,WAAWhF,UAAU,IAAI,SAAS;wBAClCiF,QAAQ7gB,MAAM6gB,MAAAA,IAAU;oBAAA,CACzB,CACH,IACA7gB,MAAM4N,MAAAA,CAAOM,OAAAA,CAAQ,CAAC3U,OAAOqiB,QAC3BA,UAAU,IACN;kMACEwS,QAAAA,EAAM;4BACJ/lB,MAAM;wBAAA,CACP;kMACD+lB,QAAAA,EAAM;4BACJ/lB,MAAM;4BACNwY,QAAQ;wBAAA,CACT;kMACDuN,QAAAA,EAAM;4BACJ/lB,MAAM;4BACN9O;4BACAqnB,WAAW;4BACXC,QAAQ7gB,MAAM6gB,MAAAA,IAAU;wBAAA,CACzB,CAAC;qBAAA,GAEJjF,UAAU5b,MAAM4N,MAAAA,CAAOrS,MAAAA,GAAS,IAC9B;kMACE6yB,QAAAA,EAAM;4BACJ/lB,MAAM;4BACNwY,QAAQ;wBAAA,CACT;kMACDuN,QAAAA,EAAM;4BACJ/lB,MAAM;4BACN9O;4BACAqnB,WAAW;4BACXC,QAAQ7gB,MAAM6gB,MAAAA,IAAU;wBAAA,CACzB,CAAC;qBAAA,GAEJ;kMACEuN,QAAAA,EAAM;4BACJ/lB,MAAM;4BACN9O;4BACAqnB,WAAW;4BACXC,QAAQ7gB,MAAM6gB,MAAAA,IAAU;wBAAA,CACzB,CAAC;qBAEZ,CAAC;SAAA;IAEb,CAAC;8KACD9Y,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAWA,MAAM4gB,SAAAA,KAAc;QACxCxY,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GACAA,MAAM4N,MAAAA,CAAOtU,GAAAA,CAAI,CAACC,OAAOqiB,kLACvBwS,QAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O;wBACAqnB,WAAWhF,UAAU,IAAI,SAAS;wBAClCiF,QAAQ7gB,MAAM6gB,MAAAA,IAAU;oBAAA,CACzB,CACH,CAAC;SAAA;IAEP,CAAC;IACD9Y,2LAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAQ,CAAC;iBAAC;SAAA;IAC1C,CAAC;KACDN,0LAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YAAC,IAAM;wBAACgmB,8KAAAA,EAAM;wBAAC/lB,MAAM;wBAAe/N,MAAM,CAAA;AAAA,CAAA;oBAAA,CAAK,CAAC;iBAAC;SAAA;IAC5D,CAAC,CAAC;CAAA,ECjISu7B,4BAA4B;IAAA;;;GAAA,6KAKvC9tB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GACjBsuB,yBAAyBQ,KAAAA,CAAM9mB,KAAAA,CAAMhI,MAAMwN,WAAW,qNACtDpH,uBAAAA,EAA+BrC,QAAQ,6NACvCqC,uBAAAA,EAA+BrC,QAAQ;QACzCqE,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;IAAA;;;;GAAA,6KAODN,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GACPsuB,yBAAyBS,SAAAA,CAAU/mB,KAAAA,CAAMhI,MAAMwN,WAAW;QAC5DpF,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAoB,CAAC;iBAAC;SAAA;IAAA,CACrD;IAAA;;GAAA,6KAKDN,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GACPsuB,yBAAyB1V,OAAAA,CAAQgL,IAAAA,CAAK5b,KAAAA,CAAMhI,MAAMwN,WAAW;QAC/DpF,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;IAAA;;GAAA,OAKDN,uLAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GACPsuB,yBAAyB1V,OAAAA,CAAQ8K,IAAAA,CAAK1b,KAAAA,CAAMhI,MAAMwN,WAAW;QAC/DpF,SAAS;YAAC,IAAM;8LAACgmB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;CAAC,EC7CSytB,4BAA4B;8KACvC/tB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GAAAA,CAGA;gBAACgyB,4OAFmBC,wBAAAA,EAAsBjyB,QAAQ;YAAA,CAAA;QAI3DqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC+1B,kBAAAA,EAAAA,GACTA,mBAAmBz8B,GAAAA,CAAKC,CAAAA,QACtB60B,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIzC,MAAMiD,IAAAA;wBACV/E,OAAO;4BACL6T,OAAO;4BACPxM,UAAUkB,MAAMlB,QAAAA;wBAAAA;oBAClB,CACD,CACH,CAAC;SAAA;IAEP,CAAC;8KACDiJ,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GAAAA,CAGA;gBAACgyB,4OAFmBC,wBAAAA,EAAsBjyB,QAAQ;YAAA,CAAA;QAI3DqE,SAAS;YACP,CAAC6d,GAAG,EAAC8P,kBAAAA,EAAAA,GACHA,mBAAmBz8B,GAAAA,CAAKC,CAAAA,QACtB60B,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIzC,MAAMiD,IAAAA;wBACV/E,OAAO;4BAAC;4BAAS,UAAU;yBAAA;oBAAA,CAC5B,CACH,CAAC;SAAA;IAEP,CAAC;8KACDsQ,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,2NAAWi2B,mBAAAA,EAAiBj2B,MAAMlB,QAAQ,EAAEiF,QAAQ;QACvEqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAoBvJ,UAAUkB,MAAMlB,QAAAA;oBAAAA,CAAS,CAAC;iBAC5D;SAAA;IAEL,CAAC;8KACDiJ,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GAAW,yNAACi2B,mBAAAA,EAAiBj2B,MAAMlB,QAAQ,EAAEiF,QAAQ;QACxEqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LAACouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAiBvJ,UAAUkB,MAAMlB,QAAAA;oBAAAA,CAAS,CAAC;iBAAC;SAAA;IAE3E,CAAC,CAAC;CAAA,ECvDSo3B,wBAAwB;QACnCnuB,uLAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM4vB,wOAAgBuG,mBAAAA,EAAiB;gBACrC,GAAGpyB,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAImwB,gBACK;gBAACA;YAAAA,IAGH,CAAA;QACT;QACAxnB,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC4vB,aAAAA,EAAAA,GAAmB;8LAC5BxB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIgE,MAAMhE,EAAAA;wBACVomB,IAAIwN,cAAcpzB,IAAAA;oBAAAA,CACnB,CAAC;iBACH;SAAA;IAEL,CAAC;KACDuL,0LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM0vB,oOAAY0G,eAAAA,EAAa;gBAC7B,GAAGryB,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAIiwB,YACK;gBAACA;YAAAA,IAGH,CAAA;QACT;QACAtnB,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC0vB,SAAAA,EAAAA,GAAe;6LACxBtB,SAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIgE,MAAMhE,EAAAA;wBACVomB,IAAIsN,UAAUlzB,IAAAA;oBAAAA,CACf,CAAC;iBACH;SAAA;IAEL,CAAC,CAAC;CAAA,ECvES65B,0BAA0B;QACrCtuB,uLAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM4vB,wOAAgBuG,mBAAAA,EAAiBpyB,QAAQ;YAE/C,IAAI,CAAC6rB,eACH,OAAO,CAAA;YAGT,MAAM3yB,QACJ+C,MAAM6gB,MAAAA,KAAW,qNACboT,mBAAAA,EAAiB;gBACf1zB,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOq2B;YAAAA,CACR,oMACD0G,qBAAAA,EAAmB;gBACjB/1B,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOq2B;YAAAA,CACR;YAEP,OAAO;gBACLvzB,WAAW;oBACTkD,QAAQtC;oBACRV,OAAOU;gBAAAA;YACT;QAEJ;QACAmL,SAAS;YACP,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;8LAClB+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIK;oBAAAA,CACL,CAAC;iBACH;SAAA;IAEL,CAAC;8KACD0L,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM0vB,oOAAY0G,eAAAA,EAAaryB,QAAQ;YAEvC,IAAI,CAAC2rB,WACH,OAAO,CAAA;YAGT,MAAMzyB,QACJ+C,MAAM6gB,MAAAA,KAAW,qNACboT,mBAAAA,EAAiB;gBACf1zB,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOm2B;YAAAA,CACR,oMACD4G,qBAAAA,EAAmB;gBACjB/1B,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOm2B;YAAAA,CACR;YAEP,OAAO;gBAACrzB,WAAW;oBAACkD,QAAQtC;oBAAOV,OAAOU;gBAAAA;YAAK;QACjD;QACAmL,SAAS;YACP,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;8LAClB+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIK;oBAAAA,CACL,CAAC;iBACH;SAAA;IAEL,CAAC,CAAC;CAAA,ECjESk6B,yBAAyB;IAAA;;GAAA,6KAIpCxuB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,mNACPqC,uBAAAA,EAA+BrC,QAAQ,6NACvCqC,uBAAAA,EAA+BrC,QAAQ;QACzCqE,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;GAAA,6KAKDL,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,IACPqC,sOAAAA,EAA+BrC,QAAQ,6NACvCqC,sBAAAA,EAA8BrC,QAAQ;QACxCqE,SAAS,CAAA,CAAA;IAAA,CACV;8KAEDL,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,IAAI,CAACA,0NAAauE,uBAAAA,EAA2BvE,SAAS,GACpD,OAAO,CAAA;YAGT,MAAMmK,8OAAsBJ,yBAAAA,EAAiCrC,QAAQ,GAC/D0C,4OAAoBL,uBAAAA,EAA+BrC,QAAQ;YAEjE,OAAI,CAACyC,uBAAuB,CAACC,oBACpB,CAAA,IAIP,KAACzH,0MAAAA,EAAY+E,SAASxD,OAAAA,EAASiG,oBAAoBlK,IAAI,qMACvD0C,cAAAA,EAAY+E,SAASxD,OAAAA,EAASkG,kBAAkBnK,IAAI,IAE7C;gBAACD;YAAAA,IAGH,CAAA;QACT;QACA+L,SAAS;YAAC,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;8LAAC+xB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAUrM,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;SAAA;IAAA,CACvE;8KAED0L,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,OAAI,CAACA,0NAAauE,uBAAAA,EAA2BvE,SAAS,IAC7C,CAAA,IAGF;gBAACA;YAAAA;QACV;QACA+L,SAAS;YACP,CAAC6d,GAAG,EAAC5pB,SAAAA,EAAAA,GAAe;qBAClB+xB,iLAAAA,EAAM;wBAAC/lB,MAAM;wBAAUrM,IAAIK;oBAAAA,CAAU;8LACrC+xB,QAAAA,EAAM;wBAAC/lB,MAAM;oBAAA,CAAQ,CAAC;iBACvB;SAAA;IAAA,CAEJ;8KAEDN,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,IAAI,CAACA,aAAa,EAACuE,mOAAAA,EAA2BvE,SAAS,GACrD,OAAO,CAAA;YAGT,MAAMQ,sBAAsB+D,yNAAAA,EAA6BvE,SAAS,GAE5DkkB,iOAAiBna,oBAAAA,EAA4BrC,QAAQ;YAE3D,IAAI,CAACwc,gBACH,OAAO,CAAA;YAGT,MAAMiW,6NAAgB51B,mBAAAA,EAAuB;gBAC3CL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOgnB;YAAAA,CACR,GAEKkW,wBAAwB;gBAC5Bl3B,QAAQ1C;gBACRN,OAAOi6B;YAAAA,GAGHE,eAAetoB,6MAAAA,EAAW;gBAC9B7U,8MAAOo9B,iBAAAA,EAAe;oBACpBp2B,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAWo6B;oBAAAA;oBAEbl9B,OAAOgnB,eAAejkB,IAAAA;gBAAAA,CACvB;gBACDiE,SAASwD,SAASxD,OAAAA;gBAClB8N,SAAS;oBAACC,aAAa,CAAA;oBAAMC,gBAAgB,CAAA;gBAAA;YAAI,CAClD;YAED,OAAKmoB,eAIE;gBACLA;gBACAD;YAAAA,IALO,CAAA;QAOX;QACAruB,SAAS;YACP,CAAC6d,GAAG,EAACyQ,YAAAA,EAAcD,qBAAAA,EAAAA,gNACjB71B,uBAAAA,EAA2B61B,qBAAqB,IAC5C;8LACErI,QAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O,OAAOm9B;wBACP9V,WAAW;wBACXC,QAAQ;oBAAA,CACT,CAAC;iBAAA,GAEJ;qBACEuN,iLAAAA,EAAM;wBAAC/lB,MAAM;wBAAUrM,IAAIy6B;oBAAAA,CAAsB;8LACjDrI,QAAAA,EAAM;wBACJ/lB,MAAM;wBACN9O,OAAOm9B;wBACP9V,WAAW;wBACXC,QAAQ;oBAAA,CACT,CAAC;iBACH;SAAA;IAAA,CAEV;CAAC,EC9IS+V,yBAAyB;KACpC7uB,0LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GAAAA,CAGA;gBAACgyB,4OAFmBC,wBAAAA,EAAsBjyB,QAAQ;YAAA,CAAA;QAI3DqE,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC+1B,kBAAAA,EAAAA,GACTA,mBAAmBz8B,GAAAA,CAAKC,CAAAA,kLACtB60B,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIzC,MAAMiD,IAAAA;wBACV/E,OAAO;4BACLoC,OAAOmG,MAAMnG,KAAAA;wBAAAA;oBACf,CACD,CACH,CAAC;SAAA;IAEP,CAAC;8KACDkO,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GAAAA,CAGA;gBAACgyB,4OAFmBC,wBAAAA,EAAsBjyB,QAAQ;YAAA,CAAA;QAI3DqE,SAAS;YACP,CAAC6d,GAAG,EAAC8P,kBAAAA,EAAAA,GACHA,mBAAmBz8B,GAAAA,CAAKC,CAAAA,kLACtB60B,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIzC,MAAMiD,IAAAA;wBACV/E,OAAO;4BAAC,OAAO;yBAAA;oBAAA,CAChB,CACH,CAAC;SAAA;IAEP,CAAC;IACDsQ,2LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GAAW62B,wOAAAA,EAAc72B,MAAMnG,KAAK,EAAEkK,QAAQ;QACjEqE,SAAS;YAAC,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LAACouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAgBxO,OAAOmG,MAAMnG,KAAAA;oBAAAA,CAAM,CAAC;iBAAC;SAAA;IAC5E,CAAC;8KACDkO,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,GAAW,EAAC62B,uOAAAA,EAAc72B,MAAMnG,KAAK,EAAEkK,QAAQ;QAClEqE,SAAS;YAAC,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LAACouB,QAAAA,EAAM;wBAAC/lB,MAAM;wBAAaxO,OAAOmG,MAAMnG,KAAAA;oBAAAA,CAAM,CAAC;iBAAC;SAAA;IACzE,CAAC,CAAC;CAAA,ECjCEi9B,uCAAuC/uB,2LAAAA,EAAe;IAC1DjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,IAAI+2B;QAGJ,MAAMC,WAEF,CAAA,CAAA;QAEJ,KAAA,MAAWzpB,aAAaxJ,SAASxD,OAAAA,CAAQ+M,UAAAA,CAAY;YACnD,MAAMO,OAAO7N,MAAMwN,WAAAA,CAAYA,WAAAA,CAAYgW,YAAAA,CAAayT,OAAAA,CACtD1pB,UAAUJ,QACZ;YAEA,IAAI,CAACU,MACH;YAGF,MAAMqpB,mBAAmB3pB,UAAUG,WAAAA,CAAY;gBAC7C3J;gBACA/D,OAAO;oBAACqI,MAAM;oBAAewF;gBAAAA;YAAI,CAClC;YAED,IAAIqpB,iBAAiB7uB,IAAAA,KAAS,2BAA2B;gBACvD0uB,UAAUG;gBACV;YACF,OACEF,SAASp3B,IAAAA,CAAKs3B,gBAAgB;QAElC;QAEA,OAAKH,WACI;YACL1uB,MAAM;YACN8E,UAAU;YACVM,QAAQupB,SAAS19B,GAAAA,CAAK69B,CAAAA,UAAYA,QAAQ1pB,MAAM,EAAE/R,IAAAA,CAAK,IAAI;QAAA;IAKjE;IACA0M,SAAS;QACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQk3B,mBAAqB;0LAC7B9I,QAAAA,EAAM;oBACJ,GAAG8I,gBAAAA;oBACH1pB,aAAaxN,MAAMwN,WAAAA;gBAAAA,CACpB,CAAC;aACH;KAAA;AAEL,CAAC,GAEK4pB,+MAAqCrvB,iBAAAA,EAAe;IACxDjQ,IAAI;IACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,IAAI+D,SAASxD,OAAAA,CAAQ+M,UAAAA,CAAW/R,MAAAA,KAAW,GACzC,OAAO,CAAA;QAGT,MAAM87B,kBAAkBtzB,SAASxD,OAAAA,CAAQ+M,UAAAA,CAAWhU,GAAAA,CAAKiU,CAAAA,YACvDA,UAAUH,SAAAA,CAAU;gBAClBrJ;gBACA/D,OAAO;oBACL,GAAGA,KAAAA;oBACHwN,aAAaxN,MAAMwN,WAAAA,CAAYnF,IAAAA;gBAAAA;YACjC,CACD,CACH;QAEA,OAAIgvB,gBAAgB97B,MAAAA,KAAW,IACtB,CAAA,IAGF87B;IACT;IACAjvB,SAAS;QACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQq3B,kBACRA,gBAAgB/9B,GAAAA,CAAKg+B,CAAAA,2LACZlJ,QAAAA,EAAM;oBACX,GAAGkJ,cAAAA;oBACH9pB,aAAaxN,MAAMwN,WAAAA;gBAAAA,CACpB,CACF,CAAC;KAAA;AAER,CAAC,GAEY+pB,oBAAoB;8KAC/BxvB,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;YACrB,MAAMuN,gBAAYlL,2NAAAA,EAAuBrC,QAAQ,GAC3CksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ;YAElE,OAAOuN,aAAa2e;QACtB;QACA7nB,SAAS,CAAA,CAAA;IAAA,CACV;8KACDL,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;8KACD+H,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,KAAc;YACrB,MAAMuN,4NAAYlL,eAAAA,EAAuBrC,QAAQ,GAC3CksB,qOAAqB7pB,uBAAAA,EAA+BrC,QAAQ;YAElE,OAAOuN,aAAa2e;QACtB;QACA7nB,SAAS,CAAA,CAAA;IAAA,CACV;8KACDL,iBAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GACAA,SAASxD,OAAAA,CAAQlE,SAAAA,GACpB;gBACEA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAE9B,CAAA;QAEN+L,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC3D,SAAAA,EAAAA,GAAe;oBACxB+xB,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd;qBACDouB,iLAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIK;oBAAAA,CACL,CAAC;iBACH;SAAA;IAAA,CAEJ;8KACD0L,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;8KACD+H,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACX;wBACEqI,MAAM;wBACNC,QAAQA,MAAM;4BACZtI,MAAMwN,WAAAA,CAAYA,WAAAA,CAAYgW,YAAAA,CAAagU,OAAAA,CACzCx3B,MAAMmN,QAAAA,EACNnN,MAAM6N,IACR;wBACF;oBAAA,CACD;iBACF;SAAA;IAAA,CAEJ;8KACD9F,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACX;wBACEqI,MAAM;wBACNC,QAAQA,MAAM;4BACZvF,QAAQC,IAAAA,CACN,CAAA,iBAAA,EAAoBhD,MAAMmN,QAAQ,CAAA,qBAAA,EAAwBnN,MAAMyN,MAAM,CAAA,CAAA,CACxE;wBACF;oBAAA,CACD;iBACF;SAAA;IAAA,CAEJ;IAAA;;;;GAAA,GAOD1F,2LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAG5B,mNAFuBoG,qBAAAA,EAA4BrC,QAAQ,KAIzD/D,MAAMmN,QAAAA,KAAa,gBACnBnN,MAAMwN,WAAAA,CAAYnF,IAAAA,KAAS,mBAC3B;gBACA,MAAM6I,0OAAmBC,uBAAAA,EAAoBpN,QAAQ;gBAGrD,OAAO;oBACLqN,2OAHwBhL,uBAAAA,EAA+BrC,QAAQ;oBAI/DmN;oBACAumB,UAAUz3B,MAAM6N,IAAAA,CAAKK,OAAAA,CAAS3U,CAAAA,wMAC5ByF,cAAAA,EAAY+E,SAASxD,OAAAA,EAAShH,KAAK,IAC/B;4NAACm+B,mBAAAA,EAAiBn+B,KAAK,CAAC;yBAAA,GACxB,CAAA,CACN;gBAAA;YAEJ;YAEA,OAAO,CAAA;QACT;QACA6O,SAAS;YACP,CAAC6d,GAAG,EAAC7U,iBAAAA,EAAmBF,gBAAAA,EAAkBumB,QAAAA,EAAAA,GACxCA,SAASvpB,OAAAA,CAAQ,CAACypB,SAAS/b,QACzBA,UAAU6b,SAASl8B,MAAAA,GAAS,IACxB;kMACE6yB,QAAAA,EAAM;4BACJ/lB,MAAM;4BACN/N,MAAMq9B;4BACN/lB,YAAYV;4BACZvG,aAAayG,kBAAkB9X,GAAAA,CAC7B,CAAC,EAACN,IAAAA,EAAMQ,KAAAA,EAAO,GAAGT,OAAAA,GAAAA,CAAY;oCAC5BP,MAAMgB;oCACNT;gCAAAA,CAAAA,CAEJ;wBAAA,CACD;kMACDq1B,QAAAA,EAAM;4BAAC/lB,MAAM;wBAAA,CAAe,CAAC;qBAAA,GAE/B;kMACE+lB,QAAAA,EAAM;4BACJ/lB,MAAM;4BACN/N,MAAMq9B;4BACN/lB,YAAYV;4BACZvG,aAAayG,kBAAkB9X,GAAAA,CAC7B,CAAC,EAACN,IAAAA,EAAMQ,KAAAA,EAAO,GAAGT,OAAAA,GAAAA,CAAY;oCAC5BP,MAAMgB;oCACNT;gCAAAA,CAAAA,CAEJ;wBAAA,CACD,CAAC;qBAEV,CAAC;SAAA;IAAA,CAEN;8KACDgP,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACXouB,kLAAAA,EAAM;wBACJ/lB,MAAM;wBACNuF,QAAQ5N,MAAM6N,IAAAA;wBACd+S,WAAW;oBAAA,CACZ,CAAC;iBACH;SAAA;IAAA,CAEJ;8KACD7Y,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;oBACX;wBACEqI,MAAM;wBACNC,QAAQA,MAAM;4BACZvF,QAAQC,IAAAA,CACN,CAAA,mBAAA,EAAsBhD,MAAMmN,QAAQ,CAAA,qBAAA,EAAwBnN,MAAMyN,MAAM,CAAA,CAAA,CAC1E;wBACF;oBAAA,CACD;iBACF;SAAA;IAAA,CAEJ;KACD1F,0LAAAA,EAAe;QACbjQ,IAAI;QACJkQ,OAAOA,CAAC,EAACjE,QAAAA,EAAAA,GACAA,SAASxD,OAAAA,CAAQlE,SAAAA,oNACtB+J,sBAAAA,EAA8BrC,QAAQ,IACpC;gBAAC1H,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAC7B,CAAA;QAEN+L,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,EAAQ,EAAC3D,SAAAA,EAAAA,GAAe;8LACxB+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNrM,IAAIK;oBAAAA,CACL;8LACD+xB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;8KACD+H,iBAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;IACD+H,2LAAAA,EAAe;QACbjQ,IAAI;QACJsQ,SAAS;YACP,CAAC,EAACpI,KAAAA,EAAAA,GAAW;8LACXouB,QAAAA,EAAM;wBACJ/lB,MAAM;wBACNmF,aAAaxN;oBAAAA,CACd,CAAC;iBACH;SAAA;IAAA,CAEJ;OACEm1B;OACAI;OACAG;OACAC;OACAE;OACAC;OACAI;OACAU;OACAP;OACAE;IACHO;IACAM;CAAkC;AC7I7B,SAASQ,yBACd53B,KAAAA,EAKA;IACA,OACE,CAAC63B,sBAAsB73B,KAAK,KAC5B,CAAC83B,sBAAsB93B,KAAK,KAC5B,CAAC+3B,wBAAwB/3B,KAAK;AAElC;AAMA,MAAMg4B,6BAA6B;IACjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAc;CAAA;AAqKT,SAASD,wBACd/3B,KAAAA,EACgC;IAChC,OAAQg4B,2BAAiDlmB,QAAAA,CAAS9R,MAAMqI,IAAI;AAC9E;AAMA,MAAM4vB,2BAA2B;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa;CAAA;AAOR,SAASH,sBACd93B,KAAAA,EAC8B;IAC9B,OAAQi4B,yBAA+CnmB,QAAAA,CAAS9R,MAAMqI,IAAI;AAC5E;AAuJO,SAASwvB,sBACd73B,KAAAA,EAC8B;IAC9B,OAAOA,MAAMqI,IAAAA,CAAK6vB,UAAAA,CAAW,SAAS;AACxC;AC7kBA,MAAM5/B,UAAQC,cAAc,iBAAiB;AAE7C,SAAS4/B,cAAcn4B,KAAAA,EAAsB;IAC3C,OAAO83B,sBAAsB93B,KAAK,IAC9B,WACA+3B,wBAAwB/3B,KAAK,IAC3B,cACA63B,sBAAsB73B,KAAK,IACzB,WACA;AACV;AAEO,SAASo4B,aAAa,EAC3B55B,IAAAA,EACA65B,SAAAA,EACAC,uBAAAA,EACAt4B,KAAAA,EACApI,MAAAA,EACAoX,YAAAA,EACA9Q,MAAAA,EACA+B,WAAAA,EACAs4B,WAAAA,EACA9K,QAAAA,EAgBF,EAAG;IACDn1B,QAAM,CAAA,CAAA,EAAIkG,IAAI,CAAA,CAAA,EAAI25B,cAAcn4B,KAAK,CAAC,CAAA,CAAA,CAAA,EAAK8N,KAAKC,SAAAA,CAAU/N,OAAO,MAAM,CAAC,CAAC;IAEzE,MAAMw4B,iBAAiB,CACrB;WAAGF,yBACH;WAAGf,iBAAiB;KAAA,CACpBhoB,MAAAA,CAAQzH,CAAAA,aAAa;QAErB,IAAIA,SAAShQ,EAAAA,KAAO,KAClB,OAAO,CAAA;QAGT,MAAM,CAAC2gC,iBAAiB,CAAA,GACtB3wB,SAAShQ,EAAAA,CAAGga,QAAAA,CAAS,GAAG,KAAKhK,SAAShQ,EAAAA,CAAGga,QAAAA,CAAS,GAAG,IACjDhK,SAAShQ,EAAAA,CAAG4X,KAAAA,CAAM,GAAG,IACrB;YAACpU,KAAAA,CAAS;SAAA,EACV,CAACo9B,cAAc,CAAA,GAAI14B,MAAMqI,IAAAA,CAAKyJ,QAAAA,CAAS,GAAG,IAC5C9R,MAAMqI,IAAAA,CAAKqH,KAAAA,CAAM,GAAG,IACpB;YAACpU,KAAAA,CAAS;SAAA;QAcd,OATEm9B,sBAAsBn9B,KAAAA,KACtBo9B,mBAAmBp9B,KAAAA,KACnBm9B,sBAAsBC,kBAQtBD,sBAAsBn9B,KAAAA,KACtBo9B,mBAAmBp9B,KAAAA,KACnBm9B,sBAAsBz4B,MAAMqI,IAAAA,GAErB,CAAA,IAGFP,SAAShQ,EAAAA,KAAOkI,MAAMqI,IAAAA;IAC/B,CAAC;IAED,IAAImwB,eAAej9B,MAAAA,KAAW,KAAKq8B,yBAAyB53B,KAAK,GAAG;QAClEu4B,aAAaI,eAAAA,GAEb9V,+BAA+BjrB,QAAQ,MAAM;YAC3CU,QAAM,CAAA,SAAA,EAAY6/B,cAAcn4B,KAAK,CAAC,CAAA,CAAA,CAAA,EAAK8N,KAAKC,SAAAA,CAAU/N,OAAO,MAAM,CAAC,CAAC,GAEzE0iB,iBAAiB;gBACfniB,SAAS;oBACPyO;oBACA9Q;gBAAAA;gBAEF4S,WAAW;oBACT,GAAG9Q,KAAAA;oBACHpI;gBAAAA;YACF,CACD;QACH,CAAC,GAEDA,OAAO+e,QAAAA,CAAAA;QAEP;IACF;IAEA,MAAMiiB,gBAAgB34B,YAAAA;IAEtB,IAAI44B,uBAAuB,CAAA,GACvBC,6BAA6B,CAAA,GAC7BC,qBAAqB,CAAA;IAEzB,KAAA,MAAWC,iBAAiBR,eAAgB;QAC1CO;QAEA,IAAIE,YAAY,CAAA;QAEhB,IAAI;YACFA,YACED,cAAchxB,KAAAA,KAAU1M,KAAAA,KACxB09B,cAAchxB,KAAAA,CAAM;gBAClBjE,UAAU60B;gBACV54B;gBACAkxB,KAAK1D,gBAAgBC,UAAU71B,MAAM;YAAA,CACtC;QACL,EAAA,OAASmS,OAAO;YACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,sBAAA,EAAyBkF,MAAMqI,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EACtE,CACF;QACF;QAEA,IAAKsW,WAMLH;YAAAA,6BAA6B,CAAA;YAE7B,KAAA,MAAWI,aAAaF,cAAc5wB,OAAAA,CAAS;gBAC7C,MAAM+wB,kBAAkBl5B,YAAAA;gBAExB,IAAImI,UAAiC,CAAA,CAAA;gBAErC,IAAI;oBACFA,UAAU8wB,UACR;wBACEn1B,UAAUo1B;wBACVn5B;wBACAkxB,KAAK1D,gBAAgBC,UAAU71B,MAAM;oBAAA,GAEvCqhC,SACF;gBACF,EAAA,OAASlvB,OAAO;oBACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,wBAAA,EAA2BkF,MAAMqI,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EACxE,CACF;gBACF;gBAEA,IAAIva,QAAQ7M,MAAAA,KAAW,GASvB;oBAAA,IALAs9B,uBACEzwB,QAAQ3J,IAAAA,CACL26B,CAAAA,SAAWA,OAAO/wB,IAAAA,KAAS,WAAW+wB,OAAO/wB,IAAAA,KAAS,SACzD,KAAK,CAACD,QAAQ3J,IAAAA,CAAM26B,CAAAA,SAAWA,OAAO/wB,IAAAA,KAAS,SAAS,GAEtDD,QAAQ3J,IAAAA,CAAM26B,CAAAA,SAAWA,OAAO/wB,IAAAA,KAAS,SAAS,GAAG;wBAKvDqP,aAAa9f,QAAQ,MAAM;4BACzB,KAAA,MAAWwhC,UAAUhxB,QAAS;gCAC5B,IAAIgxB,OAAO/wB,IAAAA,KAAS,UAAU;oCAC5B,IAAI;wCACF+wB,OAAO9wB,MAAAA,CAAAA;oCACT,EAAA,OAASyB,OAAO;wCACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,iCAAA,EAAoCkF,MAAMqI,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EACjF,CACF;oCACF;oCAEA;gCACF;gCAEA,IAAIyW,OAAO/wB,IAAAA,KAAS,WAAW;oCAC7B,MAAMiwB,2BAA0BE,eAAe/7B,KAAAA,CAC7Cs8B,qBAAqB,CACvB;oCAEAX,aAAa;wCACX55B,MAAM;wCACN65B;wCACAC,yBAAyBA;wCACzBt4B,OAAOo5B,OAAOp5B,KAAAA;wCACdpI;wCACAoX;wCACA9Q;wCACA+B;wCACAs4B;wCACA9K;oCAAAA,CACD;oCAED;gCACF;gCAEA,IAAI2L,OAAO/wB,IAAAA,KAAS,SAAS;oCAC3B+vB,aAAa;wCACX55B,MAAM;wCACN65B;wCACAC,yBAAyBD;wCACzBr4B,OAAOo5B,OAAOp5B,KAAAA;wCACdpI;wCACAoX;wCACA9Q;wCACA+B;wCACAs4B;wCACA9K;oCAAAA,CACD;oCAED;gCACF;gCAEA2K,aAAa;oCACX55B,MAAM;oCACN65B;oCACAC,yBAAyB,CAAA,CAAA;oCACzBt4B,OAAOo5B,OAAOp5B,KAAAA;oCACdpI;oCACAoX;oCACA9Q;oCACA+B;oCACAs4B,aAAaj9B,KAAAA;oCACbmyB;gCAAAA,CACD;4BACH;wBACF,CAAC;wBAED;oBACF;oBAEA,KAAA,MAAW2L,UAAUhxB,QAAS;wBAC5B,IAAIgxB,OAAO/wB,IAAAA,KAAS,UAAU;4BAC5B,IAAI;gCACF+wB,OAAO9wB,MAAAA,CAAAA;4BACT,EAAA,OAASyB,OAAO;gCACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,iCAAA,EAAoCkF,MAAMqI,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EACjF,CACF;4BACF;4BAEA;wBACF;wBAEA,IAAIyW,OAAO/wB,IAAAA,KAAS,WAAW;4BAC7B,MAAMiwB,2BAA0BE,eAAe/7B,KAAAA,CAC7Cs8B,qBAAqB,CACvB;4BAEAX,aAAa;gCACX55B,MAAM;gCACN65B;gCACAC,yBAAyBA;gCACzBt4B,OAAOo5B,OAAOp5B,KAAAA;gCACdpI;gCACAoX;gCACA9Q;gCACA+B;gCACAs4B;gCACA9K;4BAAAA,CACD;4BAED;wBACF;wBAEA,IAAI2L,OAAO/wB,IAAAA,KAAS,SAAS;4BAC3B+vB,aAAa;gCACX55B,MAAM;gCACN65B;gCACAC,yBAAyBD;gCACzBr4B,OAAOo5B,OAAOp5B,KAAAA;gCACdpI;gCACAoX;gCACA9Q;gCACA+B;gCACAs4B;gCACA9K;4BAAAA,CACD;4BAED;wBACF;wBAEI2L,OAAO/wB,IAAAA,KAAS,aAClBtF,QAAQgH,KAAAA,CAAM,mCAAmC;oBAErD;gBAAA;YACF;YAEA;QAAA;IACF;IAEI,CAAC+uB,8BAA8BlB,yBAAyB53B,KAAK,IAAA,CAC/Du4B,aAAaI,eAAAA,GAEb9V,+BAA+BjrB,QAAQ,MAAM;QAC3CU,QAAM,CAAA,SAAA,EAAY6/B,cAAcn4B,KAAK,CAAC,CAAA,CAAA,CAAA,EAAK8N,KAAKC,SAAAA,CAAU/N,OAAO,MAAM,CAAC,CAAC,GAEzE0iB,iBAAiB;YACfniB,SAAS;gBAACyO;gBAAc9Q;YAAAA;YACxB4S,WAAW;gBACT,GAAG9Q,KAAAA;gBACHpI;YAAAA;QACF,CACD;IACH,CAAC,GAEDA,OAAO+e,QAAAA,EAAAA,IACEkiB,wBACTN,aAAaI,eAAAA;AAEjB;ACzVO,SAASU,eAIdre,KAAAA,EAA2B;IAC3B,IAAIA,MAAMzf,MAAAA,KAAW,GACnB,OAAO,CAAA,CAAA;IAIT,MAAM+9B,oBAAoBte,MAAMzL,MAAAA,CAC7B0K,CAAAA,OACCA,KAAK1R,QAAAA,KAAajN,KAAAA,CACtB,GACMi+B,uBAAuBve,MAAMzL,MAAAA,CAChC0K,CAAAA,OAASA,KAAK1R,QAAAA,KAAajN,KAAAA,CAC9B;IAEA,IAAIg+B,kBAAkB/9B,MAAAA,KAAW,GAC/B,OAAOyf;IAIT,MAAMwe,oBAAoB,IAAIlpB,IAC5BgpB,kBAAkBhgC,GAAAA,CAAK2gB,CAAAA,OAAS;YAACA,KAAK1R,QAAAA,CAASf,EAAAA;YAAIyS,IAAI;SAAC,CAC1D,GAGMwf,QAAQ,aAAA,GAAA,IAAInpB,OACZopB,WAAAA,aAAAA,GAAAA,IAAeppB,IAAAA;IAGrB,SAASqpB,WAAWnyB,EAAAA,EAAY;QACzBiyB,MAAM1kB,GAAAA,CAAIvN,EAAE,KAAA,CACfiyB,MAAM/oB,GAAAA,CAAIlJ,IAAI,aAAA,GAAA,IAAIoF,IAAAA,CAAK,GACvB8sB,SAAShpB,GAAAA,CAAIlJ,IAAI,CAAC,CAAA;IAEtB;IAGA,KAAA,MAAWyS,QAAQqf,kBAAmB;QACpC,MAAM9xB,KAAKyS,KAAK1R,QAAAA,CAASf,EAAAA;QACzBmyB,WAAWnyB,EAAE;IACf;IAGA,SAASoyB,QAAQC,MAAAA,EAAgBC,IAAAA,EAAc;QACzC,CAACL,MAAM1kB,GAAAA,CAAI8kB,MAAM,KAAK,CAACJ,MAAM1kB,GAAAA,CAAI+kB,IAAI,KAAA,CACzCL,MAAMl1B,GAAAA,CAAIs1B,MAAM,GAAG7kB,IAAI8kB,IAAI,GAC3BJ,SAAShpB,GAAAA,CAAIopB,MAAAA,CAAOJ,SAASn1B,GAAAA,CAAIu1B,IAAI,KAAK,CAAA,IAAK,CAAC,CAAA;IAClD;IAGA,KAAA,MAAW7f,QAAQqf,kBAAmB;QACpC,MAAM9xB,KAAKyS,KAAK1R,QAAAA,CAASf,EAAAA,EACnBuyB,UAAAA,aAAAA,GAAAA,IAAcntB,IAAAA;QACpB,IAAIF,MAAMuN,KAAK1R,QAAAA,CAASd,SAAAA;QAExB,MAAOiF,KAAK;YACV,MAAMstB,QAAQttB,IAAInE,QAAAA,CAASf,EAAAA;YAI3B,IAHAmyB,WAAWK,KAAK,GAGZD,QAAQhlB,GAAAA,CAAIilB,KAAK,GACnB,MAAM,IAAIl/B,MAAM,4CAA4C;YAE9Di/B,QAAQ/kB,GAAAA,CAAIglB,KAAK,GAEbttB,IAAIlE,UAAAA,KAAe,WAErBoxB,QAAQpyB,IAAIwyB,KAAK,IAGjBJ,QAAQI,OAAOxyB,EAAE,GAGnBkF,MAAMA,IAAInE,QAAAA,CAASd,SAAAA;QACrB;IACF;IAEA,MAAMwyB,QAAkB,CAAA,CAAA;IAGxB,KAAA,MAAW,CAACzyB,IAAI0yB,MAAM,CAAA,IAAKR,SACrBQ,WAAW,KACbD,MAAMr6B,IAAAA,CAAK4H,EAAE;IAIjB,MAAM2yB,SAAc,CAAA,CAAA;IAGpB,MAAOF,MAAM1+B,MAAAA,GAAS,GAAG;QACvB,MAAM6+B,YAAYH,MAAMpgB,KAAAA,CAAAA,GAClBwgB,cAAcb,kBAAkBj1B,GAAAA,CAAI61B,SAAS;QAC/CC,eACFF,OAAOv6B,IAAAA,CAAKy6B,WAAW;QAIzB,KAAA,MAAWC,cAAcb,MAAMl1B,GAAAA,CAAI61B,SAAS,KAAK,CAAA,CAAA,CAAI;YACnD,MAAMG,YAAAA,CAAab,SAASn1B,GAAAA,CAAI+1B,UAAU,KAAK,CAAA,IAAK;YACpDZ,SAAShpB,GAAAA,CAAI4pB,YAAYC,SAAS,GAC9BA,cAAc,KAChBN,MAAMr6B,IAAAA,CAAK06B,UAAU;QAEzB;IACF;IAGA,KAAA,MAAWrgB,QAAQqf,kBACZa,OAAOroB,QAAAA,CAASmI,IAAI,KACvBkgB,OAAOv6B,IAAAA,CAAKqa,IAAI;IAKpB,OAAO,CAAC;WAAGkgB,QAAQ;WAAGZ,oBAAoB;KAAA;AAC5C;ACzFO,SAASiB,qBAAqB,EACnCltB,UAAAA,EACA1V,MAAAA,EACAoX,YAAAA,EACA/E,QAAAA,EACA/L,MAAAA,EAOF,EAAG;IACD,MAAM7B,YAAYzE,OAAOyE,SAAAA,GACrB+C,sBAAsB;QACpBlB;QACAtG;QACAyH,OAAOzH,OAAOyE,SAAAA;IAAAA,CACf,IACD,MAEEkE,UAAU;QACd+M;QACA0B;QACA/E;QACA/L;QACA7B;QACAtD,OAAOnB,OAAOmB,KAAAA;IAAAA;IAGhB,OAAO;QACLuL,eAAe1M,OAAO0M,aAAAA;QACtB/D;QACAwQ,gBAAgBnZ,OAAOmZ,cAAAA;IAAAA;AAE3B;AC9BA,MAAMzY,UAAQC,cAAc,gBAAgB,GAuG/BkiC,mMAAgBt6B,QAAAA,EAAM;IACjCiQ,OAAO;QACL7P,SAAS,CAAA;QAmBTm6B,QAAQ,CAAA;QACRC,SAAS,CAAA;QACTC,OAAO,CAAA;QASPC,MAAM,CAAA;IAAC;IAETzyB,SAAS;QACP,yOAA2B0yB,SAAAA,EAAO;YAChCzC,WAAWA,CAAC,EAAC93B,OAAAA,EAASP,KAAAA,EAAAA,GAAAA,oLACpB+6B,cAAAA,EAAY/6B,OAAO,cAAc,GAE1B,aAAA,GAAA,IAAI4M,IAAI,CAAC;uBAAGrM,QAAQ83B,SAAAA;oBAAWr4B,MAAM8I,cAAc;iBAAC,CAAA;YAE7DkyB,iBAAiB,CAAA;QAAA,CAClB;QACD,8OAAgCF,SAAAA,EAAO;YACrCzC,WAAWA,CAAC,EAAC93B,OAAAA,EAASP,KAAAA,EAAAA,GAAAA,CACpB+6B,iMAAAA,EAAY/6B,OAAO,iBAAiB,GAEpCO,QAAQ83B,SAAAA,CAAUnY,MAAAA,CAAOlgB,MAAM8I,cAAc,GAEtC,aAAA,GAAA,IAAI8D,IAAI,CAAC;uBAAGrM,QAAQ83B,SAAS;iBAAC,CAAA;QAAA,CAExC;QACD,wBAAoB4C,4MAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAAA,oLACzB+6B,cAAAA,EAAY/6B,OAAO,gBAAgB,GAC5BA,KAAAA,CACR;QACD,gOAAuBi7B,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAAA,oLAC5B+6B,cAAAA,EAAY/6B,OAAO,UAAU,GACtBA,KAAAA,CACR;QACD,2NAAkBi7B,OAAAA,EAAK;YAAC5yB,MAAM;QAAA,CAAY;QAC1C,iBAAiB4yB,gNAAAA,EAAK;YAAC5yB,MAAM;QAAA,CAAW;QACxC,6NAAeyyB,SAAAA,EAAO;YACpBI,eAAeA,CAAC,EAAC36B,OAAAA,EAASP,KAAAA,EAAAA,GAAAA,oLACxB+6B,cAAAA,EAAY/6B,OAAO;oBAAC;oBAAkB,UAAU;iBAAC,GAC1C,CAAC;uBAAGO,QAAQ26B,aAAAA;oBAAel7B,KAAK;iBAAA;QAAA,CAE1C;QACD,0OAAuBm7B,iBAAAA,EAAe,CAAC,EAAC56B,OAAAA,EAAS66B,OAAAA,EAAAA,KAAa;YAC5D,KAAA,MAAWp7B,SAASO,QAAQ26B,aAAAA,CAC1BE,QAAQH,IAAAA,CAAKj7B,KAAK;QAEtB,CAAC;QACD,uNAAci7B,OAAAA,EAAK;YAAC5yB,MAAM;QAAA,CAAQ;QAClC,sOAAwByyB,SAAAA,EAAO;YAC7BI,eAAe,CAAA,CAAA;QAAA,CAChB;QACD,wOAA0BJ,SAAAA,EAAO;YAC/BO,8BAA8BA,CAAC,EAAC96B,OAAAA,EAASP,KAAAA,EAAAA,GAChCA,MAAMqI,IAAAA,KAAS,YAClB,CAAC;uBAAG9H,QAAQ86B,4BAAAA;oBAA8Br7B,KAAK;iBAAA,GAC/CO,QAAQ86B,4BAAAA;QAAAA,CAEf;QACD,mPAAiCF,kBAAAA,EAAe,CAAC,EAAC56B,OAAAA,EAAS66B,OAAAA,EAAAA,KAAa;YACtE,KAAA,MAAWp7B,SAASO,QAAQ86B,4BAAAA,CAC1BD,QAAQH,IAAAA,CAAKj7B,KAAK;QAEtB,CAAC;QACD,gPAAkC86B,SAAAA,EAAO;YACvCO,8BAA8B,CAAA,CAAA;QAAA,CAC/B;QACD,eAAeC,CAAC,EAACt7B,KAAAA,EAAAA,KAAW;YAC1B+6B,CAAAA,GAAAA,8KAAAA,CAAAA,cAAAA,EAAY/6B,OAAO,MAAM;YAEzB,IAAI;gBACFu7B,qKAAAA,CAAAA,cAAAA,CAAYC,IAAAA,CAAKx7B,MAAMpI,MAAM;YAC/B,EAAA,OAASmS,OAAO;gBACdhH,QAAQgH,KAAAA,CAAM,IAAIjP,MAAM,CAAA,uBAAA,EAA0BiP,MAAM4Y,OAAO,EAAE,CAAC;YACpE;QACF;QACA,gBAAgB8Y,CAAC,EAACl7B,OAAAA,EAAAA,KAAa;YAC7B,IAAI,CAACA,QAAQR,WAAAA,EAAa;gBACxBgD,QAAQgH,KAAAA,CAAM,gCAAgC;gBAC9C;YACF;YAEA,IAAI;gBACF,MAAMqX,mBAAmB7gB,QAAQR,WAAAA,CAAY1D,SAAAA;gBAC7Ck/B,qKAAAA,CAAAA,cAAAA,CAAYh/B,KAAAA,CAAMgE,QAAQR,WAAW,GACjCqhB,iKACF7P,aAAAA,CAAWsP,MAAAA,CAAOtgB,QAAQR,WAAAA,EAAaqhB,gBAAgB;YAE3D,EAAA,OAASrX,OAAO;gBACdhH,QAAQgH,KAAAA,CAAM,IAAIjP,MAAM,CAAA,wBAAA,EAA2BiP,MAAM4Y,OAAO,EAAE,CAAC;YACrE;QACF;QACA,yBAAyB+Y,CAAC,EAACn7B,OAAAA,EAASP,KAAAA,EAAO27B,IAAAA,EAAAA,KAAU;YACnDZ,CAAAA,GAAAA,8KAAAA,CAAAA,cAAAA,EAAY/6B,OAAO;gBAAC,gBAAgB;aAAC;YAErC,IAAI;gBACF,MAAMq4B,YAAY,CAAC;uBAAG93B,QAAQ83B,SAAAA,CAAU/rB,MAAAA,EAAQ;iBAAA,CAAEhT,GAAAA,CAC/CiO,CAAAA,SAAWA,OAAOO,QACrB;gBAEAswB,aAAa;oBACX55B,MAAM;oBACN65B;oBACAC,yBAAyBD;oBACzBr4B,OAAOA,MAAMmjB,aAAAA;oBACbvrB,QAAQoI,MAAMpI,MAAAA;oBACdoX,cAAczO,QAAQyO,YAAAA;oBACtB9Q,QAAQqC,QAAQrC,MAAAA;oBAChB+B,aAAaA,IACXu6B,qBAAqB;4BACnBltB,YAAY,CAAC;mCAAG/M,QAAQ+M,UAAU;6BAAA;4BAClC1V,QAAQoI,MAAMpI,MAAAA;4BACdoX,cAAczO,QAAQyO,YAAAA;4BACtB/E,UAAU0xB,KAAK17B,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gCAAC,aAAa;4BAAA,CAAY;4BAC/DhC,QAAQqC,QAAQrC,MAAAA;wBAAAA,CACjB;oBACHq6B,aAAav4B,MAAMu4B,WAAAA;oBACnB9K,UAAWztB,CAAAA,SAAU27B,KAAK5yB,IAAAA,CAAK/I,MAAK;gBAAA,CACrC;YACH,EAAA,OAAS+J,OAAO;gBACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,SAAA,EAAYkF,MAAMmjB,aAAAA,CAAc9a,IAAI,CAAA,iBAAA,EAAoB0B,MAAM4Y,OAAO,EACvE,CACF;YACF;QACF;QACA,gOAAkBmY,SAAAA,EAAO;YACvBzC,WAAWA,CAAC,EAAC93B,OAAAA,EAAAA,GACVA,QAAQy6B,eAAAA,GAELz6B,QAAQ83B,SAAAA,GADR,IAAIzrB,IAAIysB,eAAe,CAAC;uBAAG94B,QAAQ83B,SAAAA,CAAU/rB,MAAAA,CAAAA,CAAQ;iBAAC,CAAC;YAE7D0uB,iBAAiB,CAAA;QAAA,CAClB;IAAA;IAEHY,QAAQ;QACN,iBAAiBC,CAAC,EAACt7B,OAAAA,EAAAA,GACZA,QAAQR,WAAAA,GAINQ,QAAQR,WAAAA,CAAYkV,UAAAA,CAAW1Z,MAAAA,GAAS,IAHtC,CAAA;IAAA;AAMf,CAAC,EAAEugC,aAAAA,CAAc;IACft0B,IAAI;IACJjH,SAASA,CAAC,EAACq6B,KAAAA,EAAAA,GAAAA,CAAY;YACrBvC,WAAW,IAAIzrB,IAAIsoB,mBAAmB;YACtC8F,iBAAiB,CAAA;YACjB1tB,YAAY,IAAIV,IAAIguB,MAAMttB,UAAAA,IAAc,CAAA,CAAE;YAC1CvB,iBAAiB6uB,MAAM7uB,eAAAA;YACvBiD,cAAc4rB,MAAM5rB,YAAAA;YACpBksB,eAAe,CAAA,CAAA;YACfG,8BAA8B,CAAA,CAAA;YAC9Bn9B,QAAQ08B,MAAM18B,MAAAA;YACd7B,WAAW;YACX0/B,iBAAiBnB,MAAM3wB,QAAAA,IAAY,CAAA;YACnCgZ,WAAW2X,MAAM3X,SAAAA;YACjBsK,cAAcqN,MAAMrN,YAAAA;QAAAA,CAAAA;IAEtBz1B,IAAI;QACF,gBAAgB;YAACsQ,SAAS;QAAA;QAC1B,mBAAmB;YAACA,SAAS;QAAA;QAC7B,oBAAoB;YAClBA,UAAS0yB,sNAAAA,EAAO;gBAAC7X,WAAWA,CAAC,EAACjjB,KAAAA,EAAAA,GAAWA,MAAMijB,SAAAA;YAAAA,CAAU;QAAA;QAE3D,oBAAoB;YAClB7a,SAAS;8NACP0yB,SAAAA,EAAO;oBAACz+B,WAAWA,CAAC,EAAC2D,KAAAA,EAAAA,GAAWA,MAAM3D,SAAAA;gBAAAA,CAAU;yNAChD4+B,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAAA,CAAY;wBAAC,GAAGA,KAAAA;wBAAOqI,MAAM;oBAAA,CAAA,CAAa,CAAC;aAAA;QAAA;QAGtD,kBAAkB;YAChBD,uNAAS0yB,SAAAA,EAAO;gBAACvJ,WAAWA,CAAC,EAACvxB,KAAAA,EAAAA,GAAWA,MAAM6tB,KAAAA;YAAAA,CAAM;QAAA;IACvD;IAEFxlB,MAAM;IACN2zB,QAAQ;QACN,aAAa;YACXC,SAAS;YACTD,QAAQ;gBACN,aAAa;oBACXC,SAAS;oBACTnkC,IAAI;wBACF,kBAAkB;4BAChBsQ,SAAS;gCAAC;gCAAkB,uBAAuB;6BAAA;4BACnDJ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GACPA,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS,oBAC7BrI,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS,iBAC7BrI,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS,eAC7BrI,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS,2BAC7BrI,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS,2BAC7BrI,MAAMmjB,aAAAA,CAAc9a,IAAAA,KAAS;wBAAA;oBACjC;oBAEF2zB,QAAQ;wBACN,+BAA+B;4BAC7B9X,OAAO;gCACL,MAAM;oCACJ5rB,QACE,0DACF;gCACF,CAAC;6BAAA;4BAEH4jC,MAAM;gCACJ,MAAM;oCACJ5jC,QACE,yDACF;gCACF,CAAC;6BAAA;4BAEHR,IAAI;gCACF,sBAAsB;oCACpB;wCACEmJ,QAAQ;wCACR+G,OAAOA,CAAC,EAACzH,OAAAA,EAAAA,GAAaA,QAAQw7B,eAAAA;oCAAAA;oCAEhC;wCACE96B,QAAQ;oCAAA,CACT;iCAAA;4BAAA;wBAEL;wBAEF,aAAa;4BACXijB,OAAO;gCACL,MAAM;oCACJ5rB,QAAM,wCAAwC;gCAChD,CAAC;6BAAA;4BAEH4jC,MAAM;gCACJ,MAAM;oCACJ5jC,QAAM,uCAAuC;gCAC/C,CAAC;6BAAA;4BAEHR,IAAI;gCACF,mBAAmB;oCACjBkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAW,CAACA,MAAMiK,QAAAA;oCAC3BhJ,QAAQ;oCACRmH,SAAS;wCAAC,eAAe;qCAAA;gCAAA;4BAC3B;wBACF;oBACF;gBACF;gBAEF,UAAY;oBACVtQ,IAAI;wBACF,mBAAmB;4BACjBkQ,OAAOA,CAAC,EAAChI,KAAAA,EAAAA,GAAWA,MAAMiK,QAAAA;4BAC1BhJ,QAAQ;4BACRmH,SAAS;gCAAC,gBAAgB;6BAAA;wBAAA;wBAE5B,kBAAkB;4BAChBA,SAAS;gCAAC;gCAAkB,uBAAuB;6BAAA;wBAAA;wBAErD,MAAQ;4BACNA,SAAS;wBAAA;wBAEX,OAAS;4BACPnH,QAAQ;4BACRmH,SAAS;8OAAC0yB,SAAAA,EAAO;oCAAC/6B,aAAaA,CAAC,EAACC,KAAAA,EAAAA,GAAWA,MAAMpI,MAAAA;gCAAAA,CAAO,CAAC;6BAAA;wBAAA;oBAC5D;oBAEFqkC,SAAS;oBACTD,QAAQ;wBACN,MAAQ;4BACN9X,OAAO;gCACL,MAAM;oCACJ5rB,QAAM,kCAAkC;gCAC1C,CAAC;6BAAA;4BAEH4jC,MAAM;gCACJ,MAAM;oCACJ5jC,QAAM,gCAAgC;gCACxC,CAAC;6BAAA;4BAEHR,IAAI;gCACFqkC,WAAW;oCACT/zB,SAAS;sPACP0yB,SAAAA,EAAO;4CACLsB,cAAcA,CAAC,EAACp8B,KAAAA,EAAAA,GAAAA,CAAY;oDAC1B2Y,QAAQ3Y,MAAM2Y,MAAAA;gDAAAA,CAAAA;wCAChB,CACD,CAAC;qCAAA;oCAEJ1X,QAAQ;gCAAA;4BACV;wBACF;wBAEF,UAAY;4BACVg7B,SAAS;4BACTD,QAAQ;gCACN,oBAAoB;oCAClB9X,OAAO;wCACL,MAAM;4CACJ5rB,QACE,wDACF;wCACF,CAAC;qCAAA;oCAEH4jC,MAAM;wCACJ,MAAM;4CACJ5jC,QACE,uDACF;wCACF,CAAC;qCAAA;oCAEH+jC,QAAQ;wCACN;4CACEr0B,OAAO;4CACP/G,QAAQ;wCAAA;wCAEV;4CACEA,QAAQ;4CACRmH,SAAS;gDAAC,cAAc;6CAAA;wCAAA,CACzB;qCAAA;gCAAA;gCAGL,MAAQ;oCACN8b,OAAO;wCACL,MAAM;4CACJ5rB,QAAM,2CAA2C;wCACnD,CAAC;qCAAA;oCAEH4jC,MAAM;wCACJ,MAAM;4CACJ5jC,QAAM,2CAA2C;wCACnD,CAAC;qCAAA;oCAEHszB,OAAO;wCACL,IAAI;4CACF3qB,QAAQ;wCAAA;oCACV;gCACF;4BACF;wBACF;wBAEF,uBAAuB;4BACrBijB,OAAO;gCACL,MAAM;oCACJ5rB,QAAM,iDAAiD;gCACzD,CAAC;6BAAA;4BAEH4jC,MAAM;gCACJ,MAAM;oCACJ5jC,QAAM,gDAAgD;gCACxD;gCACA,CAAC,EAACiI,OAAAA,EAAAA,KAAa;oCACb,IAAIA,QAAQgxB,SAAAA,EACV,IAAI;wCACFhxB,QAAQgxB,SAAAA,CAAU+K,UAAAA,EAAYC,YAC5Bh8B,QAAQgxB,SACV;oCACF,EAAA,OAASxnB,OAAO;wCACdhH,QAAQgH,KAAAA,CACN,IAAIjP,MACF,CAAA,uCAAA,EAA0CiP,MAAM4Y,OAAO,EACzD,CACF;oCACF;gCAEJ;gCACAmY,uNAAAA,EAAO;oCAACvJ,WAAWj2B,KAAAA;gCAAAA,CAAU;8OAC7Bw/B,SAAAA,EAAO;oCAACsB,cAAc9gC,KAAAA;gCAAAA,CAAU,CAAC;6BAAA;4BAEnCu/B,MAAM;gCAAC,qBAAqB;6BAAA;4BAC5B/iC,IAAI;gCACF0kC,SAAS;oCAACv7B,QAAQ;gCAAA;gCAClBw7B,MAAM;oCAACx7B,QAAQ;gCAAA;4BAAM;wBACvB;oBACF;gBACF;YACF;QACF;QAEF,OAAS;YACPg7B,SAAS;YACTD,QAAQ;gBACN,cAAc;oBACZ9X,OAAO;wBACL,MAAM;4BACJ5rB,QAAM,0BAA0B;wBAClC,CAAC;qBAAA;oBAEH4jC,MAAM;wBACJ,MAAM;4BACJ5jC,QAAM,yBAAyB;wBACjC;wBACA;wBACA;wBACA,gCAAgC;qBAAA;oBAElCR,IAAI;wBACF,kBAAkB;4BAChBsQ,SAAS;wBAAA;wBAEX,UAAY;4BACVA,SAAS;wBAAA;wBAEX,sBAAsB;4BACpBnH,QAAQ;wBAAA;wBAEV,SAAW;4BACTmH,SAAS;gCAAC,wBAAwB;6BAAA;wBAAA;oBACpC;gBACF;gBAEF,UAAU;oBACRC,MAAM;oBACN2zB,QAAQ;wBACN,cAAc;4BACZC,SAAS;4BACTD,QAAQ;gCACN,MAAQ;oCACN9X,OAAO;wCACL,MAAM;4CACJ5rB,QAAM,wCAAwC;wCAChD,CAAC;qCAAA;oCAEH4jC,MAAM;wCACJ,MAAM;4CACJ5jC,QAAM,uCAAuC;wCAC/C,CAAC;qCAAA;oCAEHR,IAAI;wCACF,SAAW;4CACTsQ,SAAS;yPAAC6yB,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK,CAAC;6CAAA;wCAAA;wCAEpC,iBAAiB;4CACfiB,QAAQ;wCAAA;oCACV;gCACF;gCAEF,iBAAiB;oCACfijB,OAAO;wCACL,MAAM;4CACJ5rB,QAAM,iDAAiD;wCACzD,CAAC;qCAAA;oCAEH4jC,MAAM;wCACJ,MAAM;4CACJ5jC,QAAM,gDAAgD;wCACxD;wCACA;wCACA,gCAAgC;qCAAA;oCAElCR,IAAI;wCACF,SAAW;4CACTsQ,SAAS;gDAAC,wBAAwB;6CAAA;wCAAA;wCAEpC,sBAAsB;4CACpBnH,QAAQ;wCAAA;oCACV;gCACF;4BACF;wBACF;wBAEF,SAAW;4BACTg7B,SAAS;4BACTD,QAAQ;gCACNU,UAAU;oCACRT,SAAS;oCACTD,QAAQ;wCACNW,MAAM;4CACJzY,OAAO;gDACL,MAAM;oDACJ5rB,QAAM,+CAA+C;gDACvD,CAAC;6CAAA;4CAEH4jC,MAAM;gDACJ,MAAM;oDACJ5jC,QAAM,8CAA8C;gDACtD,CAAC;6CAAA;4CAEHR,IAAI;gDACF,aAAe;oDACbmJ,QAAQ;gDAAA;gDAEV,kBAAkB;oDAChBmH,SAAS;oDACTnH,QAAQ;gDAAA;gDAEV,UAAY;oDACVmH,SAAS;oDACTnH,QAAQ;gDAAA;4CACV;wCACF;wCAEF27B,aAAa;4CACX1Y,OAAO;gDACL,MAAM;oDACJ5rB,QACE,sDACF;gDACF,CAAC;6CAAA;4CAEH4jC,MAAM;gDACJ,MAAM;oDACJ5jC,QACE,qDACF;gDACF,CAAC;6CAAA;4CAEHR,IAAI;gDACF,oBAAoB;oDAClBmJ,QAAQ;gDAAA;gDAEV,kBAAkB;oDAChBmH,SAAS;gDAAA;gDAEX,UAAY;oDACVA,SAAS;gDAAA;4CACX;wCACF;oCACF;gCACF;gCAEFy0B,OAAO;oCACL3Y,OAAO;wCACL,MAAM;4CACJ5rB,QAAM,sCAAsC;wCAC9C;wCACA;wCACA,sBAAsB;qCAAA;oCAExB4jC,MAAM;wCACJ,MAAM;4CACJ5jC,QAAM,qCAAqC;wCAC7C,CAAC;qCAAA;oCAEHR,IAAI;wCACF,kBAAkB;4CAChBsQ,SAAS;wCAAA;wCAEX,UAAY;4CACVA,SAAS;wCAAA;oCACX;gCACF;4BACF;wBACF;oBACF;gBACF;YACF;QACF;IACF;AAEJ,CAAC;AC3rBM,SAAS00B,mBACdC,gBAAAA,EAC+B;IAC/B,IAAI,CAACA,kBACH,MAAM,IAAIjiC,MAAM,iDAAiD;IAEnE,MAAMkiC,YAAYD,iBAAiBE,EAAAA,EAAIx5B,KAAKy5B,aAAa;IAGzD,IAAI,CAACF,WACH,MAAM,IAAIliC,MAAM,qDAAqD;IAEvE,MAAMqiC,gBAAgBH,UAAU3e,MAAAA,EAAQ5a,KACrC6a,CAAAA,QAAUA,MAAM9lB,IAAAA,KAAS,UAC5B;IACA,IAAI,CAAC2kC,eACH,MAAM,IAAIriC,MAAM,0DAA0D;IAE5E,MAAMsiC,SAASD,cAAc90B,IAAAA,CAAK40B,EAAAA;IAClC,IAAI,CAACG,QACH,MAAM,IAAItiC,MACR,+DACF;IAEF,MAAMuiC,WAAWD,OAAO35B,IAAAA,CAAM65B,CAAAA,aAAeA,WAAW9kC,IAAAA,KAAS,MAAM;IAGvE,IAAI,CAAC6kC,UACH,MAAM,IAAIviC,MAAM,0CAA0C;IAE5D,MAAMyiC,oBAAqBH,OAAO7tB,MAAAA,CAC/B+tB,CAAAA,aAAeA,WAAW9kC,IAAAA,KAAS,MACtC,KAAK,CAAA,CAAA,EACCglC,mBAAoBT,iBAAiBE,EAAAA,EAAI1tB,OAC5C+O,CAAAA,QAAUA,MAAM9lB,IAAAA,KAASwkC,UAAUxkC,IACtC,KAAK,CAAA,CAAA;IACL,OAAO;QACLmC,QAAQ8iC,qBAAqBT,SAAS;QACtCprB,YAAY8rB,yBAAyBL,QAAQ;QAC7CjyB,OAAOuyB,wBAAwBX,SAAS;QACxCzjC,OAAOyjC;QACP7tB,MAAMkuB;QACNtuB,cAAcguB;QACdxyB,eAAegzB;QACf5+B,cAAc6+B;QACd7yB,aAAc0yB,SAA4B1yB,WAAAA;IAAAA;AAE9C;AAEA,SAAS8yB,qBAAqBT,SAAAA,EAA6B;IACzD,MAAMY,aAAaZ,UAAU3e,MAAAA,EAAQ5a,KAClCo6B,CAAAA,UAAYA,QAAQrlC,IAAAA,KAAS,OAChC;IACA,IAAI,CAAColC,YACH,MAAM,IAAI9iC,MACR,wEACF;IAEF,MAAMgjC,aACJF,WAAWv1B,IAAAA,CAAKgG,OAAAA,EAAShD,QACzBuyB,WAAWv1B,IAAAA,CAAKgG,OAAAA,CAAQhD,IAAAA,EAAMkE,OAC3B1V,CAAAA,QAA2BA,MAAMd,KACpC;IACF,IAAI,CAAC+kC,cAAcA,WAAWviC,MAAAA,KAAW,GACvC,MAAM,IAAIT,MACR,4FAEF;IAEF,OAAOgjC;AACT;AAEA,SAASJ,yBAAyBL,QAAAA,EAA4B;IAC5D,OAAQA,SAAiBzrB,UAAAA;AAC3B;AAEA,SAAS+rB,wBAAwBX,SAAAA,EAA6B;IAC5D,MAAMe,YAAYf,UAAU3e,MAAAA,EAAQ5a,KACjCo6B,CAAAA,UAAYA,QAAQrlC,IAAAA,KAAS,UAChC;IACA,IAAI,CAACulC,WACH,MAAM,IAAIjjC,MACR,2EACF;IAEF,MAAMkjC,YACJD,UAAU11B,IAAAA,CAAKgG,OAAAA,EAAShD,QACxB0yB,UAAU11B,IAAAA,CAAKgG,OAAAA,CAAQhD,IAAAA,CAAKkE,MAAAA,CAAQlE,CAAAA,OAA0BA,KAAKtS,KAAK;IAC1E,IAAI,CAACilC,WACH,MAAM,IAAIljC,MAAM,mDAAmD;IAErE,OAAOkjC;AACT;AAEA,SAASd,cAAc70B,IAAAA,EAA0C;IAC/D,OAAIA,KAAKA,IAAAA,GACA60B,cAAc70B,KAAKA,IAAI,IAG5BA,KAAK7P,IAAAA,KAAS,UACT6P,OAGF;AACT;ACtGA,MAAM41B,qBAAqB,CAAA,IAAA,EAAOv3B,oBAAAA,CAAqB,CAAA,MAAA,CAAA,EACjDw3B,mBAAmB,CAAA,IAAA,EAAOx3B,oBAAAA,CAAqB,CAAA,IAAA,CAAA,EAE/Cy3B,uBAA+C;IACnDC,OAAOH;IACPI,KAAKH;AACP,GAEMI,cAAsC;IAC1C,CAACL,kBAAkB,CAAA,EAAG;IACtB,CAACC,gBAAgB,CAAA,EAAG;AACtB,GAEMK,sBAA8C;IAClDH,OAAO;IACPC,KAAK;AACP;AA0EO,SAASG,2BACdtgC,MAAAA,EACc;IACd,OAAO;QACLyM,aAAazM,OAAOyM,WAAAA,CAAYrR,GAAAA,CAAKyc,CAAAA,aAAAA,CAAgB;gBACnDvd,MAAMud,WAAWvd,IAAAA;gBACjB6lB,QAAQtI,WAAWsI,MAAAA,CAAO/kB,GAAAA,CAAKglB,CAAAA,QAAAA,CAAW;wBACxC9lB,MAAM8lB,MAAM9lB,IAAAA;wBACZ6P,MAAMiW,MAAMjW,IAAAA,CAAKo2B,QAAAA;wBACjBpvB,OAAOiP,MAAMjW,IAAAA,CAAKgH,KAAAA;oBAAAA,CAAAA,CAClB;gBACFA,OAAO0G,WAAW1G,KAAAA;YAAAA,CAAAA,CAClB;QACF9V,OAAO;YACLf,MAAM0F,OAAO3E,KAAAA,CAAMf,IAAAA;QAAAA;QAErBmG,cAAcT,OAAOS,YAAAA,CAAarF,GAAAA,CAAKsF,CAAAA,cAAAA,CAAiB;gBACtDpG,MAAMoG,YAAYpG,IAAAA;gBAClB6lB,QAAQzf,YAAYyf,MAAAA,CAAO/kB,GAAAA,CAAKglB,CAAAA,QAAAA,CAAW;wBACzC9lB,MAAM8lB,MAAM9lB,IAAAA;wBACZ6P,MAAMiW,MAAMjW,IAAAA,CAAKo2B,QAAAA;wBACjBpvB,OAAOiP,MAAMjW,IAAAA,CAAKgH,KAAAA;oBAAAA,CAAAA,CAClB;gBACFA,OAAOzQ,YAAYyQ,KAAAA;YAAAA,CAAAA,CACnB;QACFuC,YAAY1T,OAAO0T,UAAAA,CAAWtY,GAAAA,CAAKuY,CAAAA,YAAAA,CAAe;gBAChDrZ,MAAMqZ,UAAU9Y,KAAAA;gBAChBsW,OAAOwC,UAAUxC,KAAAA;gBACjBtW,OAAO8Y,UAAU9Y,KAAAA;YAAAA,CAAAA,CACjB;QACFwR,eAAerM,OAAOqM,aAAAA,CAAcjR,GAAAA,CAAK2M,CAAAA,eAAAA,CAAkB;gBACzDzN,MAAMyN,aAAazN,IAAAA;gBACnB6lB,QAAQpY,aAAaoY,MAAAA,CAAO/kB,GAAAA,CAAKglB,CAAAA,QAAAA,CAAW;wBAC1C9lB,MAAM8lB,MAAM9lB,IAAAA;wBACZ6P,MAAMiW,MAAMjW,IAAAA,CAAKo2B,QAAAA;wBACjBpvB,OAAOiP,MAAMjW,IAAAA,CAAKgH,KAAAA;oBAAAA,CAAAA,CAClB;gBACFA,OAAOpJ,aAAaoJ,KAAAA;YAAAA,CAAAA,CACpB;QACFF,MAAM;YACJ3W,MAAM0F,OAAOiR,IAAAA,CAAK3W,IAAAA;QAAAA;QAEpBmC,QAAQuD,OAAOvD,MAAAA,CAAOrB,GAAAA,CAAKO,CAAAA,QAAAA,CAAW;gBACpCrB,MAAMqB,MAAMd,KAAAA;gBACZsW,OAAOxV,MAAMwV,KAAAA;gBACbtW,OAAOc,MAAMd,KAAAA;YAAAA,CAAAA,CACb;QACFqS,OAAOlN,OAAOkN,KAAAA,CAAM9R,GAAAA,CAAK+R,CAAAA,OAAAA,CAAU;gBACjC7S,MAAM6S,KAAKtS,KAAAA;gBACXsW,OAAOhE,KAAKgE,KAAAA;gBACZtW,OAAOsS,KAAKtS,KAAAA;YAAAA,CAAAA,CACZ;IAAA;AAEN;AAUO,SAAS2lC,sCAEdtgB,UAAAA,EAA+D;IAC/D,MAAMzf,eACJyf,YAAYzf,cAAcrF,IAAKsF,CAAAA,qKAC7B+/B,aAAAA,EAAW;YACTt2B,MAAM;YAAA,sEAAA;YAAA,wCAAA;YAGN7P,MAAM2lC,oBAAAA,CAAqBv/B,YAAYpG,IAAI,CAAA,IAAKoG,YAAYpG,IAAAA;YAC5D6W,OACEzQ,YAAYyQ,KAAAA,KAAU/T,KAAAA,IAAAA,yEAAAA;YAElBijC,mBAAAA,CAAoB3/B,YAAYpG,IAAI,CAAA,GACpCoG,YAAYyQ,KAAAA;YAClBgP,QACEzf,YAAYyf,MAAAA,EAAQ/kB,IAAKglB,CAAAA,QAAAA,CAAW;oBAClC9lB,MAAM8lB,MAAM9lB,IAAAA;oBACZ6P,MAAMiW,MAAMjW,IAAAA;oBACZgH,OAAOiP,MAAMjP,KAAAA,IAASuvB,2JAAAA,EAAUtgB,MAAM9lB,IAAI;gBAAA,CAAA,CAC1C,KAAK,CAAA,CAAA;QAAA,CACV,CACH,KAAK,CAAA,CAAA,EAED+R,gBACJ6T,YAAY7T,eAAejR,IAAK2M,CAAAA,sKAC9B04B,aAAAA,EAAW;YACTt2B,MAAM;YAAA,sEAAA;YAAA,wCAAA;YAGN7P,MAAM2lC,oBAAAA,CAAqBl4B,aAAazN,IAAI,CAAA,IAAKyN,aAAazN,IAAAA;YAE9D6W,OACEpJ,aAAaoJ,KAAAA,KAAU/T,KAAAA,IAAAA,yEAAAA;YAEnBijC,mBAAAA,CAAoBt4B,aAAazN,IAAI,CAAA,GACrCyN,aAAaoJ,KAAAA;YACnBgP,QACEpY,aAAaoY,MAAAA,EAAQ/kB,IAAKglB,CAAAA,QAAAA,CAAW;oBACnC9lB,MAAM8lB,MAAM9lB,IAAAA;oBACZ6P,MAAMiW,MAAMjW,IAAAA;oBACZgH,OAAOiP,MAAMjP,KAAAA,QAASuvB,uJAAAA,EAAUtgB,MAAM9lB,IAAI;gBAAA,CAAA,CAC1C,KAAK,CAAA,CAAA;QAAA,CACV,CACH,KAAK,CAAA,CAAA,EAEDqmC,4KAAqBC,cAAAA,EAAY;QACrCz2B,MAAM;QACN7P,MAAM;QACNykC,IAAI,CACF;eAAGt+B,aAAarF,GAAAA,CAAKsF,CAAAA,cAAAA,CAAiB;oBAACyJ,MAAMzJ,YAAYpG,IAAAA;gBAAAA,CAAAA,CAAM;YAC/D;gBACE6P,MAAM;gBACN7P,MAAM;gBACNykC,IAAI1yB,cAAcjR,GAAAA,CAAK2M,CAAAA,eAAAA,CAAkB;wBAACoC,MAAMpC,aAAazN,IAAAA;oBAAAA,CAAAA,CAAM;gBACnE+B,OAAO;oBACLqX,YACEwM,YAAYxM,YAAYtY,IAAKuY,CAAAA,YAAAA,CAAe;4BAC1CxC,OAAOwC,UAAUxC,KAAAA,qJAASuvB,UAAAA,EAAU/sB,UAAUrZ,IAAI;4BAClDO,OAAO8Y,UAAUrZ,IAAAA;wBAAAA,CAAAA,CACjB,KAAK,CAAA,CAAA;oBACTmS,aACEyT,YAAYzT,aAAarR,IAAKyc,CAAAA,aAAAA,CAAgB;4BAC5Cvd,MAAMud,WAAWvd,IAAAA;4BACjB6P,MAAM;4BACNgH,OAAO0G,WAAW1G,KAAAA;4BAClBgP,QACEtI,WAAWsI,MAAAA,EAAQ/kB,IAAKglB,CAAAA,QAAAA,CAAW;oCACjC9lB,MAAM8lB,MAAM9lB,IAAAA;oCACZ6W,OAAOiP,MAAMjP,KAAAA,qJAASuvB,UAAAA,EAAUtgB,MAAM9lB,IAAI;oCAC1C6P,MAAMiW,MAAMjW,IAAAA;gCAAAA,CAAAA,CACZ,KAAK,CAAA,CAAA;wBAAA,CAAA,CACT,KAAK,CAAA,CAAA;gBAAA;gBAEX+C,OACEgT,YAAYhT,OAAO9R,IAAK+R,CAAAA,OAAAA,CAAU;wBAChCtS,OAAOsS,KAAK7S,IAAAA;wBACZ6W,OAAOhE,KAAKgE,KAAAA,qJAASuvB,UAAAA,EAAUvzB,KAAK7S,IAAI;oBAAA,CAAA,CACxC,KAAK,CAAA,CAAA;gBACTmC,QACEyjB,YAAYzjB,QAAQrB,IAAKO,CAAAA,QAAAA,CAAW;wBAClCd,OAAOc,MAAMrB,IAAAA;wBACb6W,OAAOxV,MAAMwV,KAAAA,qJAASuvB,UAAAA,EAAU/kC,MAAMrB,IAAI;oBAAA,CAAA,CAC1C,KAAK,CAAA,CAAA;YAAA,CACV;SAAA;IAAA,CAEJ,GAEK0F,6JAAS6gC,SAAAA,CAAa5uB,OAAAA,CAAQ;QAClCC,OAAO;YAACyuB,oBAAoB;eAAGlgC,cAAc;eAAG4L,aAAa;SAAA;IAAA,CAC9D,EAAEhG,GAAAA,CAAI,eAAe,GAEhBy6B,YAAYlC,mBAAmB5+B,MAAM;IAE3C,OAAO;QACL,GAAG8gC,SAAAA;QACHrgC,cAAcqgC,UAAUrgC,YAAAA,CAAarF,GAAAA,CAAKsF,CAAAA,cACxC0/B,WAAAA,CAAY1/B,YAAYpG,IAAI,CAAA,KAAM8C,KAAAA,IAC7B;gBACC,GAAGsD,WAAAA;gBACHpG,MAAM8lC,WAAAA,CAAY1/B,YAAYpG,IAAI,CAAA;gBAClC6P,MAAM;oBACJ,GAAGzJ,YAAYyJ,IAAAA;oBACf7P,MAAM8lC,WAAAA,CAAY1/B,YAAYpG,IAAI,CAAA;gBAAA;YACpC,IAEFoG,WACN;QACA2L,eAAey0B,UAAUz0B,aAAAA,CAAcjR,GAAAA,CAAK2M,CAAAA,eAC1Cq4B,WAAAA,CAAYr4B,aAAazN,IAAI,CAAA,KAAM8C,KAAAA,IAC9B;gBACC,GAAG2K,YAAAA;gBACHzN,MAAM8lC,WAAAA,CAAYr4B,aAAazN,IAAI,CAAA;YAAA,IAErCyN,YACN;IAAA;AAEJ;ACrQA,MAAM3N,UAAQC,cAAc,kBAAkB,GAOjC0mC,qMAAkB9+B,QAAAA,EAAM;IACnCiQ,OAAO;QACL7P,SAAS,CAAA;QAWTm6B,QAAQ,CAAA;QAoBRE,OAAO,CAAA;QAKPD,SAAS,CAAA;IAAC;IAWZvyB,SAAS;QACP,iOAAmB0yB,SAAAA,EAAO;YACxB7wB,UAAUA,CAAC,EAAC1J,OAAAA,EAASP,KAAAA,EAAAA,GACnBA,MAAMqI,IAAAA,KAAS,oBAAoBrI,MAAMiK,QAAAA,GAAW1J,QAAQ0J,QAAAA;QAAAA,CAC/D;QACD,uNAAcgxB,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAAA,EACnB+6B,gMAAAA,EAAY/6B,OAAO,OAAO,GACnB;gBAACqI,MAAM;gBAAkBmP,OAAOxX,MAAMwX,KAAAA;YAAAA,CAAAA,CAC9C;QACD,uOAA8ByjB,OAAAA,EAAK;YAAC5yB,MAAM;QAAA,CAAwB;QAClE,qOAAkB8yB,iBAAAA,EAAe,CAAC,EAAC56B,OAAAA,EAAS66B,OAAAA,EAAAA,KAAa;YACvD,KAAA,MAAW8D,QAAQ3+B,QAAQ4+B,gBAAAA,CACzB/D,QAAQH,IAAAA,CAAK;gBACX5yB,MAAM;gBACNoQ,SAASymB,KAAKzmB,OAAAA;gBACd1U,UAAUm7B,KAAKnmC,KAAAA;YAAAA,CAChB;QAEL,CAAC;QACD,yOAA2B+hC,SAAAA,EAAO;YAChCqE,kBAAkB,CAAA,CAAA;QAAA,CACnB;QACD,gOAAkBrE,SAAAA,EAAO;YACvBqE,kBAAkBA,CAAC,EAAC5+B,OAAAA,EAASP,KAAAA,EAAAA,KAAW;gBAGtC,KAFA+6B,gMAAAA,EAAY/6B,OAAO,OAAO,GAEtBO,QAAQ4+B,gBAAAA,CAAiB5jC,MAAAA,KAAW,GACtC,OAAO;oBACL;wBACEquB,aAAa5pB,MAAM4pB,WAAAA;wBACnB7wB,OAAOiH,MAAMjH,KAAAA;wBACb0f,SAAS;4BAACzY,MAAMwX,KAAK;yBAAA;oBAAA,CACtB;iBAAA;gBAIL,MAAM4nB,WAAW7+B,QAAQ4+B,gBAAAA,CAAiBnjC,EAAAA,CAAG,CAAA,CAAE;gBAE/C,OAAIojC,YAAYA,SAASxV,WAAAA,KAAgB5pB,MAAM4pB,WAAAA,GACtCrpB,QAAQ4+B,gBAAAA,CAAiB1iC,KAAAA,CAAM,GAAG,CAAA,CAAE,EAAEsI,MAAAA,CAAO;oBAClDhM,OAAOiH,MAAMjH,KAAAA;oBACb6wB,aAAawV,SAASxV,WAAAA;oBACtBnR,SAAS,CAAC;2BAAG2mB,SAAS3mB,OAAAA;wBAASzY,MAAMwX,KAAK;qBAAA;gBAAA,CAC3C,IAGIjX,QAAQ4+B,gBAAAA,CAAiBp6B,MAAAA,CAAO;oBACrChM,OAAOiH,MAAMjH,KAAAA;oBACb6wB,aAAa5pB,MAAM4pB,WAAAA;oBACnBnR,SAAS;wBAACzY,MAAMwX,KAAK;qBAAA;gBAAA,CACtB;YACH;QAAA,CACD;QACD,4OAA8BsjB,SAAAA,EAAO;YACnCuE,oBAAoB,CAAA,CAAA;QAAA,CACrB;QACD,6NAAevE,SAAAA,EAAO;YACpBuE,oBAAoBA,CAAC,EAAC9+B,OAAAA,EAASP,KAAAA,EAAAA,GAC7BA,MAAMqI,IAAAA,KAAS,UACX,CAAC;uBAAG9H,QAAQ8+B,kBAAAA;oBAAoBr/B,KAAK;iBAAA,GACrCO,QAAQ8+B,kBAAAA;QAAAA,CACf;QACD,gPAA6BlE,iBAAAA,EAAe,CAAC,EAAC56B,OAAAA,EAAS66B,OAAAA,EAAAA,KAAa;YAClE,KAAA,MAAWp7B,SAASO,QAAQ8+B,kBAAAA,CAC1BjE,QAAQH,IAAAA,CAAKj7B,KAAK;QAEtB,CAAC;IAAA;IAEHs/B,QAAQ;QACN,wMAAiBC,eAAAA,EAIf,CAAC,EAAC3E,KAAAA,EAAOnN,QAAAA,EAAAA,KAAc;YACvB,MAAM+R,gBAAgB5E,MAAM76B,WAAAA,CAAYqU,KAAAA;YAExCwmB,OAAAA,MAAM76B,WAAAA,CAAYqU,KAAAA,GAASc,CAAAA,OAAO;gBAC5BA,GAAG7M,IAAAA,KAAS,iBAAiB6M,GAAG7M,IAAAA,KAAS,gBAC3ColB,SAAS;oBAACplB,MAAM;gBAAA,CAAS,IAEzBolB,SAAS;oBAACplB,MAAM;gBAAA,CAAa,GAE/Bm3B,cAActqB,EAAE;YAClB,GAEO,MAAM;gBACX0lB,MAAM76B,WAAAA,CAAYqU,KAAAA,GAAQorB;YAC5B;QACF,CAAC;QACD,6MAAsBD,eAAAA,EAAa,CAAC,EAAC9R,QAAAA,EAAAA,KAAc;YACjD,MAAMgS,WAAWC,YACf,MAAM;gBACJjS,SAAS;oBAACplB,MAAM;gBAAA,CAAwB;YAC1C,GACAs3B,QAAQC,IAAIC,aAAa,SAAS,2CAAM,CAC1C;YAEA,OAAO,MAAM;gBACXC,cAAcL,QAAQ;YACxB;QACF,CAAC;IAAA;IAEH7D,QAAQ;QACN,gBAAgBmE,CAAC,EAACx/B,OAAAA,EAAAA,GAAaA,QAAQ0J,QAAAA;QACvC,2NAAa+1B,UAAAA,EAAQ;YAACC,QAAQ;QAAA,CAAS;QACvC,wBAAwBC,CAAC,EAAC3/B,OAAAA,EAAAA,gJACxBzE,SAAAA,CAAOqkC,aAAAA,CAAc5/B,QAAQR,WAAW;IAAA;IAE5CqgC,QAAQ;QACN,iBAAiBT,QAAQC,IAAIC,aAAa,SAAS,2CAAI;IAAA;AAE3D,CAAC,EAAE/D,aAAAA,CAAc;IACft0B,IAAI;IACJjH,SAASA,CAAC,EAACq6B,KAAAA,EAAAA,GAAAA,CAAY;YACrBuE,kBAAkB,CAAA,CAAA;YAClBE,oBAAoB,CAAA,CAAA;YACpBp1B,UAAU2wB,MAAM3wB,QAAAA;YAChB/L,QAAQ08B,MAAM18B,MAAAA;YACd6B,aAAa66B,MAAM76B,WAAAA;QAAAA,CAAAA;IAErBjI,IAAI;QACF,mBAAmB;YACjBsQ,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEFC,MAAM;IACN2zB,QAAQ;QACNiE,QAAQ;YACNhE,SAAS;YACToE,QAAQ;gBACNC,KAAK;gBACL1F,OAAOA,CAAC,EAACr6B,OAAAA,EAAAA,GAAAA,CAAc;wBAACR,aAAaQ,QAAQR,WAAAA;oBAAAA,CAAAA;YAAW;YAE1Di8B,QAAQ;gBACNW,MAAM;oBACJzY,OAAO;wBACL,MAAM;4BACJ5rB,QAAM,qBAAqB;wBAC7B,CAAC;qBAAA;oBAEH4jC,MAAM;wBACJ,MAAM;4BACJ5jC,QAAM,oBAAoB,GAC1BA,QAAM,uBAAuB;wBAC/B,CAAC;qBAAA;oBAEHR,IAAI;wBACFmoC,QAAQ;4BACNh/B,QAAQ;wBAAA;oBACV;gBACF;gBAEFg/B,QAAQ;oBACNrU,OAAO;wBACL,iBAAiB;4BACf3qB,QAAQ;4BACRmH,SAAS;gCACP,MAAM;oCACJ9P,QAAM,sBAAsB;gCAC9B,CAAC;6BAAA;wBAAA;oBAEL;oBAEFR,IAAI;wBACF,cAAc;4BACZmJ,QAAQ;wBAAA;wBAEV,QAAU;4BACRA,QAAQ;4BACRs/B,SAAS,CAAA;wBAAA;oBACX;gBACF;YACF;QACF;QAEFC,WAAW;YACTvE,SAAS;YACTD,QAAQ;gBACN,MAAQ;oBACN9X,OAAO;wBACL,MAAM;4BACJ5rB,QAAM,wBAAwB;wBAChC,CAAC;qBAAA;oBAEH4jC,MAAM;wBACJ,MAAM;4BACJ5jC,QAAM,uBAAuB;wBAC/B,CAAC;qBAAA;oBAEHR,IAAI;wBACF0f,OAAO;4BACL;gCACExP,OAAO;gCACPI,SAAS;oCAAC;oCAAe,gBAAgB;iCAAA;gCACzCnH,QAAQ;4BAAA;4BAEV;gCACEmH,SAAS;oCAAC;oCAAc,gBAAgB;iCAAA;gCACxCnH,QAAQ;4BAAA,CACT;yBAAA;oBAAA;gBAEL;gBAEF,yBAAyB;oBACvBijB,OAAO;wBACL,MAAM;4BACJ5rB,QAAM,yCAAyC;wBACjD;wBACA,4BAA4B;qBAAA;oBAE9B4jC,MAAM;wBACJ,MAAM;4BACJ5jC,QAAM,wCAAwC;wBAChD,CAAC;qBAAA;oBAEH+nC,QAAQ;wBACNC,KAAK;oBAAA;oBAEPxoC,IAAI;wBACF,yBAAyB;4BACvBkQ,gNAAOy4B,OAAAA,EAAI;0OACTC,MAAAA,EAAI,cAAc;yOAClBA,OAAAA,EAAI,WAAW;gCACf,sBAAsB;6BACvB;4BACDz/B,QAAQ;4BACRmH,SAAS;gCACP;gCACA;gCACA;gCACA,yBAAyB;6BAAA;wBAAA;wBAG7B,OAAS;4BACP;gCACEJ,OAAO;gCACPI,SAAS;oCAAC;oCAAe,gBAAgB;iCAAA;4BAAA;4BAE3C;gCACEA,SAAS;oCAAC;oCAAc,gBAAgB;iCAAA;4BAAA,CACzC;yBAAA;oBAAA;gBAEL;YACF;QACF;IACF;AAEJ,CAAC,GCxRK9P,UAAQC,cAAc,cAAc;AAEnC,SAASooC,kBACd/oC,MAAAA,EACAkI,WAAAA,EACA;IACA,MAAMsQ,QAAQtQ,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;IA8iBhD,OA5iBiC;QAC/B3B,OAAOA,MAAY;YACjBuD,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACNzQ;YAAAA,CACD;QACH;QACA4jC,MAAMA,MAAY;YAChB17B,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACNzQ;YAAAA,CACD;QACH;QACAgpC,YAAajvB,CAAAA,SAAuB;YAClC7R,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNwJ,WAAWF;gBAAAA;gBAEb/Z;YAAAA,CACD;QACH;QACAipC,YAAa/hC,CAAAA,aAA2B;YACtCgB,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNvJ;gBAAAA;gBAEFlH;YAAAA,CACD;QACH;QACAkpC,kBAAmBjnC,CAAAA,UAAwB;YACzCiG,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNxO;gBAAAA;gBAEFjC;YAAAA,CACD;QACH;QACAmpC,cAAepvB,CAAAA,SAA0B;YACvC,MAAM5N,WAAWgQ,kBAAkB;gBACjCD,qBAAqBhU,YAAYG,WAAAA,CAAAA;gBACjC+T,qBAAqBpc;YAAAA,CACtB;YAID,+NAFyBuZ,sBAAAA,EAAoBpN,QAAQ,EAE7B+N,QAAAA,CAASH,IAAI;QACvC;QACApX,OAAOA,MAAgB;YACrB,MAAMwJ,WAAWgQ,kBAAkB;gBACjCD,qBAAqBhU,YAAYG,WAAAA,CAAAA;gBACjC+T,qBAAqBpc;YAAAA,CACtB,GAEKwZ,4OAAoBC,4BAAAA,EAA0BtN,QAAQ,GACtDmN,2OAAmBC,sBAAAA,EAAoBpN,QAAQ;YAErD,OAAO,CAAC;mBAAGqN,mBAAmB;mBAAGF,gBAAgB;aAAA;QACnD;QACA0S,MAAMA,MAAY;YAChB9jB,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QACH;QACA8rB,MAAMA,MAAY;YAChB5jB,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;gBAAA;gBAERzQ;YAAAA,CACD;QACH;QACAipB,QAASxkB,CAAAA,cAAqC;YAC5C,MAAM2kC,iBAAiB/9B,aAAa;gBAClC1C,SAAS;oBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CnF,OAAOnB,OAAOmB,KAAAA;oBACdsD;gBAAAA;gBAEFiI,eAAe1M,OAAO0M,aAAAA;YAAAA,CACvB;YAEG08B,8JACFzvB,aAAAA,CAAWsP,MAAAA,CAAOjpB,QAAQopC,cAAc,iJAExCzvB,aAAAA,CAAWmJ,QAAAA,CAAS9iB,MAAM,GAG5BA,OAAO+e,QAAAA,CAAAA;QACT;QACArZ,YAAYA,MAAqC;YAC/C,IAAI1F,OAAOyE,SAAAA,EAAW;gBACpB,MAAM9C,qJAAQmE,OAAAA,CAAKujC,UAAAA,CACjBrpC,QACAA,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACxC;gBACA,IAAIlD,OACF,OAAOqB,eACL;oBAACrB,KAAK;iBAAA,EACN6W,MAAM7W,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA;YAEP;QAEF;QACA6F,YAAYA,MAAqC;YAC/C,IAAI7F,OAAOyE,SAAAA,EAAW;gBACpB,MAAM9C,qJAAQmE,OAAAA,CAAKujC,UAAAA,CACjBrpC,QACAA,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACxC;gBACA,IAAIlD,SAAS3B,OAAOoH,WAAAA,CAAYzF,KAAK,GAMnC,OALgBqB,eACd;oBAACrB,KAAK;iBAAA,EACN6W,MAAM7W,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA,CACYqC,QAAAA,CAASrC,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA;YAE1D;QAEF;QACA0kC,aAAaA,CACX74B,MACAtP,UACS;YACT,IAAIsP,KAAK7P,IAAAA,KAAS4X,MAAMjB,IAAAA,CAAK3W,IAAAA,EAC3BsH,OAAAA,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNpC,cAAc;wBACZzN,MAAM6P,KAAK7P,IAAAA;wBACXO;oBAAAA;gBACF;gBAEFnB;YAAAA,CACD,GAEMA,OAAOyE,SAAAA,GACT+C,sBAAsB;gBACrBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;gBAC1CtG;gBACAyH,OAAOzH,OAAOyE,SAAAA;YAAAA,CACf,GAAGE,MAAMC,QAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;YAGN,IAAI,CAAC5E,OAAOyE,SAAAA,EACV,MAAM,IAAIvB,MAAM,6BAA6B;YAE/C,MAAM,CAACwC,UAAU,CAAA,GAAIlE,MAAMyC,IAAAA,8IACzBC,SAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;gBACnBoE,IAAIpE,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC;gBAC1CR,OAAQC,CAAAA,IAAMA,EAAE1C,KAAAA,KAAU4W,MAAM7W,KAAAA,CAAMf,IAAAA;YAAAA,CACvC,CACH,CAAA,CAAE,CAAC,CAAA,IAAK;gBAAC8C,KAAAA,CAAS;aAAA;YAClB,IAAI,CAACgC,YACH,MAAM,IAAIxC,MAAM,uBAAuB;YAEzC,IACEuN,KAAK7P,IAAAA,KAAS4X,MAAMjB,IAAAA,CAAK3W,IAAAA,IACzB,CAAC4X,MAAM7F,aAAAA,CAAc9L,IAAAA,CAAMvD,CAAAA,IAAMA,EAAE1C,IAAAA,KAAS6P,KAAK7P,IAAI,GAErD,MAAM,IAAIsC,MACR,yDACF;YAkBF,MAAMZ,QAhBQhB,aACZ;gBACE;oBACEF,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;oBACxCxV,OAAO4W,MAAM7W,KAAAA,CAAMf,IAAAA;oBACnByB,UAAU;wBACR;4BACEjB,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQyO,YAAAA,CAAAA;4BACxCxV,OAAO6O,KAAK7P,IAAAA;4BACZ,GAAIO,SAAgB,CAAA,CAAA;wBAAC,CACtB;qBAAA;gBAAA,CAEJ;aAAA,EAEH;gBAACI,aAAa2G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YAAAA,CAClD,CAAA,CAAE,CAAC,CAAA,CACiBjE,QAAAA,CAAS,CAAC,CAAA,EACxBknC,iBAAiBvpC,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,GACvDkuB,cAAazwB,MAAMV,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAAA,EACxC4oC,yJAAY1jC,OAAAA,CAAK6G,GAAAA,CAAI3M,QAAQupC,cAAc;YAIjD,OAAIxW,eAAcyW,UAAU5nC,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAAA,IAAAA,CAC/CF,QACE,wEACF,GACAV,OAAOkqB,IAAAA,CAAK;gBAACC,UAAU;gBAAG5B,MAAM;YAAA,CAAY,CAAA,gJAG9C5O,aAAAA,CAAWQ,WAAAA,CAAYna,QAAQsC,OAAO;gBACpC2mB,QAAQ,CAAA;gBACR7kB,IAAIpE,OAAOyE,SAAAA;YAAAA,CACZ,GACDzE,OAAO+e,QAAAA,IAEA/e,OAAOyE,SAAAA,GACT+C,sBAAsB;gBACrBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;gBAC1CtG;gBACAyH,OAAOzH,OAAOyE,SAAAA;YAAAA,CACf,GAAGE,MAAMC,QAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;QACN;QACAmkB,aAAaA,CACXtY,MACAtP,QAAAA,CAEA+G,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACN9O,OAAO;wBACLC,OAAO6O,KAAK7P,IAAAA;wBACZ,GAAIO,SAAgB,CAAA,CAAA;oBAAC;oBAEvB6nB,WAAW;gBAAA;gBAEbhpB;YAAAA,CACD,GAEMA,OAAOyE,SAAAA,GACT+C,sBAAsB;gBACrBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;gBAC1CtG;gBACAyH,OAAOzH,OAAOyE,SAAAA;YAAAA,CACf,GAAGE,MAAMC,QAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;QAEN6kC,eAAgBxnC,CAAAA,UAA2B;YACzC,IAAI;gBACF,OAAOsF,cAAc;oBAACvH;oBAAQiC;gBAAAA,CAAM;YACtC,EAAA,OAAQ;gBAEN,OAAO,CAAA;YACT;QACF;QACAynC,cAAexiC,CAAAA,aAA8B;YAC3C,IAAI;gBACF,OAAOD,iBAAiB;oBAACjH;oBAAQkH;gBAAAA,CAAS;YAC5C,EAAA,OAAQ;gBAEN,OAAO,CAAA;YACT;QACF;QACAorB,QAAS5rB,CAAAA,UACA,CAAC;gBAAC8R,MAAM7W,KAAAA,CAAMf,IAAAA;gBAAM4X,MAAMjB,IAAAA,CAAK3W,IAAI;aAAA,CAAEsZ,QAAAA,CAASxT,QAAQ9E,KAAK;QAEpE+nC,YACE/kC,CAAAA,SAIG;YACH,MAAMglC,YAAYv+B,aAAa;gBAC7B1C,SAAS;oBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CnF,OAAOnB,OAAOmB,KAAAA;oBACdsD,WAAW;wBAACE,OAAO;4BAACC;4BAAMiD,QAAQ;wBAAA;wBAAIF,QAAQ;4BAAC/C;4BAAMiD,QAAQ;wBAAA;oBAAC;gBAAC;gBAEjE6E,eAAe1M,OAAO0M,aAAAA;YAAAA,CACvB;YAED,IAAIk9B,WAAW;gBACb,MAAM,CAACjoC,OAAOqC,SAAS,CAAA,gJAAIE,SAAAA,CAAOQ,IAAAA,CAChC1E,QACA4pC,UAAUjlC,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACjC;gBACA,IAAIlD,SAASqC,aAAa,OAAOrC,MAAMP,IAAAA,IAAS,UAAU;oBACxD,IAAIwD,KAAKjB,MAAAA,KAAW,KAAKimC,UAAUjlC,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,KAAW,GACvD,OAAO;wBACLX,eAAe;4BAACrB,KAAK;yBAAA,EAAG6W,MAAM7W,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA;wBAC3C;4BAAC;gCAACQ,MAAMO,MAAMP,IAAAA;4BAAAA,CAAK;yBAAC;qBAAA;oBAGxB,MAAMyoC,UAAU7mC,eACd;wBAACrB,KAAK;qBAAA,EACN6W,MAAM7W,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA;oBACH,IAAIA,OAAOoH,WAAAA,CAAYyiC,OAAO,GAAG;wBAC/B,MAAMC,UAAUD,QAAQxnC,QAAAA,CAASunC,UAAUjlC,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA;wBACxD,IAAIklC,SACF,OAAO;4BACLA;4BACA;gCAAC;oCAAC1oC,MAAMO,MAAMP,IAAAA;gCAAAA;gCAAO;gCAAY;oCAACA,MAAM0oC,QAAQ1oC,IAAAA;gCAAAA,CAAK;6BAAC;yBAAA;oBAG5D;gBACF;YACF;YACA,OAAO;gBAACsC,KAAAA;gBAAWA,KAAAA,CAAS;aAAA;QAC9B;QACAqmC,aACErjC,CAAAA,YACwB;YACxB,IAAIhC;YACJ,IAAI;gBACF,MAAM,CAAC2d,IAAI,CAAA,GAAI7gB,MAAMyC,IAAAA,CACnBC,sJAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;oBACnBoE,IAAI,CAAA,CAAA;oBACJC,OAAQC,CAAAA,IAAMA,EAAElD,IAAAA,KAASsF,QAAQtF,IAAAA;gBAAAA,CAClC,KAAK,CAAA,CACR,CAAA,CAAE,CAAC,CAAA,IAAK;oBAACsC,KAAAA,CAAS;iBAAA;gBAClBgB,6KAAOi/B,cAAAA,CAAYl6B,SAAAA,CAAUzJ,QAAQqiB,IAAI;YAC3C,EAAA,OAAQ,CACN;YAEF,OAAO3d;QACT;QACA8U,mBAAmBA,MAA4B;YAC7C,IAAI,CAACxZ,OAAOyE,SAAAA,IAAazE,OAAOyE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,GAAS,GAC5D,OAAO,CAAA,CAAA;YAET,IAAI;gBACF,MAAM6V,oBAA0C,CAAA,CAAA,EAC1CwwB,QAAQ9lC,sJAAAA,CAAOC,KAAAA,CAAMnE,QAAQ;oBACjCoE,IAAIpE,OAAOyE,SAAAA;oBACXJ,OAAQK,CAAAA,oJACNd,OAAAA,CAAKC,MAAAA,CAAOa,IAAI,KAChBA,KAAK/B,KAAAA,KAAUe,KAAAA,KACflC,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,KACxB+B,KAAK/B,KAAAA,CAAMgB,MAAAA,GAAS;gBAAA,CACvB;gBACD,KAAA,MAAW,CAAC4T,MAAM3S,IAAI,CAAA,IAAKolC,MAAO;oBAChC,MAAM,CAACroC,KAAK,CAAA,gJAAIuC,SAAAA,CAAOQ,IAAAA,CAAK1E,QAAQ4E,MAAM;wBAACmZ,OAAO;oBAAA,CAAE;oBAChD/d,OAAOoH,WAAAA,CAAYzF,KAAK,KAC1BA,MAAMQ,QAAAA,EAAUwS,QAAS2F,CAAAA,QAAQ;wBAE7B1W,4IAAAA,CAAAA,OAAAA,CAAKC,MAAAA,CAAO0T,IAAI,KAChBA,KAAK5U,KAAAA,IACLnB,MAAMC,OAAAA,CAAQ8V,KAAK5U,KAAK,KACxB4U,KAAK5U,KAAAA,CAAMuX,QAAAA,CAASI,IAAIlZ,IAAI,KAE5BoY,kBAAkBxR,IAAAA,CAAKsS,GAAG;oBAE9B,CAAC;gBAEL;gBACA,OAAOd;YACT,EAAA,OAAQ;gBACN,OAAO,CAAA,CAAA;YACT;QACF;QACAywB,oBACEC,CAAAA,mBACY;YACZ,MAAM/9B,WAAWgQ,kBAAkB;gBACjCD,qBAAqBhU,YAAYG,WAAAA,CAAAA;gBACjC+T,qBAAqBpc;YAAAA,CACtB;YAED,+NAAO09B,qBAAAA,EAAmBwM,cAAc,EAAE/9B,QAAQ;QACpD;QACAg+B,eAAeA,CAAC15B,MAAMtP,UAAU;YAC9B,IAAIyjB;YAEJ1gB,oJAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB9e,QAAQ,MAAM;gBACtC4kB,QAAQH,qCAAqC;oBAC3C9b,SAAS;wBACPyO,cAAclP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;wBAChD9Q,QAAQkS;oBAAAA;oBAEVU,WAAW;wBAETiF,YAAY;4BAACvd,MAAM6P,KAAK7P,IAAAA;4BAAMO,OAAOA,SAAS,CAAA;wBAAC;wBAC/CnB;oBAAAA;gBACF,CACD;YACH,CAAC,GACDA,OAAO+e,QAAAA,CAAAA,GAEA6F;QACT;QACA0D,QAAQA,CACN7jB,WACAgS,YACS;YACT,IAAIhS,WAAW;gBACb,MAAMgD,QAAQ4D,aAAa;oBACzB1C,SAAS;wBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;wBAC1CnF,OAAOnB,OAAOmB,KAAAA;wBACdsD;oBAAAA;oBAEFiI,eAAe1M,OAAO0M,aAAAA;gBAAAA,CACvB;gBAGD,IAAI,CAAA,CADFjF,SAASA,MAAME,MAAAA,CAAO/C,IAAAA,CAAKjB,MAAAA,GAAS,KAAK8D,MAAM9C,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,GAAS,CAAA,GAEnE,MAAM,IAAIT,MAAM,eAAe;gBAEjC,IAAIuE,OAAO;oBACT,IAAI,CAACgP,SAAS7P,QAAQ6P,SAAS7P,SAAS,YAAY;wBAClDlG,QAAM,+BAA+B,gJACrCiZ,aAAAA,CAAW2O,MAAAA,CAAOtoB,QAAQ;4BACxBoE,IAAIqD;4BACJ4X,SAAS,CAAA;4BACTxC,OAAO,CAAA;wBAAA,CACR,GACD7c,OAAO+e,QAAAA,CAAAA;wBACP;oBACF;oBAgCA,IA/BItI,SAAS7P,SAAS,YAAA,CACpBlG,QAAM,sCAAsC,gJAC5CiZ,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;wBAC7BoE,IAAIqD;wBACJoV,OAAO,CAAA;wBACPxY,OAAQK,CAAAA,OAEJ1E,OAAOoH,WAAAA,CAAY1C,IAAI,KACtB,CAAC1E,OAAOoH,WAAAA,CAAY1C,IAAI,kJAAK0lC,UAAAA,CAAatnC,SAAAA,CAAU4B,IAAI;oBAAA,CAG9D,CAAA,GAEC+R,SAAS7P,SAAS,cAAA,CACpBlG,QAAM,wCAAwC,gJAC9CiZ,aAAAA,CAAW0O,WAAAA,CAAYroB,QAAQ;wBAC7BoE,IAAIqD;wBACJoV,OAAO,CAAA;wBACPxY,OAAQK,CAAAA,OAEJA,KAAK9C,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAAA,IAAAA,gBAAAA;4BACzB,CAACZ,OAAOoH,WAAAA,CAAY1C,IAAI,kJAAK0lC,UAAAA,CAAatnC,SAAAA,CAAU4B,IAAI;oBAAA,CAG9D,CAAA,GAOC1E,OAAOqC,QAAAA,CAASsB,MAAAA,KAAW,GAAG;wBAChC,MAAM+xB,mBAAmB1c,uBACvB9Q,YAAYG,WAAAA,CAAAA,EAAcM,OAC5B;wBACA3I,OAAOqC,QAAAA,GAAW;4BAACqzB,gBAAgB;yBAAA,EACnC11B,OAAOmB,KAAAA,GAAQ;4BAACu0B,gBAAgB;yBAAA,EAEhC/c,eACE;4BACErS,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;4BAC1CnF,OAAOnB,OAAOmB,KAAAA;wBAAAA,GAEhB;4BACEuL,eAAe1M,OAAO0M,aAAAA;4BACtByG,cAAcnT,OAAOmT,YAAAA;wBAAAA,CAEzB;oBACF;oBAEAnT,OAAO+e,QAAAA,CAAAA;gBACT;YACF;QACF;QACAsrB,kBACE55B,CAAAA,SACS;YACTvI,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACN0N,YAAY;wBAACvd,MAAM6P,KAAK7P,IAAAA;oBAAAA;gBAAI;gBAE9BZ;YAAAA,CACD;QACH;QACAsqC,cAAcA,MAA8B;YAC1C,IAAIC,UAA2B;YAC/B,IAAIvqC,OAAOyE,SAAAA,EAAW;gBACpB,MAAM+lC,WAAW/8B,6BAA6Bd,GAAAA,CAAI3M,OAAOyE,SAAS;gBAClE,IAAI+lC,UACF,OAAOA;gBAETD,UAAU/iC,sBAAsB;oBAC9BlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CtG;oBACAyH,OAAOzH,OAAOyE,SAAAA;gBAAAA,CACf,GACDgJ,6BAA6BqL,GAAAA,CAAI9Y,OAAOyE,SAAAA,EAAW8lC,OAAO;YAC5D;YACA,OAAOA;QACT;QACAE,UAAUA,IACDznC,eACLhD,OAAOqC,QAAAA,EACPmW,MAAM7W,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI3M,MAAM,CACjC;QAEF0qC,sBAAsBA,IACb,CAAC,CAAC1qC,OAAOyE,SAAAA,iJAAaS,QAAAA,CAAM6M,WAAAA,CAAY/R,OAAOyE,SAAS;QAEjEkmC,qBAAqBA,IACZ,CAAC,CAAC3qC,OAAOyE,SAAAA,iJAAaS,QAAAA,CAAMsZ,UAAAA,CAAWxe,OAAOyE,SAAS;QAEhEinB,aAAaA,MAAM;YACjB1rB,OAAO0rB,WAAAA,CAAAA,GACP1rB,OAAO+e,QAAAA,CAAAA;QACT;QACA6rB,aAAaA,IACJ5nC,eAAehD,OAAO4qC,WAAAA,IAAepyB,MAAM7W,KAAAA,CAAMf,IAAI;QAE9DiqC,yBAAyBA,CACvBC,YACAC,eACG;YAEH,MAAMC,SAAS3/B,aAAa;gBAC1B1C,SAAS;oBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CnF,OAAOnB,OAAOmB,KAAAA;oBACdsD,WAAWqmC;gBAAAA;gBAEbp+B,eAAe1M,OAAO0M,aAAAA;YAAAA,CACvB,GACKu+B,SAAS5/B,aAAa;gBAC1B1C,SAAS;oBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;oBAC1CnF,OAAOnB,OAAOmB,KAAAA;oBACdsD,WAAWsmC;gBAAAA;gBAEbr+B,eAAe1M,OAAO0M,aAAAA;YAAAA,CACvB;YAQD,oJALsBxH,QAAAA,CAAMyiB,OAAAA,CAAQqjB,MAAM,kJAAK9lC,QAAAA,CAAMyiB,OAAAA,CAAQsjB,MAAM,kJAG5B/lC,QAAAA,CAAMgV,QAAAA,CAAS8wB,QAAQC,MAAM;QAGtE;IAAA;AAIJ;ACjgBO,MAAMC,eAAe3iC,2LAAAA,EAAM;IAChCiQ,OAAO;QACL7P,SAAS,CAAA;QAITm6B,QAAQ,CAAA;QACRC,SAAS,CAAA;IAAC;AAEd,CAAC,EAAEmB,aAAAA,CAAc;IACft0B,IAAI;IACJjH,SAAS;QACPwiC,eAAe;QACfC,qBAAqB,CAAA;IAAA;IAEvBlrC,IAAI;QACF,SAAW;YACTsQ,SAAS;gBACP0yB,uNAAAA,EAAO;oBACLkI,qBAAqB,CAAA;gBAAA,CACtB;gBACD/H,gNAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK,CAAC;aAAA;QAAA;QAG5B,WAAa;YACX;gBACEgI,OAAOA,CAAC,EAACzH,OAAAA,EAAAA,GAAaA,QAAQyiC,mBAAAA;gBAC9B56B,SAAS;kOACP0yB,SAAAA,EAAO;wBACLiI,eAAeA,CAAC,EAAC/iC,KAAAA,EAAAA,GAAWA,MAAM3D,SAAAA;oBAAAA,CACnC;6NACD4+B,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK;kOACvB86B,SAAAA,EAAO;wBACLkI,qBAAqB,CAAA;oBAAA,CACtB,CAAC;iBAAA;YAAA;YAGN;gBACEh7B,OAAOA,CAAC,EAACzH,OAAAA,EAASP,KAAAA,EAAAA,GAAWO,QAAQwiC,aAAAA,KAAkB/iC,MAAM3D,SAAAA;gBAC7D+L,SAAS;oBACP0yB,uNAAAA,EAAO;wBACLiI,eAAeA,CAAC,EAAC/iC,KAAAA,EAAAA,GAAWA,MAAM3D,SAAAA;oBAAAA,CACnC;6NACD4+B,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK;qBACvB86B,sNAAAA,EAAO;wBACLkI,qBAAqB,CAAA;oBAAA,CACtB,CAAC;iBAAA;YAAA,CAEL;SAAA;QAEH,KAAK;YACH56B,SAAS;yNACP6yB,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK;gBACvB86B,uNAAAA,EAAO;oBACLkI,qBAAqB,CAAA;gBAAA,CACtB,CAAC;aAAA;QAAA;IAEN;AAEJ,CAAC;AC1IM,SAASC,cACdlqC,KAAAA,EACAqX,KAAAA,EACApB,YAAAA,EACY;IACZ,IAAIk0B,aAA4C,MAC5CC,QAAQ,CAAA;IACZ,MAAMC,kBAAkB;QACtBhzB,MAAMjB,IAAAA,CAAK3W,IAAAA,EACX;WAAG4X,MAAM7F,aAAAA,CAAcjR,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI,CAAC;KAAA,EAErC6qC,kBAAkB;QACtBjzB,MAAM7W,KAAAA,CAAMf,IAAAA,EACZ;WAAG4X,MAAMzR,YAAAA,CAAarF,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI,CAAC;KAAA;IAI1C,OAAIO,UAAUuC,KAAAA,IACL;QAAC6nC,OAAO,CAAA;QAAMD,YAAY;QAAMnqC;IAAAA,IAGrC,CAACK,MAAMC,OAAAA,CAAQN,KAAK,KAAKA,MAAMwC,MAAAA,KAAW,IACrC;QACL4nC,OAAO,CAAA;QACPD,YAAY;YACVzqB,SAAS;gBAACyP,uKAAAA,EAAM,CAAA,CAAE,CAAC;aAAA;YACnBob,aACE;YACFlK,QAAQ;YACRnf,MAAMlhB;YAENwqC,MAAM;gBACJD,aACE;gBACFlK,QAAQ;YAAA;QACV;QAEFrgC;IAAAA,IAAAA,CAIFA,MAAM0F,IAAAA,CAAK,CAACiF,KAAwBkY,UAA2B;QAE7D,IAAI,6IAAC4nB,UAAAA,EAAc9/B,GAAG,GACpBw/B,OAAAA,aAAa;YACXzqB,SAAS;oBAACyP,mKAAAA,EAAM;oBAACtM,KAAK;iBAAC,CAAC;aAAA;YACxB0nB,aAAa,CAAA,6BAAA,EAAgCxzB,OAAOpM,GAAG,CAAC,EAAA;YACxD01B,QAAQ;YACRnf,MAAMvW;YAEN6/B,MAAM;gBACJD,aACE;gBACFlK,QAAQ;gBACR9sB,QAAQ;oBAACsP;gBAAAA;YAAK;QAChB,GAEK,CAAA;QAGT,IAAI,CAAClY,IAAI1K,IAAAA,IAAQ,OAAO0K,IAAI1K,IAAAA,IAAS,UACnCkqC,OAAAA,aAAa;YACXzqB,SAAS;+KAAC/H,MAAAA,EAAI;oBAAC,GAAGhN,GAAAA;oBAAK1K,MAAMgW,aAAAA;gBAAa,GAAI;oBAAC4M,KAAK;iBAAC,CAAC;aAAA;YACtD0nB,aAAa,CAAA,eAAA,EAAkB1nB,KAAK,CAAA,0BAAA,CAAA;YACpCwd,QAAQ;YACRnf,MAAMvW;YAEN6/B,MAAM;gBACJD,aACE;gBACFlK,QAAQ;gBACR9sB,QAAQ;oBAACsP;gBAAAA;YAAK;QAChB,GAEK,CAAA;QAGT,IAAI,CAAClY,IAAIlK,KAAAA,IAAS,CAAC6pC,gBAAgBvxB,QAAAA,CAASpO,IAAIlK,KAAK,GAAG;YAEtD,IAAIkK,IAAIlK,KAAAA,KAAU,SAAS;gBACzB,MAAMiqC,uBAAuBrzB,MAAM7W,KAAAA,CAAMf,IAAAA;gBACzC0qC,OAAAA,aAAa;oBACXzqB,SAAS;uLACP/H,MAAAA,EAAI;4BAAC,GAAGhN,GAAAA;4BAAKlK,OAAOiqC;wBAAAA,GAAuB;4BAAC;gCAACzqC,MAAM0K,IAAI1K,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAEhEsqC,aAAa,CAAA,iBAAA,EAAoB5/B,IAAI1K,IAAI,CAAA,yBAAA,EAA4B0K,IAAIlK,KAAK,CAAA,oDAAA,EAAuDiqC,oBAAoB,CAAA,CAAA,CAAA;oBACzJrK,QAAQ,CAAA,UAAA,EAAaqK,oBAAoB,CAAA,CAAA,CAAA;oBACzCxpB,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BAAC1E,KAAKlE,IAAI1K,IAAAA;4BAAM0qC,kBAAkBD;wBAAAA;oBAAoB;gBAChE,GAEK,CAAA;YACT;YAGA,OACE,CAAC//B,IAAIlK,KAAAA,oMACLwF,cAAAA,EAAY;gBAACd,QAAQkS;YAAAA,GAAQ;gBAAC,GAAG1M,GAAAA;gBAAKlK,OAAO4W,MAAM7W,KAAAA,CAAMf,IAAAA;YAAAA,CAAK,IAAA,CAE9D0qC,aAAa;gBACXzqB,SAAS;mLACP/H,MAAAA,EAAI;wBAAC,GAAGhN,GAAAA;wBAAKlK,OAAO4W,MAAM7W,KAAAA,CAAMf,IAAAA;oBAAAA,GAAO;wBAAC;4BAACQ,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBAE5DsqC,aAAa,CAAA,iBAAA,EAAoB5/B,IAAI1K,IAAI,CAAA,2EAAA,EAA8EoX,MAAM7W,KAAAA,CAAMf,IAAI,CAAA,CAAA,CAAA;gBACvI4gC,QAAQ,CAAA,UAAA,EAAahpB,MAAM7W,KAAAA,CAAMf,IAAI,CAAA,CAAA,CAAA;gBACrCyhB,MAAMvW;gBAEN6/B,MAAM;oBACJD,aACE;oBACFlK,QACE;oBACF9sB,QAAQ;wBAAC1E,KAAKlE,IAAI1K,IAAAA;wBAAM0qC,kBAAkBtzB,MAAM7W,KAAAA,CAAMf,IAAAA;oBAAAA;gBAAI;YAC5D,GAEK,CAAA,CAAA,IAGJkL,IAAIlK,KAAAA,GAAAA,CAiBT0pC,aAAa;gBACXzqB,SAAS;mLAACyP,QAAAA,EAAM;wBAAC;4BAAClvB,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACnCsqC,aAAa,CAAA,iBAAA,EAAoB5/B,IAAI1K,IAAI,CAAA,qBAAA,EAAwB0K,IAAIlK,KAAK,CAAA,CAAA,CAAA;gBAC1E4/B,QAAQ;gBACRnf,MAAMvW;gBAEN6/B,MAAM;oBACJD,aACE;oBACFlK,QAAQ;oBACR9sB,QAAQ;wBAAC1E,KAAKlE,IAAI1K,IAAAA;wBAAM2qC,UAAUjgC,IAAIlK,KAAAA;oBAAAA;gBAAK;YAC7C,GAEK,CAAA,CAAA,IAAA,CA7BL0pC,aAAa;gBACXzqB,SAAS;wBAACyP,mKAAAA,EAAM;wBAAC;4BAAClvB,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACnCsqC,aAAa,CAAA,iBAAA,EAAoB5/B,IAAI1K,IAAI,CAAA,8BAAA,CAAA;gBACzCogC,QAAQ;gBACRnf,MAAMvW;gBAEN6/B,MAAM;oBACJD,aACE;oBACFlK,QAAQ;oBACR9sB,QAAQ;wBAAC1E,KAAKlE,IAAI1K,IAAAA;oBAAAA;gBAAI;YACxB,GAEK,CAAA,CAAA;QAiBX;QAGA,IAAI0K,IAAIlK,KAAAA,KAAU4W,MAAM7W,KAAAA,CAAMf,IAAAA,EAAM;YAClC,MAAMkB,YAAYgK;YAElB,IAAIhK,UAAUO,QAAAA,IAAY,CAACb,MAAMC,OAAAA,CAAQK,UAAUO,QAAQ,GACzDipC,OAAAA,aAAa;gBACXzqB,SAAS;mLAAC/H,MAAAA,EAAI;wBAACzW,UAAU,CAAA,CAAA;oBAAA,GAAK;wBAAC;4BAACjB,MAAMU,UAAUV,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACvDsqC,aAAa,CAAA,sBAAA,EAAyB5pC,UAAUV,IAAI,CAAA,6CAAA,CAAA;gBACpDogC,QAAQ;gBACRnf,MAAMvgB;gBAEN6pC,MAAM;oBACJD,aACE;oBACFlK,QACE;oBACF9sB,QAAQ;wBAAC1E,KAAKlO,UAAUV,IAAAA;oBAAAA;gBAAI;YAC9B,GAEK,CAAA;YAGT,IACEU,UAAUO,QAAAA,KAAaqB,KAAAA,KACtBlC,MAAMC,OAAAA,CAAQK,UAAUO,QAAQ,KAAKP,UAAUO,QAAAA,CAASsB,MAAAA,KAAW,GACpE;gBACA,MAAMqoC,UAAU;oBACdpqC,OAAO4W,MAAMjB,IAAAA,CAAK3W,IAAAA;oBAClBQ,MAAMgW,aAAAA;oBACN1U,MAAM;oBACNC,OAAO,CAAA,CAAA;gBAAA;gBAET2oC,OAAAA,aAAa;oBACXW,aAAa,CAAA;oBACbprB,SAAS;uLACPoP,eAAAA,EAAa,CAAA,CAAA,EAAI;4BAAC;gCAAC7uB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO,UAAU;yBAAC;uLAC/C4uB,SAAAA,EAAO;4BAACgc,OAAO;yBAAA,EAAG,SAAS;4BAAC;gCAAC5qC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY,CAAC;yBAAC,CAAC;qBAAA;oBAE/DsqC,aAAa,CAAA,mCAAA,EAAsC5/B,IAAI1K,IAAI,CAAA,WAAA,CAAA;oBAC3DogC,QAAQ;oBACRnf,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BAAC1E,KAAKlE,IAAI1K,IAAAA;wBAAAA;oBAAI;gBACxB,GAEK,CAAA;YACT;YAEA,MAAM8qC,kJAAe/sB,UAAAA,wIACnBoD,UAAAA,EACEzgB,UAAUO,QAAAA,CACPsV,MAAAA,CAAQ5L,CAAAA,MAAQA,IAAInK,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAI,EAC7Cc,GAAAA,CAAKqK,CAAAA,MAAQA,IAAIpJ,KAAAA,IAAS,CAAA,CAAE,CACjC,CACF;YAGA,IAAInB,MAAMC,OAAAA,CAAQqK,IAAI3J,QAAQ,KAAK2J,IAAI3J,QAAAA,CAASwB,MAAAA,GAAS,GAAG;gBAC1D,MAAMwoC,qBAA2BhtB,yIAAAA,EAC/BrT,IAAI3J,QAAAA,CACDT,GAAAA,CAAK4Y,CAAAA,MAAQA,IAAIlZ,IAAI,EACrBuW,MAAAA,CAAQ3H,CAAAA,MAAQ,CAACk8B,aAAahyB,QAAAA,CAASlK,GAAG,CAAC,CAChD;gBACA,IAAIm8B,eAAexoC,MAAAA,GAAS,GAC1B2nC,OAAAA,aAAa;oBACXW,aAAa,CAAA;oBACbprB,SAASsrB,eAAezqC,GAAAA,CAAK87B,CAAAA,aAC3BlN,uKAAAA,EAAM;4BAAC;gCAAClvB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMo8B;4BAAAA,CAAW;yBAAC,CAC1D;oBACAkO,aAAa,CAAA,wDAAA,EAA2DS,eAAeroC,IAAAA,CACrF,IACF,CAAC,CAAA,CAAA,CAAA;oBACD09B,QAAQ;oBACRnf,MAAMvW;oBACN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BACN1E,KAAKlE,IAAI1K,IAAAA;4BACT+qC,gBAAgBA,eAAezqC,GAAAA,CAAK0qC,CAAAA,IAAMA,EAAEj9B,QAAAA,EAAU;wBAAA;oBACxD;gBACF,GAEK,CAAA;YAEX;YAMA,MAAMk9B,gBAHkBH,aAAav0B,MAAAA,CAClCoC,CAAAA,OAAS,CAACvB,MAAMwB,UAAAA,CAAWtY,GAAAA,CAAK4qC,CAAAA,MAAQA,IAAI1rC,IAAI,EAAEsZ,QAAAA,CAASH,IAAI,CAClE,EACsCpC,MAAAA,CACnCoC,CAAAA,OACCjY,UAAUK,QAAAA,KAAauB,KAAAA,KACvB,CAAC5B,UAAUK,QAAAA,CAAS0J,IAAAA,CAAMyO,CAAAA,MAAQA,IAAIlZ,IAAAA,KAAS2Y,IAAI,CACvD;YACA,IAAIsyB,cAAc1oC,MAAAA,GAAS,GAAG;gBAC5B,MAAM4oC,eAAezqC,UAAUO,QAAAA,CAASsV,MAAAA,CACrC5L,CAAAA,MACCA,IAAInK,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAAA,IACzBY,MAAMC,OAAAA,CAAQsK,IAAIpJ,KAAK,KACvBoJ,IAAIpJ,KAAAA,CAAMkE,IAAAA,CAAMkT,CAAAA,OAASsyB,cAAcnyB,QAAAA,CAASH,IAAI,CAAC,CACzD;gBACA,IAAIwyB,cAAc;oBAChB,MAAMC,WAAWH,cAAcvoC,IAAAA,CAAK,IAAI;oBACxCwnC,OAAAA,aAAa;wBACXW,aAAa,CAAA;wBACbprB,SAAS0rB,aAAa7qC,GAAAA,CAAKY,CAAAA,uKAClBwW,MAAAA,EAAAA,CACJxW,MAAMK,KAAAA,IAAS,CAAA,CAAA,EAAIgV,MAAAA,CACjB80B,CAAAA,OAAS,CAACJ,cAAcnyB,QAAAA,CAASuyB,IAAI,CACxC,GACA;gCAAC;oCAACrrC,MAAM0K,IAAI1K,IAAAA;gCAAAA;gCAAO;gCAAY;oCAACA,MAAMkB,MAAMlB,IAAAA;gCAAAA;gCAAO,OAAO;6BAC5D,CACD;wBACDsqC,aAAa,CAAA,iBAAA,EAAoB5/B,IAAI1K,IAAI,CAAA,kBAAA,EAAqBorC,QAAQ,CAAA,6CAAA,CAAA;wBACtEhL,QAAQ;wBACRnf,MAAMvW;wBAEN6/B,MAAM;4BACJD,aACE;4BACFlK,QACE;4BACF9sB,QAAQ;gCACN1E,KAAKlE,IAAI1K,IAAAA;gCACTirC,eAAeA,cAAc3qC,GAAAA,CAAK0qC,CAAAA,IAAMA,EAAEj9B,QAAAA,EAAU;4BAAA;wBACtD;oBACF,GAEK,CAAA;gBACT;YACF;YAIErN,UAAUO,QAAAA,CAASwE,IAAAA,CAAK,CAACvE,OAAOoqC,WAAmB;gBACjD,IAAI,EAACd,qJAAAA,EAActpC,KAAK,GACtBgpC,OAAAA,aAAa;oBACXzqB,SAAS;uLAACyP,QAAAA,EAAM;4BAAC;gCAAClvB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAYsrC,MAAM;yBAAC,CAAC;qBAAA;oBACvDhB,aAAa,CAAA,gBAAA,EAAmBgB,MAAM,CAAA,qBAAA,EAAwB5gC,IAAI1K,IAAI,CAAA,mBAAA,CAAA;oBACtEogC,QAAQ;oBACRnf,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BAAC1E,KAAKlE,IAAI1K,IAAAA;4BAAM4iB,OAAO0oB;wBAAAA;oBAAM;gBACvC,GAEK,CAAA;gBAGT,IAAI,CAACpqC,MAAMlB,IAAAA,IAAQ,OAAOkB,MAAMlB,IAAAA,IAAS,UAAU;oBACjD,MAAMurC,WAAW;wBAAC,GAAGrqC,KAAAA;wBAAOlB,MAAMgW,aAAAA;oBAAa;oBAC/Ck0B,OAAAA,aAAa;wBACXW,aAAa,CAAA;wBACbprB,SAAS;2LACP/H,MAAAA,EAAI6zB,UAAU;gCAAC;oCAACvrC,MAAM0K,IAAI1K,IAAAA;gCAAAA;gCAAO;gCAAYsrC,MAAM;6BAAC,CAAC;yBAAA;wBAEvDhB,aAAa,CAAA,eAAA,EAAkBgB,MAAM,CAAA,6CAAA,EAAgD5gC,IAAI1K,IAAI,CAAA,CAAA,CAAA;wBAC7FogC,QAAQ;wBACRnf,MAAMvW;wBAEN6/B,MAAM;4BACJD,aACE;4BACFlK,QACE;4BACF9sB,QAAQ;gCAAC1E,KAAKlE,IAAI1K,IAAAA;gCAAM4iB,OAAO0oB;4BAAAA;wBAAM;oBACvC,GAEK,CAAA;gBACT;gBAGA,OAAKpqC,MAAMV,KAAAA,GAoBN4pC,gBAAgBtxB,QAAAA,CAAS5X,MAAMV,KAAK,IA0BvCU,MAAMV,KAAAA,KAAU4W,MAAMjB,IAAAA,CAAK3W,IAAAA,IAC3B,OAAO0B,MAAMI,IAAAA,IAAS,WAAA,CAEtB4oC,aAAa;oBACXzqB,SAAS;uLACP/H,MAAAA,EAAI;4BAAC,GAAGxW,KAAAA;4BAAOI,MAAM;wBAAA,GAAK;4BACxB;gCAACtB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BACX;4BACA;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBACnB,CAAC;qBAAA;oBAEJsqC,aAAa,CAAA,iBAAA,EAAoBppC,MAAMlB,IAAI,CAAA,qBAAA,EAAwB0K,IAAI1K,IAAI,CAAA,uCAAA,CAAA;oBAC3EogC,QAAQ;oBACRnf,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BAAC1E,KAAKlE,IAAI1K,IAAAA;4BAAMwK,UAAUtJ,MAAMlB,IAAAA;wBAAAA;oBAAI;gBAC9C,GAEK,CAAA,CAAA,IAEF,CAAA,IAAA,CAlDLkqC,aAAa;oBACXzqB,SAAS;uLACPyP,QAAAA,EAAM;4BAAC;gCAAClvB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAE3DsqC,aAAa,CAAA,iBAAA,EAAoBppC,MAAMlB,IAAI,CAAA,qBAAA,EAAwB0K,IAAI1K,IAAI,CAAA,gCAAA,EAAmCkB,MAAMV,KAAK,CAAA,EAAA,CAAA;oBACzH4/B,QAAQ;oBACRnf,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BACN1E,KAAKlE,IAAI1K,IAAAA;4BACTwK,UAAUtJ,MAAMlB,IAAAA;4BAChBwrC,WAAWtqC,MAAMV,KAAAA;wBAAAA;oBACnB;gBACF,GAEK,CAAA,CAAA,IAAA,CAxCP0pC,aAAa;oBACXzqB,SAAS;uLACPyP,QAAAA,EAAM;4BAAC;gCAAClvB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAE3DsqC,aAAa,CAAA,iBAAA,EAAoBppC,MAAMlB,IAAI,CAAA,qBAAA,EAAwB0K,IAAI1K,IAAI,CAAA,8BAAA,CAAA;oBAC3EogC,QAAQ;oBACRnf,MAAMvW;oBAEN6/B,MAAM;wBACJD,aACE;wBACFlK,QACE;wBACF9sB,QAAQ;4BAAC1E,KAAKlE,IAAI1K,IAAAA;4BAAMwK,UAAUtJ,MAAMlB,IAAAA;wBAAAA;oBAAI;gBAC9C,GAEK,CAAA,CAAA;YAuDX,CAAC,KAAA,CAEDmqC,QAAQ,CAAA,CAAA;QAEZ;QACA,OAAO,CAAA;IACT,CAAC,KAAA,CAEDA,QAAQ,CAAA,CAAA,GAEH;QAACA;QAAOD;QAAYnqC;IAAAA,CAAAA;AAC7B;ACzZA,MAAMT,UAAQC,cAAc,cAAc,GAqBpCksC,oBAcFA,CAAC,EAAChX,QAAAA,EAAUmN,KAAAA,EAAK,KAAM;IACzB8J,YAAY;QACVnkC,SAASq6B,MAAMr6B,OAAAA;QACfktB;QACA1tB,aAAa66B,MAAM76B,WAAAA;QACnBhH,OAAO6hC,MAAM7hC,KAAAA;QACb4rC,cAAc/J,MAAM+J,YAAAA;IAAAA,CACrB;AACH,GAEMC,wMAAiBrF,eAAAA,EAAakF,iBAAiB,GAgBxCI,iMAAc1kC,QAAAA,EAAM;IAC/BiQ,OAAO;QACL7P,SAAS,CAAA;QAWTq6B,OAAO,CAAA;QAOPF,QAAQ,CAAA;QAgBRC,SAAS,CAAA;IAAC;IASZvyB,SAAS;QACP,6OAA+B0yB,SAAAA,EAAO;YACpCgK,oBAAoB,CAAA;QAAA,CACrB;QACD,iOAAmBhK,SAAAA,EAAO;YACxB7wB,UAAUA,CAAC,EAACjK,KAAAA,EAAAA,GAAAA,EACV+6B,gMAAAA,EAAY/6B,OAAO,iBAAiB,GAC7BA,MAAMiK,QAAAA;QAAAA,CAEhB;QACD,sOAAwB6wB,SAAAA,EAAO;YAC7BiK,cAAcA,CAAC,EAAC/kC,KAAAA,EAAAA,GAAAA,oLACd+6B,cAAAA,EAAY/6B,OAAO,cAAc,GAC1BA,MAAMjH,KAAAA;QAAAA,CAEhB;QACD,qOAAuB+hC,SAAAA,EAAO;YAC5BiK,cAAczpC,KAAAA;QAAAA,CACf;QACD,uOAAyBw/B,SAAAA,EAAO;YAC9BnR,eAAeA,CAAC,EAAC3pB,KAAAA,EAAAA,GAAAA,CACf+6B,iMAAAA,EAAY/6B,OAAO,cAAc,GAC1BA,MAAMjH,KAAAA;QAAAA,CAEhB;QACD,oOAA2BkiC,OAAAA,EAAK;YAC9B5yB,MAAM;QAAA,CACP;QACD,+NAAsB4yB,OAAAA,EAAK;YACzB5yB,MAAM;QAAA,CACP;IAAA;IAEHuzB,QAAQ;QACN,wBAAwBoJ,CAAC,EAACzkC,OAAAA,EAAAA,GAAaA,QAAQukC,kBAAAA;QAC/C,WAAWG,CAAC,EAAC1kC,OAAAA,EAAAA,KAAa;YACxB,MAAM2kC,WAAW,CAAC3kC,QAAQ0J,QAAAA,EACpBk7B,2BAA2B5kC,QAAQ4kC,wBAAAA,EACnCC,aAAaryB,mBAAmBxS,QAAQR,WAAW,KAAK,CAAA,GACxDslC,SAASH,YAAAA,CAAaC,4BAA4BC,UAAAA;YAExD9sC,OAAAA,QAAM,UAAU;gBAAC+sC;gBAAQH;gBAAUC;gBAA0BC;YAAAA,CAAW,GAEjEC;QACT;QACA,kBAAkBC,CAAC,EAACtlC,KAAAA,EAAAA,GACXA,MAAMqI,IAAAA,KAAS,kBAAkBrI,MAAMjH,KAAAA,KAAUuC,KAAAA;QAE1D,kBAAkBiqC,CAAC,EAACvlC,KAAAA,EAAAA,GAEhBA,MAAMqI,IAAAA,KAAS,kBACfjP,MAAMC,OAAAA,CAAQ2G,MAAMjH,KAAK,KACzBiH,MAAMjH,KAAAA,CAAMwC,MAAAA,KAAW;QAG3B,gBAAgBiqC,CAAC,EAACjlC,OAAAA,EAASP,KAAAA,EAAAA,GAEvBA,MAAMqI,IAAAA,KAAS,kBAAkB9H,QAAQopB,aAAAA,KAAkB3pB,MAAMjH,KAAAA;QAGrE,+BAA+B0sC,CAAC,EAACllC,OAAAA,EAASP,KAAAA,EAAAA,GAAAA,oLACxC+6B,cAAAA,EAAY/6B,OAAO,cAAc,GAC1BO,QAAQwkC,YAAAA,KAAiB/kC,MAAMjH,KAAAA;QAExC,uCAAuC2sC,CAAC,EAACnlC,OAAAA,EAAAA,yIAChCtH,UAAAA,EAAQsH,QAAQwkC,YAAAA,EAAcxkC,QAAQopB,aAAa;IAAA;IAG9D2V,QAAQ;QACN,cAAcsF;IAAAA;AAElB,CAAC,EAAE9I,aAAAA,CAAc;IACft0B,IAAI;IACJjH,SAASA,CAAC,EAACq6B,KAAAA,EAAAA,GAAAA,CAAY;YACrBrN,cAAcqN,MAAMrN,YAAAA;YACpBuX,oBAAoB,CAAA;YACpBK,0BAA0B,CAAA;YAC1Bn2B,cAAc4rB,MAAM5rB,YAAAA;YACpB9Q,QAAQ08B,MAAM18B,MAAAA;YACd+L,UAAU2wB,MAAM3wB,QAAAA;YAChBlK,aAAa66B,MAAM76B,WAAAA;YACnBglC,cAAczpC,KAAAA;YACdquB,eAAeruB,KAAAA;QAAAA,CAAAA;IAEjB4oB,OAAO;oNACLkK,QAAAA,EAAM,CAAC,EAAC7tB,OAAAA,EAAAA,GAAAA,CACC;gBAAC8H,MAAM;gBAAgBtP,OAAOwH,QAAQgtB,YAAAA;YAAAA,CAAAA,CAC9C,CAAC;KAAA;IAEJz1B,IAAI;QACF,yBAAyB;YACvBsQ,SAAS0yB,uNAAAA,EAAO;gBACdqK,0BAA0B,CAAA;YAAA,CAC3B;QAAA;QAEH,UAAY;YACV/8B,uNAAS0yB,SAAAA,EAAO;gBACdqK,0BAA0B,CAAA;YAAA,CAC3B;QAAA;QAEH,mBAAmB;YACjB/8B,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEF6zB,SAAS;IACTD,QAAQ;QACNW,MAAM;YACJzY,OAAO;gBACL,MAAM;oBACJ5rB,QAAM,sBAAsB;gBAC9B,CAAC;aAAA;YAEH4jC,MAAM;gBACJ,MAAM;oBACJ5jC,QAAM,qBAAqB;gBAC7B,CAAC;aAAA;YAEHR,IAAI;gBACF,gBAAgB;oBACd;wBACEkQ,gNAAOy4B,OAAAA,EAAI;4BAAC;sOAAkBC,MAAAA,EAAI,sBAAsB,CAAC;yBAAC;wBAC1Dt4B,SAAS;4BAAC;4BAA+B,yBAAyB;yBAAA;oBAAA;oBAEpE;wBACEJ,iNAAOy4B,MAAAA,EAAI;4BAAC;sOAAkBC,MAAAA,EAAI,sBAAsB,CAAC;yBAAC;wBAC1Dt4B,SAAS;4BACP;oOACA6yB,QAAAA,EAAK;gCAAC5yB,MAAM;gCAAiBtP,OAAO,CAAA,CAAA;4BAAA,CAAG;4BACvC,yBAAyB;yBAAA;oBAAA;oBAG7B;wBACEiP,OAAOy4B,gNAAAA,EAAI;4BAAC;4BAAW,cAAc;yBAAC;wBACtCx/B,QAAQ;wBACRmH,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA;oBAElC;wBACEJ,OAAO;wBACP/G,QAAQ;wBACRmH,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA;oBAElC;wBACEJ,OAAO04B,gNAAAA,EAAI,sBAAsB;wBACjCt4B,SAAS;4BACP,MAAM;gCACJ9P,QAAM,qDAAgD;4BACxD;4BACA;4BACA,yBAAyB;yBAAA;oBAAA;oBAG7B;wBACE8P,SAAS;4BACP,MAAM;gCACJ9P,QAAM,+CAA+C;4BACvD,CAAC;yBAAA;oBAAA,CAEJ;iBAAA;YAAA;QAEL;QAEFqtC,MAAM;YACJzhB,OAAO;gBACL,MAAM;oBACJ5rB,QAAM,sBAAsB;gBAC9B,CAAC;aAAA;YAEH4jC,MAAM;gBACJ,MAAM;oBACJ5jC,QAAM,qBAAqB;gBAC7B,CAAC;aAAA;YAEHszB,OAAO;gBACL,KAAM;oBACJ;wBACE5jB,OAAO;wBACP/G,QAAQ;wBACRs/B,SAAS,CAAA;wBACTn4B,SAAS;4BACP,MAAM;gCACJ9P,QAAM,wBAAwB;4BAChC,CAAC;yBAAA;oBAAA;oBAGL;wBACE2I,QAAQ;oBAAA,CACT;iBAAA;YAAA;YAGLnJ,IAAI;gBACF,gBAAgB;oBACd;wBACEkQ,OAAO;wBACPI,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA,CACjC;iBAAA;YAAA;QAEL;QAEFw9B,SAAS;YACP1hB,OAAO;gBACL,MAAM;oBACJ5rB,QAAM,yBAAyB;gBACjC;gBACA,oBAAoB;aAAA;YAEtB4jC,MAAM;gBACJ,MAAM;oBACJ5jC,QAAM,wBAAwB;gBAChC;gBACA,yBAAyB;aAAA;YAE3B+nC,QAAQ;gBACNC,KAAK;gBACL94B,IAAI;gBACJozB,OAAOA,CAAC,EAACr6B,OAAAA,EAAAA,GAAAA,CACA;wBACLA,SAAS;4BACPyO,cAAczO,QAAQyO,YAAAA;4BACtB2a,eAAeppB,QAAQopB,aAAAA;4BACvB1f,UAAU1J,QAAQ0J,QAAAA;4BAClB/L,QAAQqC,QAAQrC,MAAAA;wBAAAA;wBAElB6B,aAAaQ,QAAQR,WAAAA;wBACrB4kC,cAAc,CAACpkC,QAAQukC,kBAAAA;wBACvB/rC,OAAOwH,QAAQwkC,YAAAA;oBAAAA,CAAAA;YACjB;YAGJjtC,IAAI;gBACF,gBAAgB;oBACdkQ,OAAO;oBACPI,SAAS;wBAAC,sBAAsB;qBAAA;gBAAA;gBAElC,OAAS;oBACPA,SAAS;gOAAC6yB,QAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK,CAAC;qBAAA;gBAAA;gBAEpC,iBAAiB;oBACfoI,SAAS;iOAAC6yB,OAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK,CAAC;qBAAA;gBAAA;gBAEpC,iBAAiB;oBACfoI,SAAS;gOAAC6yB,QAAAA,EAAK,CAAC,EAACj7B,KAAAA,EAAAA,GAAWA,KAAK,CAAC;qBAAA;gBAAA;gBAEpC,gBAAgB;oBACd;wBACEgI,OAAO;wBACPI,SAAS;4BAAC;4BAAyB,6BAA6B;yBAAA;wBAChEnH,QAAQ;wBACRs/B,SAAS,CAAA;oBAAA;oBAEX;wBACEt/B,QAAQ;wBACRmH,SAAS;4BACP;4BACA;4BACA,6BAA6B;yBAAA;oBAAA,CAEhC;iBAAA;YAAA;QAEL;IACF;AAEJ,CAAC;AAED,eAAes8B,YAAY,EACzBnkC,OAAAA,EACAktB,QAAAA,EACA1tB,WAAAA,EACA4kC,YAAAA,EACA5rC,KAAAA,EAYF,EAAG;IACD,IAAI8sC,cAAc,CAAA,GACdC,YAAY,CAAA,GACZC,UAAU,CAAA;IAEd,MAAMC,eAAe,CAAC,CAACjmC,YAAY1D,SAAAA;IA0CnC,IAAA,CAvCI,CAACtD,SAASA,MAAMwC,MAAAA,KAAW,CAAA,KAAA,CAC7BjD,QAAM,gBAAgB,gJACtBwD,SAAAA,CAAO4a,kBAAAA,CAAmB3W,aAAa,MAAM;QAC3Cya,cAAcza,aAAa,MAAM;YAC/B6S,kBAAkB7S,aAAa,MAAM;gBACnC+oB,gBAAgB/oB,aAAa,MAAM;oBACjC,IAAI8lC,aACF;oBAGEG,6JACFz0B,aAAAA,CAAWmJ,QAAAA,CAAS3a,WAAW;oBAGjC,MAAMkmC,iBAAiBlmC,YAAY9F,QAAAA,CAASsB,MAAAA;oBAE5CwE,YAAY9F,QAAAA,CAASsS,OAAAA,CAAQ,CAAC0Z,GAAGrK,UAAU;wBACzCrK,4IAAAA,CAAAA,aAAAA,CAAW0O,WAAAA,CAAYlgB,aAAa;4BAClC/D,IAAI;gCAACiqC,iBAAiB,IAAIrqB,KAAK;6BAAA;wBAAA,CAChC;oBACH,CAAC,gJAEDrK,aAAAA,CAAWQ,WAAAA,CACThS,aACAA,YAAYmmB,kBAAAA,CAAmB;wBAACtU,YAAY,CAAA,CAAA;oBAAA,CAAG,GAC/C;wBAAC5V,IAAI;4BAAC,CAAC;yBAAA;oBAAA,CACT,GAGIgqC,6JACFz0B,aAAAA,CAAWsP,MAAAA,CAAO9gB,aAAa;wBAAC;wBAAG,CAAC;qBAAC;gBAEzC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,GACD+lC,YAAY,CAAA,CAAA,GAGV/sC,SAASA,MAAMwC,MAAAA,GAAS,GAAG;QAC7B,MAAM2qC,sBAAsBhtC,aAAaH,OAAO;YAC9CI,aAAaoH,QAAQrC,MAAAA;QAAAA,CACtB;QAEGymC,eACF,MAAM,IAAIwB,QAAeC,CAAAA,YAAY;YACnCtqC,4IAAAA,CAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB3W,aAAa,MAAM;gBAC3C6S,kBAAkB7S,aAAa,MAAM;oBACnC+oB,gBAAgB/oB,aAAa,MAAM;wBACjC,IAAI8lC,aAAa;4BACfO,QAAAA;4BACA;wBACF;wBAEAN,YAAYO,kBAAkB;4BAC5BtmC;4BACAmmC;wBAAAA,CACD,GAAA,CAEqB,YAAY;4BAChC,WAAA,MAAiB,CACfI,cACAC,iBAAiB,CAAA,IACdC,kBAAkB;gCACrBC,YAAYP;4BAAAA,CACb,EAAG;gCACF,MAAM,EAACQ,YAAAA,EAAcC,UAAAA,EAAAA,GAAcC,UAAU;oCAC3CrmC;oCACAktB;oCACAl0B,OAAO+sC;oCACP1qB,OAAO2qB;oCACPxmC;oCACAhH;gCAAAA,CACD;gCAED+sC,YAAYY,gBAAgBZ,WAC5BC,UAAUA,WAAWY;4BACvB;4BAEAP,QAAAA;wBACF,CAAA,EAAA;oBAGF,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,iJAEDtqC,SAAAA,CAAO4a,kBAAAA,CAAmB3W,aAAa,MAAM;YAC3C6S,kBAAkB7S,aAAa,MAAM;gBACnC+oB,gBAAgB/oB,aAAa,MAAM;oBACjC,IAAI8lC,aACF;oBAGFC,YAAYO,kBAAkB;wBAC5BtmC;wBACAmmC;oBAAAA,CACD;oBAED,IAAItqB,QAAQ;oBAEZ,KAAA,MAAW0qB,gBAAgBJ,oBAAqB;wBAC9C,MAAM,EAACQ,YAAAA,EAAcC,UAAAA,EAAAA,GAAcC,UAAU;4BAC3CrmC;4BACAktB;4BACAl0B,OAAO+sC;4BACP1qB;4BACA7b;4BACAhH;wBAAAA,CACD;wBAED+sC,YAAYY,gBAAgBZ,WAC5BC,UAAUA,WAAWY,YACrB/qB;oBACF;gBACF,CAAC;YACH,CAAC;QACH,CAAC;IAEL;IAEA,IAAI,CAACmqB,SAAS;QACZztC,QAAM,0BAA0B,GAChCutC,cAAc,CAAA,GACdpY,SAAS;YAACplB,MAAM;YAAgBtP;QAAAA,CAAM;QACtC;IACF;IAEA,IAAI+sC,WAAW;QACbxtC,QAAM,sCAAsC;QAC5C,IAAI;YACFyH,YAAY4W,QAAAA,CAAAA;QACd,EAAA,OAAS8D,KAAK;YACZ1X,QAAQgH,KAAAA,CAAM0Q,GAAG,GACjBgT,SAAS;gBACPplB,MAAM;gBACN66B,YAAY;gBACZnqC;YAAAA,CACD,GACD8sC,cAAc,CAAA,GACdpY,SAAS;gBAACplB,MAAM;gBAAgBtP;YAAAA,CAAM;YACtC;QACF;QACIitC,gBAAgB,CAACjmC,YAAY1D,SAAAA,IAAAA,8IAC/BkV,aAAAA,CAAWsP,MAAAA,CAAO9gB,aAAa;YAC7BR,QAAQ;gBAAC/C,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;YAC/BlD,OAAO;gBAACC,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;QAAC,CAChC,GACDM,YAAY4W,QAAAA,CAAAA,CAAAA,GAEd8W,SAAS;YAACplB,MAAM;YAAiBtP;QAAAA,CAAM;IACzC,OACET,QAAM,0DAA0D;IAGlEutC,cAAc,CAAA,GACdpY,SAAS;QAACplB,MAAM;QAAgBtP;IAAAA,CAAM;AACxC;AAEA,SAASstC,kBAAkB,EACzBtmC,WAAAA,EACAmmC,mBAAAA,EAIF,EAAG;IACD,IAAIJ,YAAY,CAAA;IAChB,MAAMG,iBAAiBlmC,YAAY9F,QAAAA,CAASsB,MAAAA;IAG5C,IAAI2qC,oBAAoB3qC,MAAAA,GAAS0qC,gBAAgB;QAC/C,IAAA,IAASn/B,IAAIm/B,iBAAiB,GAAGn/B,IAAIo/B,oBAAoB3qC,MAAAA,GAAS,GAAGuL,IACnEyK,4IAAAA,CAAAA,aAAAA,CAAW0O,WAAAA,CAAYlgB,aAAa;YAClC/D,IAAI;gBAAC8K,CAAC;aAAA;QAAA,CACP;QAEHg/B,YAAY,CAAA;IACd;IACA,OAAOA;AACT;AAEA,gBAAgBU,kBAAkB,EAChCC,UAAAA,EAGF,EAAG;IACD,IAAI7qB,QAAQ;IACZ,WAAA,MAAiBriB,SAASktC,WACpB7qB,QAAQ,OAAO,KACjB,MAAM,IAAIuqB,QAAeC,CAAAA,UAAYS,WAAWT,SAAS,CAAC,CAAC,GAE7D,MAAM;QAAC7sC;QAAOqiB,KAAK;KAAA,EACnBA;AAEJ;AAEA,SAASgrB,UAAU,EACjBrmC,OAAAA,EACAktB,QAAAA,EACAl0B,KAAAA,EACAqiB,KAAAA,EACA7b,WAAAA,EACAhH,KAAAA,EAaF,EAAG;IACD,IAAI2tC,eAAe,CAAA,GACfC,aAAa,CAAA;IACjB,MAAML,eAAe/sC,OACfgtC,oBAAoB3qB,OACpBoM,WAAWjoB,YAAY9F,QAAAA,CAASssC,iBAAiB,CAAA,EACjDO,aAAa9e,YAAY,uIAAC/uB,UAAAA,EAAQqtC,cAActe,QAAQ;IAE9DlsB,oJAAAA,SAAAA,CAAO4a,kBAAAA,CAAmB3W,aAAa,MAAM;QAC3C6S,kBAAkB7S,aAAa,MAAM;YACnC+oB,gBAAgB/oB,aAAa,MAAM;gBACjC,IAAI+mC,cAAcH,YAAY;oBAC5B,MAAMI,kBAAkB;wBAAChuC,KAAAA,CAAMwtC,iBAAiB,CAAC;qBAAA,EAC3CS,aAAa/D,cACjB8D,iBACAxmC,QAAQrC,MAAAA,EACRqC,QAAQyO,YACV;oBAGE,CAACg4B,WAAW7D,KAAAA,IACZ6D,WAAW9D,UAAAA,EAAYW,eACvBmD,WAAW9D,UAAAA,EAAYzqB,QAAQld,SAAS,KAItC,CAACgF,QAAQ0J,QAAAA,IACT1J,QAAQopB,aAAAA,IACRppB,QAAQopB,aAAAA,KAAkB5wB,SAAAA,CAG1BgK,QAAQC,IAAAA,CACN,GAAGgkC,WAAW9D,UAAAA,CAAW9J,MAAM,CAAA,sBAAA,EAAyB2N,eAAAA,CAAgB,CAAC,CAAA,CAAE/tC,IAAI,CAAA,GAAA,EAAMguC,WAAW9D,UAAAA,EAAYI,WAAW,EACzH,GACA0D,WAAW9D,UAAAA,CAAWzqB,OAAAA,CAAQlM,OAAAA,CAASiL,CAAAA,UAAU;wBAC/CiW,SAAS;4BAACplB,MAAM;4BAASmP;wBAAAA,CAAM;oBACjC,CAAC,CAAA,GAGDwvB,WAAW7D,KAAAA,IAAS6D,WAAW9D,UAAAA,EAAYW,cAAAA,CACzC7b,SAAShvB,IAAAA,KAASstC,aAAattC,IAAAA,GAAAA,CAC7BV,QAAMI,OAAAA,IAASJ,QAAM,kBAAkB0vB,UAAUse,YAAY,GACjEW,aACElnC,aACAumC,cACAte,UACAue,iBACF,CAAA,IAAA,CAEIjuC,QAAMI,OAAAA,IACRJ,QAAM,mBAAmB0vB,UAAUse,YAAY,GACjDY,cAAcnnC,aAAaumC,cAAcC,iBAAiB,CAAA,GAE5DG,eAAe,CAAA,CAAA,IAAA,CAEfjZ,SAAS;wBACPplB,MAAM;wBACN66B,YAAY8D,WAAW9D,UAAAA;wBACvBnqC;oBAAAA,CACD,GACD4tC,aAAa,CAAA,CAAA;gBAEjB;gBAEA,IAAI,CAAC3e,YAAY2e,YAAY;oBAC3B,MAAMI,kBAAkB;wBAAChuC,KAAAA,CAAMwtC,iBAAiB,CAAC;qBAAA,EAC3CS,aAAa/D,cACjB8D,iBACAxmC,QAAQrC,MAAAA,EACRqC,QAAQyO,YACV;oBACI1W,QAAMI,OAAAA,IACRJ,QACE,8DACAguC,YACF,GACEU,WAAW7D,KAAAA,IAAS6D,WAAW9D,UAAAA,EAAYW,2JAC7CtyB,aAAAA,CAAWQ,WAAAA,CAAYhS,aAAaumC,cAAc;wBAChDtqC,IAAI;4BAACuqC,iBAAiB;yBAAA;oBAAA,CACvB,IAAA,CAEDjuC,QAAM,WAAW0uC,UAAU,GAC3BvZ,SAAS;wBACPplB,MAAM;wBACN66B,YAAY8D,WAAW9D,UAAAA;wBACvBnqC;oBAAAA,CACD,GACD4tC,aAAa,CAAA,CAAA;gBAEjB;YACF,CAAC;QACH,CAAC;IACH,CAAC,GAEM;QAACD;QAAcC;IAAAA;AACxB;AAMA,SAASO,cACPnnC,WAAAA,EACAumC,YAAAA,EACAC,iBAAAA,EACA;IAGA,MAAMnlB,mBAAmBrhB,YAAY1D,SAAAA,EAC/B8qC,wBACJ/lB,oBAAoBA,iBAAiB7kB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAM+pC;IACrDY,sKACF51B,aAAAA,CAAWmJ,QAAAA,CAAS3a,WAAW,gJAEjCwR,aAAAA,CAAW0O,WAAAA,CAAYlgB,aAAa;QAAC/D,IAAI;YAACuqC,iBAAiB;SAAA;IAAA,CAAE,gJAC7Dh1B,aAAAA,CAAWQ,WAAAA,CAAYhS,aAAaumC,cAAc;QAACtqC,IAAI;YAACuqC,iBAAiB;SAAA;IAAA,CAAE,GAC3ExmC,YAAY4W,QAAAA,IACRwwB,sKACF51B,aAAAA,CAAWsP,MAAAA,CAAO9gB,aAAaqhB,gBAAgB;AAEnD;AAMA,SAAS6lB,aACPlnC,WAAAA,EACAumC,YAAAA,EACAte,QAAAA,EACAue,iBAAAA,EACA;IAMA,iJAJAh1B,aAAAA,CAAWmD,QAAAA,CAAS3U,aAAaumC,cAA+B;QAC9DtqC,IAAI;YAACuqC,iBAAiB;SAAA;IAAA,CACvB,GAGCxmC,YAAYf,WAAAA,CAAYsnC,YAAY,KACpCvmC,YAAYf,WAAAA,CAAYgpB,QAAQ,GAChC;QACA,MAAMof,yBAAyBpf,SAAS/tB,QAAAA,CAASsB,MAAAA;QAC7C+qC,aAAarsC,QAAAA,CAASsB,MAAAA,GAAS6rC,0BAEjChuC,MAAMyC,IAAAA,CACJzC,MAAMguC,yBAAyBd,aAAarsC,QAAAA,CAASsB,MAAM,CAC7D,EAAEgR,OAAAA,CAAQ,CAAC0Z,GAAGrK,UAAU;YACtB,MAAMpe,aAAa4pC,yBAAyB,IAAIxrB;YAC5Cpe,aAAa,KAAA,CACflF,QAAM,gBAAgB,gJACtBiZ,aAAAA,CAAW0O,WAAAA,CAAYlgB,aAAa;gBAClC/D,IAAI;oBAACuqC;oBAAmB/oC,UAAU;iBAAA;YAAA,CACnC,CAAA;QAEL,CAAC,GAEH8oC,aAAarsC,QAAAA,CAASsS,OAAAA,CACpB,CAAC86B,mBAAmBC,2BAA2B;YAC7C,MAAMC,gBAAgBvf,SAAS/tB,QAAAA,CAASqtC,sBAAsB,CAAA,EACxDE,iBAAiB,uIAACvuC,UAAAA,EAAQouC,mBAAmBE,aAAa,GAC1DE,gBAAgB,uIAACxuC,UAAAA,EACrBouC,kBAAkB/sC,IAAAA,EAClBitC,eAAejtC,IACjB,GACMkC,OAAO;gBAAC+pC;gBAAmBe,sBAAsB;aAAA;YACvD,IAAIE,gBAEF,IAAIH,kBAAkBruC,IAAAA,KAASuuC,eAAevuC,MAAM;gBAClDV,QAAM,0BAA0B+uC,mBAAmBE,aAAa,gJAChEh2B,aAAAA,CAAWmD,QAAAA,CACT3U,aACAsnC,mBACA;oBACErrC,IAAIQ;gBAAAA,CAER;gBACA,MAAMmuB,cACJnvB,oJAAAA,CAAKC,MAAAA,CAAO4rC,iBAAiB,KAC7BA,kBAAkB7tC,KAAAA,KAAU,uJAC5BgC,OAAAA,CAAKC,MAAAA,CAAO8rC,aAAa,KACzBA,cAAc/tC,KAAAA,KAAU;gBACtBmxB,eAAc8c,gBAAAA,CACZF,cAAcjtC,IAAAA,CAAKiB,MAAAA,GAAS,kJAC9BgW,aAAAA,CAAW2O,MAAAA,CAAOngB,aAAa;oBAC7B/D,IAAI;wBACFO,OAAO;4BAACC;4BAAMiD,QAAQ;wBAAA;wBACtBF,QAAQ;4BAAC/C;4BAAMiD,QAAQ8nC,cAAcjtC,IAAAA,CAAKiB,MAAAA;wBAAAA;oBAAM;gBAClD,CACD,gJAEHgW,aAAAA,CAAWC,UAAAA,CAAWzR,aAAasnC,kBAAkB/sC,IAAAA,EAAM;oBACzD0B,IAAIQ;gBAAAA,CACL,GACDuD,YAAY4W,QAAAA,CAAAA,CAAAA,IACFgU,eAAAA,CAEVryB,QAAM,wCAAwC+uC,iBAAiB,gJAC/D91B,aAAAA,CAAWmD,QAAAA,CACT3U,aACA;oBAAC/G,MAAML;gBAAAA,GACP;oBACEqD,IAAI,CAAC;2BAAGQ;wBAAM,CAAC;qBAAA;oBACfiY,OAAO,CAAA;gBAAA,CAEX,CAAA;YAGJ,MAAW8yB,CAAAA,gBAAAA,CACTjvC,QAAM,mBAAmB+uC,iBAAiB,gJAC1C91B,aAAAA,CAAW0O,WAAAA,CAAYlgB,aAAa;gBAClC/D,IAAI;oBAACuqC;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,gJACD/1B,aAAAA,CAAWQ,WAAAA,CAAYhS,aAAasnC,mBAA2B;gBAC7DrrC,IAAI;oBAACuqC;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,GACDvnC,YAAY4W,QAAAA,CAAAA,CAAAA,IAEF4wB,iBAAAA,CACVjvC,QAAM,uBAAuB+uC,iBAAiB,gJAC9C91B,aAAAA,CAAWQ,WAAAA,CAAYhS,aAAasnC,mBAA2B;gBAC7DrrC,IAAI;oBAACuqC;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,GACDvnC,YAAY4W,QAAAA,EAAAA;QAGlB,CACF;IACF;AACF;AC50BA,MAAMre,UAAQC,cAAc,OAAO;AAU5B,SAASmvC,qBAAqBngC,MAAAA,EASnC;IACAjP,QAAM,8BAA8B;IAEpC,MAAMigB,gBAAyC,CAAA,CAAA,EACzCzY,gOAAc6nC,cAAAA,EAAYlN,eAAe;QAC7CG,OAAOgN,2BAA2BrgC,MAAM;IAAA,CACzC,GACK0hB,+NAAa0e,cAAAA,EAAY7E,YAAY,GACrC/iC,cAAcmtB,kBAAkB;QACpCptB;QACAmpB;QACA1Q;IAAAA,CACD,GACK2sB,WAAWvE,kBAAkB5gC,YAAYmU,QAAAA,EAAUpU,WAAW,GAC9D,EAAC+nC,aAAAA,EAAeC,SAAAA,EAAAA,GAAaC,aAAa;QAC9CjoC;QACAmpB;QACAlpB,aAAaA,YAAYmU,QAAAA;QACzBqE;IAAAA,CACD,GAEK3gB,SAAS;QACbs5B,KAAK1D,gBACFxtB,CAAAA,QAAUF,YAAYiJ,IAAAA,CAAK/I,KAAK,GACjCD,YAAYmU,QACd;QACAjU,aAAaA,IACX8T,kBAAkB;gBAChBD,qBAAqBhU,YAAYG,WAAAA,CAAAA;gBACjC+T,qBAAqBjU,YAAYmU,QAAAA;YAAAA,CAClC;QACH8zB,kBAAmBl/B,CAAAA,mBAAmB;YACpC,MAAMP,WAAWjB,qBAAqB;gBACpC9O,MAAM;gBACNiP,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD,GACKy/B,6BAA6B;gBACjC,GAAGn/B,cAAAA;gBACHP;YAAAA;YAGFzI,OAAAA,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACNS,gBAAgBm/B;YAAAA,CACjB,GAEM,MAAM;gBACXnoC,YAAYiJ,IAAAA,CAAK;oBACfV,MAAM;oBACNS,gBAAgBm/B;gBAAAA,CACjB;YACH;QACF;QACAl/B,MAAO/I,CAAAA,UAAU;YACf,OAAQA,MAAMqI,IAAAA,EAAAA;gBACZ,KAAK;oBACHy/B,UAAU/+B,IAAAA,CAAK/I,KAAK;oBACpB;gBAEF,KAAK;gBACL,KAAK;gBACL,KAAK;oBACHF,YAAYiJ,IAAAA,CAAK/I,KAAK;oBACtB;gBAEF,KAAK;oBACHF,YAAYiJ,IAAAA,CAAK;wBACfV,MAAM;wBACNzQ,QAAQmI,YAAYmU,QAAAA;oBAAAA,CACrB;oBACD;gBAEF,KAAK;oBACHpU,YAAYiJ,IAAAA,CAAK;wBACfV,MAAM;wBACNzQ,QAAQmI,YAAYmU,QAAAA;oBAAAA,CACrB;oBACD;gBAEF,KAAK;oBACHpU,YAAYiJ,IAAAA,CAAK;wBACfV,MAAM;wBACN8a,eAAe;4BACb9a,MAAM;4BACN9O,OAAO;gCACLC,OAAOwG,MAAMpB,WAAAA,CAAYpG,IAAAA;gCACzB,GAAIwH,MAAMpB,WAAAA,CAAY7F,KAAAA,IAAS,CAAA,CAAA;4BAAC;4BAElC6nB,WAAW5gB,MAAM4gB,SAAAA;wBAAAA;wBAEnBhpB,QAAQmI,YAAYmU,QAAAA;oBAAAA,CACrB;oBACD;gBAEF;oBACEpU,YAAYiJ,IAAAA,CAAK;wBACfV,MAAM;wBACN8a,eAAenjB;wBACfpI,QAAQmI,YAAYmU,QAAAA;oBAAAA,CACrB;YAAA;QAEP;QACApc,IAAIA,CAACkI,OAAOkoC,WACWjf,WAAWnxB,EAAAA,CAAGkI,OAAQA,CAAAA,WAAU;gBACnD,OAAQA,OAAMqI,IAAAA,EAAAA;oBACZ,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;wBACH6/B,SAASloC,MAAK;wBACd;gBAAA;YAEN,CAAC;QAIHiU,WAAW;YACTixB;YACAplC;YACAC;QAAAA;IACF;IAGF,OAAO;QACLu/B,QAAQ;YACNx/B;YACA+nC;YACA5e;YACA6e;QAAAA;QAEFlwC;QACA2gB;IAAAA;AAEJ;AAEA,SAASqvB,2BAA2BrgC,MAAAA,EAAsB;IACxD,MAAM,EAACsC,YAAAA,EAAc3L,MAAAA,EAAAA,GAAUiqC,+BAA+B5gC,MAAM;IAEpE,OAAO;QACL+F,YAAYyC,qBAAqBlG,YAAY;QAC7CkC,iBAAiBA,IAAMlC;QACvBmF,cAAczH,OAAOyH,YAAAA,IAAgBtI;QACrCuc,WAAW1b,OAAO0b,SAAAA;QAClBhZ,UAAU1C,OAAO0C,QAAAA;QACjB/L;QACAqvB,cAAchmB,OAAOgmB,YAAAA;IAAAA;AAEzB;AAEA,SAAS4a,+BAA+B5gC,MAAAA,EAAsB;IAC5D,MAAMsC,eAAetC,OAAO6gC,gBAAAA,GACxB1J,sCAAsCn3B,OAAO6gC,gBAAgB,IAC7DtL,mBACEv1B,OAAOrJ,MAAAA,CAAOmuB,cAAAA,CAAe,UAAU,IACnC9kB,OAAOrJ,MAAAA,GACP8R,YAAYzI,OAAOrJ,MAAM,CAC/B,GACEA,SAASsgC,2BAA2B30B,YAAY;IAEtD,OAAO;QACLA;QACA3L;IAAAA;AAEJ;AAEA,SAAS6pC,aAAaxgC,MAAAA,EAQpB;IACAjP,QAAM,qBAAqB;IAE3B,MAAMuvC,iOAAgBF,eAAAA,EAAY1I,iBAAiB;QACjDrE,OAAO;YACL3wB,UAAU1C,OAAOzH,WAAAA,CACdG,WAAAA,CAAAA,EACAC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YACrChC,QAAQqJ,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YACjD6B,aAAawH,OAAOxH,WAAAA;QAAAA;IACtB,CACD,GAEK+nC,6NAAYH,eAAAA,EAAY9C,aAAa;QACzCjK,OAAO;YACLrN,cAAchmB,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQgtB,YAAAA;YACvDve,cAAczH,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;YACvD/E,UAAU1C,OAAOzH,WAAAA,CACdG,WAAAA,CAAAA,EACAC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YACrChC,QAAQqJ,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YACjD6B,aAAawH,OAAOxH,WAAAA;QAAAA;IACtB,CACD;IAEDwH,OAAAA,OAAOgR,aAAAA,CAAc3Y,IAAAA,CAAK,MAAM;QAC9B,MAAM3H,eAAe4vC,cAAc/vC,EAAAA,CAAG,KAAMkI,CAAAA,UAAU;YAChDA,MAAMqI,IAAAA,KAAS,2BACjBy/B,UAAU/+B,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAwB,GAE5CrI,MAAMqI,IAAAA,KAAS,cAAA,CACjBy/B,UAAU/+B,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAW,GACjCd,OAAOzH,WAAAA,CAAYiJ,IAAAA,CAAK;gBACtBV,MAAM;gBACNoQ,SAASzY,MAAMyY,OAAAA;gBACf1U,UAAU/D,MAAM+D,QAAAA;gBAChBhL,OAAOiH,MAAM+D,QAAAA;YAAAA,CACd,CAAA,GAEC/D,MAAMqI,IAAAA,KAAS,WACjBd,OAAO0hB,UAAAA,CAAWlgB,IAAAA,CAAK/I,KAAK;QAEhC,CAAC;QAED,OAAO,MAAM;YACX/H,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDqP,OAAOgR,aAAAA,CAAc3Y,IAAAA,CAAK,MAAM;QAC9B,MAAM3H,eAAe6vC,UAAUhwC,EAAAA,CAAG,KAAMkI,CAAAA,UAAU;YAChD,OAAQA,MAAMqI,IAAAA,EAAAA;gBACZ,KAAK;oBACHd,OAAO0hB,UAAAA,CAAWlgB,IAAAA,CAAK/I,KAAK;oBAC5B;gBACF,KAAK;oBACHuH,OAAO0hB,UAAAA,CAAWlgB,IAAAA,CAAK/I,KAAK;oBAC5B;gBACF,KAAK;oBACHuH,OAAOzH,WAAAA,CAAYiJ,IAAAA,CAAK;wBACtB,GAAG/I,KAAAA;wBACHqI,MAAM;wBACNtP,OAAO6B,eACL2M,OAAOxH,WAAAA,CAAY9F,QAAAA,EACnBsN,OAAOzH,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EACtD4M,qBAAqBb,GAAAA,CAAIgD,OAAOxH,WAAW,CAC7C;oBAAA,CACD;oBACD;gBAEF;oBACEwH,OAAOzH,WAAAA,CAAYiJ,IAAAA,CAAK/I,KAAK;YAAA;QAEnC,CAAC;QAED,OAAO,MAAM;YACX/H,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDqP,OAAOgR,aAAAA,CAAc3Y,IAAAA,CAAK,MAAM;QAC9B,MAAM3H,eAAesP,OAAOzH,WAAAA,CAAYuoC,SAAAA,CAAWtkC,CAAAA,aAAa;YAC1DA,SAAS7D,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,IAAA,CAC7C2nC,cAAc9+B,IAAAA,CAAK;gBAACV,MAAM;gBAAmB4B,UAAU,CAAA;YAAA,CAAK,GAC5D69B,UAAU/+B,IAAAA,CAAK;gBAACV,MAAM;gBAAmB4B,UAAU,CAAA;YAAA,CAAK,CAAA,IAAA,CAExD49B,cAAc9+B,IAAAA,CAAK;gBAACV,MAAM;gBAAmB4B,UAAU,CAAA;YAAA,CAAM,GAC7D69B,UAAU/+B,IAAAA,CAAK;gBAACV,MAAM;gBAAmB4B,UAAU,CAAA;YAAA,CAAM,CAAA;QAE7D,CAAC;QAED,OAAO,MAAM;YACXhS,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDqP,OAAOgR,aAAAA,CAAc3Y,IAAAA,CAAK,MAAM;QAC9B,MAAM3H,eAAesP,OAAOzH,WAAAA,CAAYhI,EAAAA,CAAG,KAAMkI,CAAAA,UAAU;YACzD,OAAQA,MAAMqI,IAAAA,EAAAA;gBACZ,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;oBACHd,OAAO0hB,UAAAA,CAAWlgB,IAAAA,CAAK/I,KAAK;oBAC5B;gBACF,KAAK;oBACH6nC,cAAc9+B,IAAAA,CAAK;wBAAC,GAAG/I,KAAAA;wBAAOqI,MAAM;oBAAA,CAAQ;oBAC5C;YAAA;QAEN,CAAC;QAED,OAAO,MAAM;YACXpQ,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEM;QACL2vC;QACAC;IAAAA;AAEJ;AC3VO,MAAMQ,8NAAoB/iC,gBAAAA,EAA0B,CAAA,CAAgB;ACEpE,SAAAgjC,qBAAA9wC,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,CAAA;IAAA,IAAAK;IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAQ+BO,KAAAwwC,CAAAA,SAClC/wC,MAAKkf,QAAAA,CAAU6xB,MAAM,GAAC9wC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IADxB,MAAA+wC,uNAAqB1wC,iBAAAA,EAAeC,EAEpC;IAAC,IAAAG;IAAAT,CAAAA,CAAAA,EAAAA,KAAA+wC,gBAAA/wC,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwxB,UAAAA,GAAAA,CAES9wB,KAAAA,MAAA;QACR,MAAAqgB,MAAY/gB,MAAKwxB,UAAAA,CAAAnxB,EAAAA,CAAe,KAAGkI,CAAAA,UAAA;YACjC,MAAA0oC,WAAeC,cAAc3oC,KAAK;YAE9BwoC,YACFC,aAAaD,QAAM;QAAC,CAEvB;QAAC,OAAA,MAAA;YAEAhwB,IAAGtgB,WAAAA,CAAAA;QAAc;IAAA,GAEpBR,CAAAA,CAAAA,EAAAA,GAAA+wC,cAAA/wC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwxB,UAAAA,EAAAvxB,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAkR;IAAA,OAAAlR,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwxB,UAAAA,GAAAA,CAAErgB,KAAA;QAACnR,MAAKwxB,UAAA;KAAA,EAAYvxB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwxB,UAAAA,EAAAvxB,CAAAA,CAAAA,EAAAA,GAAAkR,EAAAA,IAAAA,KAAAlR,CAAAA,CAAA,CAAA,CAAA,2MAXrBU,aAAAA,EAAUD,IAWPyQ,EAAkB,GAAC;AAAA;AAKjB,SAAS+/B,cACd3oC,KAAAA,EAC0B;IAC1B,OAAQA,MAAMqI,IAAAA,EAAAA;QACZ,KAAK;YACH,OAAO;gBAACA,MAAM;gBAAQrI,OAAOA,MAAMA,KAAAA;YAAAA;QAErC,KAAK;YACH,OAAOA;QACT,KAAK;YACH,OAAO;gBAACqI,MAAM;gBAAWugC,WAAW,CAAA;YAAA;QAEtC,KAAK;YACH,OAAO;gBAACvgC,MAAM;gBAAWugC,WAAW,CAAA;YAAA;QAEtC,KAAK;YACH,OAAO;gBAACvgC,MAAM;gBAASrI,OAAOA,MAAMA,KAAAA;YAAAA;QAEtC,KAAK;YACH,OAAO;gBAACqI,MAAM;gBAAStP,OAAOiH,MAAMjH,KAAAA;YAAAA;QAEtC,KAAK;YACH,OAAO;gBACLsP,MAAM;gBACN66B,YAAYljC,MAAMkjC,UAAAA;gBAClBnqC,OAAOiH,MAAMjH,KAAAA;YAAAA;QAGjB,KAAK;YACH,OAAOiH;QAET,KAAK;YACH,OAAOA;QAET,KAAK;YACH,OAAOA;QAET,KAAK;YACH,OAAOA;IAAAA;AAGb;ACpCA,MAAM1H,UAAQC,cAAc,8BAA8B;AAyEnD,MAAMswC,iOAA2BC,YAAAA,CAEtC;IACA,OAAcC,cAAc,qBAAA;IAAA;;GAAA,GAIrBC,UAAyB,iJAAIC,UAAAA,CAAAA,EAAAA;IAAAA;;GAAAA,GAAAA;;GAAAA,GAAAA;;GAAAA,GAqB5B1wB,gBAAyC,CAAA,CAAA,CAAA;IACzC2wB,gBAAmC,CAAA,CAAA,CAAA;IAE3CC,YAAY1xC,KAAAA,CAAgC;QAG1C,IAFA,KAAA,CAAMA,KAAK,GAEPA,MAAMG,MAAAA,EACR,IAAA,CAAKA,MAAAA,GAASH,MAAMG,MAAAA,EACpB,IAAA,CAAKuB,WAAAA,GAAc,IAAA,CAAKvB,MAAAA,CAAOqc,SAAAA,CAAUnU,WAAAA,CACtCG,WAAAA,CAAAA,EACAM,OAAAA,CAAQwL,eAAAA,CAAAA;aACN;YACL,MAAM,EAACuzB,MAAAA,EAAQ1nC,MAAAA,EAAQ2gB,aAAAA,EAAAA,GAAiBmvB,qBAAqB;gBAC3Dna,cAAc91B,MAAMsB,KAAAA;gBACpBiW,cAAcvX,MAAMuX,YAAAA;gBACpBiU,WACExrB,MAAMwrB,SAAAA,KAAc3nB,KAAAA,IAChBA,KAAAA,IACA8tC,OAAOC,QAAAA,CAAS5xC,MAAMwrB,SAAAA,CAAUlc,QAAAA,CAAAA,GAAY,EAAE;gBACpDkD,UAAUxS,MAAMwS,QAAAA;gBAChB/L,QAAQzG,MAAMqS,UAAAA;YAAAA,CACf;YAED,IAAA,CAAKyO,aAAAA,GAAgBA,eACrB,IAAA,CAAK+mB,MAAAA,GAASA,QAEd,IAAA,CAAK1nC,MAAAA,GAASA,QACd,IAAA,CAAKuB,WAAAA,GAAcmmC,OAAOx/B,WAAAA,CACvBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQwL,eAAAA,CAAAA;QACb;QAEA,IAAA,CAAKm5B,QAAAA,GAAW,IAAA,CAAKttC,MAAAA,CAAOqc,SAAAA,CAAUixB,QAAAA;IACxC;IAEAoE,oBAA0B;QACxB,IAAI,CAAC,IAAA,CAAKhK,MAAAA,EACR;QAGF,KAAA,MAAWrnC,gBAAgB,IAAA,CAAKsgB,aAAAA,CAC9B,IAAA,CAAK2wB,aAAAA,CAActpC,IAAAA,CAAK3H,cAAc;QAGxC,MAAMsxC,yBAAyB,IAAA,CAAKjK,MAAAA,CAAOrW,UAAAA,CAAWnxB,EAAAA,CAAG,KAAMkI,CAAAA,UAAU;YACvE,MAAMwoC,SAASG,cAAc3oC,KAAK;YAE7BwoC,UAAAA,CAIA,IAAA,CAAK/wC,KAAAA,CAAMG,MAAAA,IACd,IAAA,CAAKH,KAAAA,CAAMkf,QAAAA,CAAS6xB,MAAM,GAG5B,IAAA,CAAKQ,OAAAA,CAAQxnB,IAAAA,CAAKgnB,MAAM,CAAA;QAC1B,CAAC;QAED,IAAA,CAAKU,aAAAA,CAActpC,IAAAA,CAAK2pC,uBAAuBrxC,WAAW,GAE1D,IAAA,CAAKonC,MAAAA,CAAOx/B,WAAAA,CAAY/C,KAAAA,CAAAA,GACxB,IAAA,CAAKuiC,MAAAA,CAAOuI,aAAAA,CAAc9qC,KAAAA,CAAAA,GAC1B,IAAA,CAAKuiC,MAAAA,CAAOrW,UAAAA,CAAWlsB,KAAAA,IACvB,IAAA,CAAKuiC,MAAAA,CAAOwI,SAAAA,CAAU/qC,KAAAA,CAAAA;IACxB;IAEAysC,mBAAmBC,SAAAA,EAAoC;QAGnD,CAAC,IAAA,CAAKhyC,KAAAA,CAAMG,MAAAA,IACZ,CAAC6xC,UAAU7xC,MAAAA,IACX,IAAA,CAAKH,KAAAA,CAAMqS,UAAAA,KAAe2/B,UAAU3/B,UAAAA,IAEpC/G,QAAQC,IAAAA,CAAK,6CAA6C,GAGxD,CAAC,IAAA,CAAKvL,KAAAA,CAAMG,MAAAA,IAAU,CAAC6xC,UAAU7xC,MAAAA,IAAAA,CAC/B,IAAA,CAAKH,KAAAA,CAAMwS,QAAAA,KAAaw/B,UAAUx/B,QAAAA,IACpC,IAAA,CAAKrS,MAAAA,CAAOqc,SAAAA,CAAUnU,WAAAA,CAAYiJ,IAAAA,CAAK;YACrCV,MAAM;YACN4B,UAAU,IAAA,CAAKxS,KAAAA,CAAMwS,QAAAA,IAAY,CAAA;QAAA,CAClC,GAGC,IAAA,CAAKxS,KAAAA,CAAMwrB,SAAAA,KAAcwmB,UAAUxmB,SAAAA,IACrC,IAAA,CAAKrrB,MAAAA,CAAOqc,SAAAA,CAAUnU,WAAAA,CAAYiJ,IAAAA,CAAK;YACrCV,MAAM;YACN4a,WACE,IAAA,CAAKxrB,KAAAA,CAAMwrB,SAAAA,KAAc3nB,KAAAA,IACrBA,KAAAA,IACA8tC,OAAOC,QAAAA,CAAS,IAAA,CAAK5xC,KAAAA,CAAMwrB,SAAAA,CAAUlc,QAAAA,CAAAA,GAAY,EAAE;QAAA,CAC1D,GAGC,IAAA,CAAKtP,KAAAA,CAAMsB,KAAAA,KAAU0wC,UAAU1wC,KAAAA,IACjC,IAAA,CAAKnB,MAAAA,CAAOmR,IAAAA,CAAK;YACfV,MAAM;YACNtP,OAAO,IAAA,CAAKtB,KAAAA,CAAMsB,KAAAA;QAAAA,CACnB,GAID,IAAA,CAAKtB,KAAAA,CAAMiyC,SAAAA,KAAcD,UAAUC,SAAAA,IACnC,IAAA,CAAKjyC,KAAAA,CAAMiyC,SAAAA,IAAAA,CAEX,IAAA,CAAKjyC,KAAAA,CAAMiyC,SAAAA,CAAU/xB,OAAAA,GAAU,IAAA,CAAA;IAGrC;IAEAgyB,uBAA6B;QAC3B,KAAA,MAAWzxC,eAAe,IAAA,CAAKgxC,aAAAA,CAC7BhxC,YAAAA;QAGE,IAAA,CAAKonC,MAAAA,IAAAA,CACP9yB,UAAU,IAAA,CAAK8yB,MAAAA,CAAOx/B,WAAW,GACjC0M,UAAU,IAAA,CAAK8yB,MAAAA,CAAOuI,aAAa,GACnCr7B,UAAU,IAAA,CAAK8yB,MAAAA,CAAOrW,UAAU,GAChCzc,UAAU,IAAA,CAAK8yB,MAAAA,CAAOwI,SAAS,CAAA;IAEnC;IAEO8B,cAAe1E,CAAAA,aAA0B;QAC9C,IAAA,CAAKttC,MAAAA,CAAOqc,SAAAA,CAAUixB,QAAAA,GAAW;YAC/B,GAAG,IAAA,CAAKttC,MAAAA,CAAOqc,SAAAA,CAAUixB,QAAAA;YACzB,GAAGA,QAAAA;QAAAA;IAEP,EAAA;IAEA2E,SAAS;QACP,MAAMC,gBAAiB,IAAA,CAAKryC,KAAAA,CAAMG,MAAAA,GAE9B0D,KAAAA,IADC,IAAA,CAAK7D,KAAAA,CAAMsyC,gBAAAA,IAAoB,IAAA,CAAKtyC,KAAAA,CAAMuyC,QAAAA;QAG/C,OACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,EAAA,mOAAA,EAAA;YACGF,UAAAA;gBAAAA,gBACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,qCAAA;oBACC,aAAa,IAAA,CAAKlyC,MAAAA,CAAOqc,SAAAA,CAAUnU,WAAAA;oBACnC,UAAUgqC;gBAAAA,CAAc,IAExB;gBAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACH,mBAAmB,QAAA,EAAnB;oBAA4B,OAAO,IAAA,CAAKlyC,MAAAA,CAAOqc,SAAAA,CAAUnU,WAAAA;oBACxD,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,kBAAkB,QAAA,EAAlB;wBAA2B,OAAO,IAAA,CAAKw/B,MAAAA,CAAQrW,UAAAA;wBAC9C,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,8KAAA,EAAA;4BACC,QAAQ,IAAA,CAAKrxB,MAAAA,CAAOqc,SAAAA,CAAUlU,WAAAA,CAAYmU,QAAAA;4BAC1C,cAAc,IAAA,CAAKtc,MAAAA,CAAOqc,SAAAA,CAAUlU,WAAAA,CAAYwtB,YAAAA;4BAEhD,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,0BAA0B,QAAA,EAA1B;gCAAmC,OAAO,IAAA;gCACxC,UAAA,IAAA,CAAK91B,KAAAA,CAAMwC,QAAAA;4BAAAA,CACd;wBAAA,CACF;oBAAA,CACF;gBAAA,CACF;aAAA;QAAA,CACF;IAEJ;IAAA;;;;;;;;;GAAA,GAYA,OAAOmX,oBACLxZ,CAAAA,SAEOA,UAAUA,OAAOstC,QAAAA,GAAWttC,OAAOstC,QAAAA,CAAS9zB,iBAAAA,CAAAA,IAAsB,CAAA,CAAA,CAAA;IAAA;;;;;;;;;GAAA,GAa3E,OAAOywB,qBAAqBA,CAC1BjqC,QACAkqC,iBAEOlqC,UAAUA,OAAOstC,QAAAA,GACpBttC,OAAOstC,QAAAA,CAASrD,kBAAAA,CAAmBC,cAAc,IACjD,CAAA,EAAA;IAAA;;;;;;;;;;;;;;GAAA,GAkBN,OAAOC,gBAAgBA,CACrBnqC,QACAyQ,MACAtP,QAEAnB,OAAOstC,QAAAA,EAAUnD,cAAc15B,MAAMtP,KAAK,EAAA;IAAA;;;;;;;;;;GAAA,GAa5C,OAAOyiC,OAAQ5jC,CAAAA,WAAqC;QAClDU,QAAM,cAAc,GACpBV,OAAOstC,QAAAA,EAAU1J,KAAAA;IACnB,EAAA;IAEA,OAAOtb,SAASA,CACdtoB,QACAyE,WACAgS,UACGzW,OAAOstC,QAAAA,EAAUhlB,OAAO7jB,WAAWgS,OAAO,EAAA;IAE/C,OAAOszB,cAAcA,CACnB/pC,QACA0G,UAEO1G,OAAOstC,QAAAA,EAAUvD,YAAYrjC,OAAO,EAAA;IAG7C,OAAOijC,aAAaA,CAAC3pC,QAA4B4E,OACxC5E,OAAOstC,QAAAA,EAAU3D,WAAW/kC,IAAI,KAAK,CAAA,CAAA,CAAA;IAAA;;;;;;;;;;GAAA,GAc9C,OAAOD,QAAS3E,CAAAA,WAAqC;QACnDU,QAAM,uBAAuB,GAC7BV,OAAOstC,QAAAA,EAAU3oC,MAAAA;IACnB,EAAA;IAAA;;;;;;;;;GAAA,GAYA,OAAOe,aAAc1F,CAAAA,SACZA,OAAOstC,QAAAA,EAAU5nC,WAAAA,EAAAA;IAAAA;;;;;;;;;GAAAA,GAa1B,OAAOG,aACL7F,CAAAA,SAEOA,OAAOstC,QAAAA,EAAUznC,WAAAA,EAAAA;IAAAA;;;;;;;;;GAAAA,GAa1B,OAAOykC,eAAgBtqC,CAAAA,SACdA,OAAOstC,QAAAA,GAAWttC,OAAOstC,QAAAA,CAAShD,YAAAA,KAAiB,KAAA;IAAA;;;;;;;;;GAAA,GAa5D,OAAOG,WAAYzqC,CAAAA,SACVA,OAAOstC,QAAAA,EAAU7C,SAAAA,EAAAA;IAAAA;;;;;;;;;GAAAA,GAa1B,OAAOhB,gBAAgBA,CAACzpC,QAA4BqyC,aAC3CryC,OAAOstC,QAAAA,EAAU7D,cAAc4I,UAAU,EAAA;IAAA;;;;;;;;;GAAA,GAalD,OAAO3I,eAAeA,CAAC1pC,QAA4BsyC,YAC1CtyC,OAAOstC,QAAAA,EAAU5D,aAAa4I,SAAS,EAAA;IAAA;;;;;;;;;GAAA,GAahD,OAAO5H,uBAAwB1qC,CAAAA,SAC7BA,OAAOstC,QAAAA,EAAU5C,qBAAAA,EAAAA;IAAAA;;;;;;;;;GAAAA,GAYnB,OAAOC,sBAAuB3qC,CAAAA,SAC5BA,OAAOstC,QAAAA,EAAU3C,oBAAAA,EAAAA;IAAAA;;;;;;;;;GAAAA,GAYnB,OAAOxB,eAAeA,CAACnpC,QAA4B+Z,OACjD/Z,OAAOstC,QAAAA,EAAUnE,aAAapvB,IAAI,EAAA;IAAA;;;;;;;;;;;;;;;;;;;;GAAA,GAuBpC,OAAOuvB,cAAcA,CACnBtpC,QACAyQ,MACAtP,QAAAA,CAEAT,QAAM,sBAAsB,GACrBV,OAAOstC,QAAAA,EAAUhE,YAAY74B,MAAMtP,KAAK,CAAA,EAAA;IAAA;;;;;;;;;;;;;;;GAAA,GAmBjD,OAAO4nB,cAAcA,CACnB/oB,QACAyQ,MACAtP,QAEOnB,OAAOstC,QAAAA,EAAUvkB,YAAYtY,MAAMtP,KAAK,EAAA;IAAA;;;;;;;;;;GAAA,GAcjD,OAAOuqB,cAAe1rB,CAAAA,SACbA,OAAOstC,QAAAA,EAAU5hB,YAAAA,EAAAA;IAG1B,OAAO4G,SAASA,CACdtyB,QACA0G,UAEO1G,OAAOstC,QAAAA,EAAUhb,OAAO5rB,OAAO,EAAA;IAGxC,OAAO6rC,eAAeA,CAACC,SAA6B5tC,SAAwB;QAC1E,IAAI,CAACA,QAAQ,CAACpD,MAAMC,OAAAA,CAAQmD,IAAI,EAAG,CAAA,OAAO,CAAA;QAC1C,MAAM6tC,wBAAwB7tC,KAAKjB,MAAAA,GAAS,KAAKiB,IAAAA,CAAK,CAAC,CAAA,KAAM;QAE7D,OAD8BA,KAAKjB,MAAAA,GAAS,KAAKiB,IAAAA,CAAK,CAAC,CAAA,KAAM,cAC7B6tC;IAClC,EAAA;IAEA,OAAO9vC,QAAS3C,CAAAA,SACPA,OAAOstC,QAAAA,EAAU3qC,MAAAA,EAAAA;IAAAA;;;;;;;;;;;GAAAA,GAe1B,OAAOsmB,SAASA,CACdjpB,QACAyE,cACG;QACH/D,QAAM,0BAA0B+D,SAAS,GACzCzE,OAAOstC,QAAAA,EAAUrkB,OAAOxkB,SAAS;IACnC,EAAA;IAAA;;;;;;;;;;;;;GAAA,GAgBA,OAAO4lC,mBAAmBA,CACxBrqC,QACAyQ,OACGzQ,OAAOstC,QAAAA,EAAUjD,iBAAiB55B,IAAI,EAAA;IAAA;;;;;;;;;;;GAAA,GAc3C,OAAOy4B,mBAAmBA,CACxBlpC,QACAqyC,aAAAA,CAEA3xC,QAAM,8BAA8B,GAC7BV,OAAOstC,QAAAA,EAAUpE,iBAAiBmJ,UAAU,CAAA,EAAA;IAAA;;;;;;;;;;;GAAA,GAerD,OAAOpJ,aAAaA,CAACjpC,QAA4BsyC,YACxCtyC,OAAOstC,QAAAA,EAAUrE,WAAWqJ,SAAS,EAAA;IAAA;;;;;;;;;;;GAAA,GAe9C,OAAOtJ,aAAaA,CAAChpC,QAA4B+Z,SAAuB;QACtErZ,QAAM,sBAAsBqZ,IAAI,GAChC/Z,OAAOstC,QAAAA,EAAUtE,WAAWjvB,IAAI;IAClC,EAAA;IAAA;;;;;;;;;GAAA,GAYA,OAAO6wB,cACL5qC,CAAAA,SAEOA,OAAOstC,QAAAA,EAAU1C,YAAAA,EAAAA;IAAAA;;;;;;;;;;GAAAA,GAc1B,OAAO5e,OAAQhsB,CAAAA,WAAqC;QAClDU,QAAM,cAAc,GACpBV,OAAOstC,QAAAA,EAAUthB,KAAAA;IACnB,EAAA;IAAA;;;;;;;;;;GAAA,GAaA,OAAOF,OAAQ9rB,CAAAA,WAAqC;QAClDU,QAAM,cAAc,GACpBV,OAAOstC,QAAAA,EAAUxhB,KAAAA;IACnB,EAAA;IAAA;;;;;;;;;GAAA,GAYA,OAAO+e,0BAA0BA,CAC/B7qC,QACA8qC,YACAC,aAEO/qC,OAAOstC,QAAAA,EAAUzC,wBAAwBC,YAAYC,UAAU,EAAA;AAE1E;AAEA,SAAA2H,oCAAA7yC,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,CAAA;IAAA,IAAAK,IAAAG;IAAA,OAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAqI,WAAAA,IAAApI,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuyC,QAAAA,GAAAA,CAIYhyC,KAAAA,MAAA;QACR,MAAAC,eAAqBR,MAAKuyC,QAAAA,CAAA3B,SAAAA,CAAAkC,CAAAA,YAAA;YACxB9yC,MAAKqI,WAAAA,CAAAiJ,IAAAA,CAAA;gBAAAV,MACG;gBAAS,GACZkiC,OAAAA;YAAAA,CACJ;QAAC,CACH;QAAC,OAAA,MAAA;YAGAtyC,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE3BC,KAAAA;QAACV,MAAKqI,WAAAA;QAAcrI,MAAKuyC,QAAA;KAAA,EAAUtyC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAqI,WAAAA,EAAApI,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuyC,QAAAA,EAAAtyC,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,CAAAH,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAS,KAAAT,CAAAA,CAAA,CAAA,CAAA,6MAXtCU,YAAAA,EAAUJ,IAWPG,EAAmC,GAAC;AAAA;ACxvBlC,SAASqyC,WAAW/yC,KAAAA,EAAwB;IACjD,MAAMsI,kBAAcuK,uLAAAA,KACdxK,wNAAc6I,aAAAA,EAAWrD,kBAAkB,GAC3CuE,sMAAe4B,cAAAA,EAAY3L,aAAcgM,CAAAA,IAC7CA,EAAEvL,OAAAA,CAAQwL,eAAAA,EACZ,GACM0+B,cAAUnhC,+MAAAA,EAAoB,IAAI,GAClCohC,qBAAqBz+B,yBACrB0+B,0LAAgBnhC,cAAAA,CAAAA,IAChB,CAACC,SAASmhC,UAAU,CAAA,GAAIxhC,qNAAAA,EAAS,CAAA,CAAK,GACtC,CAACG,UAAUshC,WAAW,CAAA,6MAAIzhC,WAAAA,EAAS,CAAA,CAAK,GAExC7K,SAAS9G,MAAMwC,QAAAA,CAASxC,KAAAA,CAAM8G,MAAAA,EAC9BhF,QAAQgF,UAAUwB,YAAYf,WAAAA,CAAYT,MAAM,IAAIA,SAASjD,KAAAA,GAE7DkB,iNAAOsuC,UAAAA,EACX,IACEvxC,QACI;YAAC;gBAACP,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAMvB,MAAMszC,IAAAA,CAAK/xC,IAAAA;YAAAA,CAAK;SAAA,GACxDsC,KAAAA,GACN;QAAC/B;QAAO9B,MAAMszC,IAAAA,CAAK/xC,IAAI;KACzB,GAEMgyC,uBAAuBlrC,YAC1BG,WAAAA,CAAAA,EACAM,OAAAA,CAAQrC,MAAAA,CAAO0T,UAAAA,CAAWtY,GAAAA,CAAKuY,CAAAA,YAAcA,UAAUrZ,IAAI,GAExDoZ,gJAAamF,UAAAA,EAAAA,CAChBtf,MAAMszC,IAAAA,CAAKxwC,KAAAA,IAAS,CAAA,CAAA,EAAIgV,MAAAA,CAAQoC,CAAAA,OAC/Bq5B,qBAAqBl5B,QAAAA,CAASH,IAAI,CACpC,CACF,GAEMs5B,qBAAAA,CAAsBxzC,MAAMszC,IAAAA,CAAKxwC,KAAAA,IAAS,CAAA,CAAA,EAAI2T,OAAAA,CAASyD,CAAAA,WAAS;QACpE,IAAIq5B,qBAAqBl5B,QAAAA,CAASH,MAAI,GACpC,OAAO,CAAA,CAAA;QAGT,MAAMmD,YAAUvb,OAAOQ,UAAU0J,KAAMqR,CAAAA,UAAYA,QAAQ9b,IAAAA,KAAS2Y,MAAI;QAExE,OAAImD,YACK;YAACA,SAAO;SAAA,GAGV,CAAA,CAAA;IACT,CAAC,GAEKo2B,+BACJD,mBAAmB1vC,MAAAA,GAAS,KAAKovC;IAEnCvyC,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,IAAI,CAAC8yC,8BAA8B;YACjCN,WAAW,CAAA,CAAK;YAChB;QACF;QAEA,MAAMO,MAAMtC,mBAAmB3G,YAAAA,CAAawI,kBAAkB;QAG5DS,6IACAlyC,UAAAA,EAAQkyC,IAAI5uC,KAAAA,CAAMC,IAAAA,EAAMA,IAAI,KAC5BqsC,mBAAmBvG,oBAAAA,CAAqBoI,kBAAkB,KAE1DU,4NAAAA,EAAgB,MAAM;YACpBR,WAAW,CAAA,CAAI;QACjB,CAAC;IAEL,GAAG;QAACM;QAA8B1uC;QAAMkuC,kBAAkB;KAAC;IAG3D,MAAMW,iOAAuBC,cAAAA,EAAY,MAAM;QAC7C,IAAI,CAACJ,8BACH;QAGF,MAAMK,eAAerpC,OAAOggC,YAAAA,CAAAA;QAE5B,IAAI,CAACqJ,cAAc;YACjBV,YAAY,CAAA,CAAK;YACjB;QACF;QAEA,IAAIU,gBAAgBA,aAAaC,UAAAA,GAAa,GAAG;YAC/C,MAAMnsC,QAAQksC,aAAaE,UAAAA,CAAW,CAAC;YAEnChB,QAAQ9yB,OAAAA,IAAWtY,MAAMqsC,cAAAA,CAAejB,QAAQ9yB,OAAO,IACzDkzB,YAAY,CAAA,CAAI,IAEhBA,YAAY,CAAA,CAAK;QAErB,OACEA,YAAY,CAAA,CAAK;IAErB,GAAG;QAACK,4BAA4B;KAAC;IAEjC9yC,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,IAAI,CAAC8yC,8BACH;QAGF,MAAMS,SAAS7rC,YAAYhI,EAAAA,CAAG,WAAW,MAAM;YAC7C8yC,WAAW,CAAA,CAAK,GAChBC,YAAY,CAAA,CAAK;QACnB,CAAC,GAEKe,UAAU9rC,YAAYhI,EAAAA,CAAG,WAAW,MAAM;YAC9C,MAAMqzC,QAAMtC,mBAAmB3G,YAAAA,CAAawI,kBAAkB;YAG5DS,+IACAlyC,UAAAA,EAAQkyC,MAAI5uC,KAAAA,CAAMC,IAAAA,EAAMA,IAAI,KAC5BqsC,mBAAmBvG,oBAAAA,CAAqBoI,kBAAkB,KAE1DE,WAAW,CAAA,CAAI,GAGjBS,qBAAAA;QACF,CAAC,GAEKQ,cAAc/rC,YAAYhI,EAAAA,CAAG,aAAckI,CAAAA,UAAU;YAEvDA,MAAM3D,SAAAA,0IACNpD,UAAAA,EAAQ+G,MAAM3D,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,EAAMA,IAAI,KACxCqsC,mBAAmBvG,oBAAAA,CAAqBoI,kBAAkB,IAE1DE,WAAW,CAAA,CAAI,IAEfA,WAAW,CAAA,CAAK,GAElBS,qBAAAA;QACF,CAAC;QAED,OAAO,MAAM;YACXM,OAAOzzC,WAAAA,IACP0zC,QAAQ1zC,WAAAA,CAAAA,GACR2zC,YAAY3zC,WAAAA,CAAAA;QACd;IACF,GAAG;QACD4H;QACAtD;QACAkuC;QACAW;QACAH,4BAA4B;KAC7B,6MAED9yC,YAAAA,EAAU,IAAMizC,wBAAwB;QAACA,oBAAoB;KAAC;IAE9D,IAAIpxC,WAAWxC,MAAMwC,QAAAA;IAKrB,KAAA,MAAW0X,UAAQC,WAAY;QAC7B,MAAMk6B,4BAA4BjiC,aAAa+H,UAAAA,CAAWnO,IAAAA,CACvDygC,CAAAA,MAAQA,IAAInrC,KAAAA,KAAU4Y,MACzB;QAEInV,QAAQsvC,6BAA6Br0C,MAAMs0C,eAAAA,IAAAA,CAC7C9xC,WAAWxC,MAAMs0C,eAAAA,CAAgB;YAC/B9xC;YACAkQ,kBAAkBsgC;YAClBhhC;YACAjN;YACA+M;YACAO,YAAYgiC;YACZ/yC,OAAO4Y;YACPtJ,MAAMyjC;QAAAA,CACP,CAAA;IAEL;IAKA,KAAA,MAAWE,qBAAqBf,mBAAoB;QAClD,MAAMgB,6BAA6BpiC,aAAac,WAAAA,CAAYlH,IAAAA,CACzDvI,CAAAA,IAAMA,EAAE1C,IAAAA,KAASwzC,kBAAkBxyC,KACtC;QACIyyC,8BAAAA,CACE1yC,SAASiD,QAAQ/E,MAAMy0C,gBAAAA,GACzBjyC,WACE,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,QAAA;YAAK,KAAKwwC;YACRhzC,UAAAA,MAAMy0C,gBAAAA,CAAiB;gBACtB3yC;gBACAU;gBACAkQ,kBAAkBsgC;gBAClBhhC;gBACAjN;gBACA+M;gBACAO,YAAYmiC;gBACZlzC,OAAOizC;gBACP3jC,MAAM4jC;YAAAA,CACP;QAAA,CACH,IAGFhyC,WAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAY,QAAA;YAAK,KAAKwwC;YAAUxwC;QAAAA,CAAS,CAAA;IAG/C;IAKA,IAAIV,SAASiD,QAAQ/E,MAAMiT,WAAAA,EAAa;QACtC,MAAMxQ,QAAQX,MAAMU,QAAAA,CAASwJ,IAAAA,CAC1B0oC,CAAAA,SAAWA,OAAOnzC,IAAAA,KAASvB,MAAMszC,IAAAA,CAAK/xC,IACzC;QAEIkB,SAAAA,CACFD,WAAWxC,MAAMiT,WAAAA,CAAY;YAC3BC,aAAasgC;YACbhxC;YACAkQ,kBAAkBsgC;YAClBhhC;YACAjN;YACAsN,YAAYD,aAAasF,IAAAA;YACzB5F;YACAxQ,OAAOmB;YACPmO,MAAMwB,aAAasF,IAAAA;QAAAA,CACpB,CAAA;IAEL;IAEA,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EACG,QAAA;QAAK,GAAI1X,MAAMuS,UAAAA;QAAY,KAAKygC;QAC9BxwC;IAAAA,CACH;AAEJ;ACrPA,MAAMmyC,oBAAmC;IACvC7pC,UAAU;IACVwD,YAAY;IACZsmC,eAAe;IACfxb,MAAM;IACNC,OAAO;AACT;AAEO,SAAAwb,WAAA70C,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,EAAA,GAULmI,wNAAoB6I,aAAAA,EAAArD,kBAA6B,GACjDpH,gMAAeuN,cAAAA,EAAY3L,aAAW4L,KAAyB;IAAC,IAE5DjU,MAAKszC,IAAAA,CAAAvxC,KAAAA,KAAgB0E,OAAMiR,IAAAA,CAAA3W,IAAAA,EAAU,OAChCf,MAAKwC,QAAAA;IAAA,IAAAjC;IAAAN,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGKO,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,YAAA;QAAU,GAAKP,KAAAA;IAAAA,CAAK,GAAIC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAA5C,IAAA60C,eAAmBv0C;IAAyB,IAG1CP,MAAK+0C,iBAAAA,IACL/0C,MAAKszC,IAAAA,CAAA0B,WAAAA,IACLh1C,MAAK6C,IAAAA,CAAAA,IAAAA,KAAe,IAAE;QAAA,IAAAnC;QAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA+0C,iBAAAA,GAAAA,CAKfr0C,KAAAV,MAAK+0C,iBAAAA,IAAoB90C,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA+0C,iBAAAA,EAAA90C,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA;QAAA,IAAAkR;QAAAlR,CAAAA,CAAAA,EAAAA,KAAAS,KAAAA,CAD5ByQ,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,QAAAA;YAAawjC,OAAAA;YAAoC,iBAAA,CAAA;YAC9Cj0C,UAAAA;QAAAA,CACH,GAAOT,CAAAA,CAAAA,EAAAA,GAAAS,IAAAT,CAAAA,CAAAA,EAAAA,GAAAkR,EAAAA,IAAAA,KAAAlR,CAAAA,CAAA,CAAA,CAAA;QAAA,IAAAg1C;QAAA,OAAAh1C,CAAAA,CAAA,CAAA,CAAA,KAAA60C,gBAAA70C,CAAAA,CAAAA,EAAAA,KAAAkR,KAAAA,CAHT8jC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,0NAAA,WAAA,EAAA;YACE9jC,UAAAA;gBAAAA;gBAAAA;;SAGa,GACZlR,CAAAA,CAAAA,EAAAA,GAAA60C,cAAA70C,CAAAA,CAAAA,EAAAA,GAAAkR,IAAAlR,CAAAA,CAAAA,EAAAA,GAAAg1C,EAAAA,IAAAA,KAAAh1C,CAAAA,CAAA,CAAA,CAAA,EALHg1C;IAKG;IAIP,MAAAC,kBAAwBl1C,MAAKszC,IAAAA,CAAA4B,eAAAA;IAAqB,IAE9CA,iBAAe;QAAA,IAAAx0C;QAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAi1C,mBAAAj1C,CAAAA,CAAAA,GAAAA,KAAA60C,eAAAA,CACFp0C,KAAAw0C,gBAAeC,SAAAA,CAAA;YAAA3yC,UAAsBsyC;QAAAA,CAAa,GAAC70C,CAAAA,CAAAA,EAAAA,GAAAi1C,iBAAAj1C,CAAAA,CAAAA,GAAAA,GAAA60C,cAAA70C,CAAAA,CAAAA,GAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,EAAA,CAAA,EAAlE60C,eAAeA;IAAH;IAAA,OAGPA;AAAY;AAxCd,SAAA7gC,MAAAI,CAAAA,EAAA;IAAA,OAW0CA,EAACvL,OAAAA,CAAArC,MAAAA;AAAA;AC3B3C,SAAA2uC,WAAAp1C,KAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,CAAA;IAAA,IAAAK;IAAA,OAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuS,UAAAA,IAAAtS,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAwC,QAAAA,IAAAvC,CAAAA,CAAAA,EAAAA,KAAAD,MAAA6C,IAAAA,CAAAtB,IAAAA,IAAAtB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6C,IAAAA,CAAAd,KAAAA,GAAAA,CAEHxB,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAAA,QAAAA;QAOO,GANDP,MAAKuS,UAAAA;QACO,kBAAAvS,MAAK6C,IAAAA,CAAAtB,IAAAA;QACJ,mBAAAvB,MAAK6C,IAAAA,CAAAd,KAAAA;QACN,mBAAA;QAEf/B,UAAAA,MAAKwC,QAAAA;IAAAA,CACR,GAAOvC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuS,UAAAA,EAAAtS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAwC,QAAAA,EAAAvC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6C,IAAAA,CAAAtB,IAAAA,EAAAtB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6C,IAAAA,CAAAd,KAAAA,EAAA9B,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAPPM;AAOO;ACGJ,MAAM80C,SACX,OAAO5qC,SAAW,OAClB,uBAAuB6qC,IAAAA,CAAK7qC,OAAO8qC,SAAAA,CAAUC,SAAS,GAIlDC,YAAkD;IACtDxe,KAAK;IACLye,SAAS;IACTve,MAAM;IACN/U,OAAO;AACT,GAEMuzB,UAA8C;IAClDp4B,KAAK;IACL8Z,OAAO;IACPue,KAAK;IACLC,SAAS;IACTC,KAAK;IACL5e,MAAM;IACN6e,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,KAAK;IACL9c,MAAM;IACN+c,KAAKd,SAAS,SAAS;IACvBe,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRjd,OAAO;IACPkd,OAAO;IACPC,UAAU;IACVC,IAAI;IACJC,KAAK;IACLC,SAAS;AACX,GAEMC,WAA+C;IACnD,WAAa;IACb,KAAO;IACP,OAAS;IACT,OAAS;IACT,SAAW;IACX,KAAO;IACP,OAAS;IACT,UAAY;IACZ,QAAU;IACV,KAAK;IACL,QAAU;IACV,UAAY;IACZ,KAAO;IACP,MAAQ;IACR,WAAa;IACb,SAAW;IACX,YAAc;IACd,WAAa;IACb,QAAU;IACV,QAAU;IACV,MAAQ;IACR,SAAW;IACX,YAAc;IACd,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;AACT;AAEO,SAASC,SAASC,MAAAA,EAAgBvuC,KAAAA,EAAmC;IAC1E,OAAOwuC,cAAcC,YAAYF,MAAM,GAAGvuC,KAAK;AACjD;AAEA,SAASyuC,YAAYF,MAAAA,EAAwB;IAE3C,MAAMG,eAAuB;QAC3BC,QAAQ,CAAA;QACRC,SAAS,CAAA;QACTC,SAAS,CAAA;QACTC,UAAU,CAAA;IAAA,GAINC,iBAAiBR,OAAO3+B,OAAAA,CAAQ,MAAM,MAAM,EAAEF,KAAAA,CAAM,GAAG;IAE7D,KAAA,MAAWs/B,oBAAoBD,eAAgB;QAC7C,MAAME,WACJD,iBAAiBE,QAAAA,CAAS,GAAG,KAAKF,iBAAiBzzC,MAAAA,GAAS,GACxD4zC,gBAAgBF,WAClBD,iBAAiBvyC,KAAAA,CAAM,GAAG,CAAA,CAAE,IAC5BuyC,kBACEznB,UAAU6nB,UAAUD,aAAa,GACjCE,WAAWnC,SAAAA,CAAU3lB,OAAO,CAAA,EAC5B+nB,QAAQlC,OAAAA,CAAQ+B,aAAa,CAAA,EAC7B9f,QAAOgf,QAAAA,CAAS9mB,OAAO,CAAA;QAE7B,IACE4nB,cAAc5zC,MAAAA,GAAS,KACvB8zC,aAAa/zC,KAAAA,KACbg0C,UAAUh0C,KAAAA,KACV+zB,UAAS/zB,KAAAA,GAET,MAAM,IAAIi0C,UAAU,CAAA,mBAAA,EAAsBJ,aAAa,CAAA,CAAA,CAAG;QAG5D,CAAIJ,eAAexzC,MAAAA,KAAW,KAAK8zC,aAAa/zC,KAAAA,CAAAA,KAAAA,CAC9CozC,aAAa9mC,GAAAA,GAAM2f,SACnBmnB,aAAac,OAAAA,GAAUC,UAAUN,aAAa,CAAA,GAG5CE,aAAa/zC,KAAAA,KAAAA,CACfozC,YAAAA,CAAaW,QAAQ,CAAA,GAAIJ,WAAW,OAAO,CAAA,CAAA;IAE/C;IAEA,OAAOP;AACT;AAEA,SAASF,cACPE,YAAAA,EACA1uC,KAAAA,EACS;IAeT,OAAA,CAbG0uC,aAAaC,MAAAA,IAAU,QACpBD,aAAaC,MAAAA,KAAW3uC,MAAM2uC,MAAAA,KAAAA,CAEjCD,aAAaE,OAAAA,IAAW,QACrBF,aAAaE,OAAAA,KAAY5uC,MAAM4uC,OAAAA,KAAAA,CAElCF,aAAaG,OAAAA,IAAW,QACrBH,aAAaG,OAAAA,KAAY7uC,MAAM6uC,OAAAA,KAAAA,CAElCH,aAAaI,QAAAA,IAAY,QACtBJ,aAAaI,QAAAA,KAAa9uC,MAAM8uC,QAAAA,IAOlCJ,aAAac,OAAAA,KAAYl0C,KAAAA,KAAa0E,MAAMwvC,OAAAA,KAAYl0C,KAAAA,IACtDozC,aAAac,OAAAA,KAAY,MAAMxvC,MAAMwvC,OAAAA,KAAY,KAC5C,CAAA,IAGFd,aAAac,OAAAA,KAAYxvC,MAAMwvC,OAAAA,GAItCd,aAAac,OAAAA,KAAYxvC,MAAMwvC,OAAAA,IAC/Bd,aAAa9mC,GAAAA,KAAQ5H,MAAM4H,GAAAA,CAAI8nC,WAAAA,CAAAA,IAbxB,CAAA;AAeX;AAEA,SAASD,UAAUj3C,IAAAA,EAAsB;IACvC,MAAM+uB,UAAU6nB,UAAU52C,IAAI;IAG9B,OAFgB61C,QAAAA,CAAS9mB,OAAO,CAAA,IAAKA,QAAQooB,WAAAA,CAAAA,EAAcC,UAAAA,CAAW,CAAC;AAGzE;AAEA,SAASR,UAAU52C,IAAAA,EAAsB;IACvC,MAAM+uB,UAAU/uB,KAAKk3C,WAAAA,CAAAA;IAErB,OAAOtC,OAAAA,CAAQ7lB,OAAO,CAAA,IAAKA;AAC7B;ACvMA,MAAMjvB,UAAQC,cAAc,oBAAoB;AAMzC,SAASs3C,kBACd/vC,WAAAA,EACA4qC,kBAAAA,EACAoF,kBAAAA,EACwD;IACxD,MAAMC,kBAAkB;QAAC;QAAS;QAAO;QAAS;QAAU,KAAK;KAAA,EAC3DC,gBAAgBF,sBAAsB,CAAA;IAC5C,OAAO,SAAqBl4C,MAAAA,EAA+C;QACzEA,OAAAA,OAAOq4C,cAAAA,GAAkBjwC,CAAAA,UAA+C;YAEtEqM,OAAO+Z,IAAAA,CAAK4pB,aAAa,EAAEzjC,OAAAA,CAAS2jC,CAAAA,QAAQ;gBAC1C,IAAIA,QAAQ,SACV,IAAA,MAAW3B,UAAUyB,aAAAA,CAAcE,GAAG,CAAA,CAAG;oBACvC,IAAIH,gBAAgBj+B,QAAAA,CAASy8B,MAAM,GACjC,MAAM,IAAIzzC,MAAM,CAAA,WAAA,EAAcyzC,MAAM,CAAA,aAAA,CAAe;oBAErD,IAAID,SAASC,QAAQvuC,MAAMu4B,WAAW,GAAG;wBACvCv4B,MAAM24B,cAAAA,CAAAA;wBACN,MAAMwX,eAAeH,aAAAA,CAAcE,GAAG,CAAA;wBACtC,IAAIC,cAAc;4BAChB,MAAMx+B,OAAOw+B,YAAAA,CAAa5B,MAAM,CAAA;4BAChCj2C,QAAM,CAAA,OAAA,EAAUi2C,MAAM,CAAA,WAAA,EAAc58B,IAAI,EAAE,GAC1C7R,YAAYiJ,IAAAA,CAAK;gCACfV,MAAM;gCACN8a,eAAe;oCACb9a,MAAM;oCACNwJ,WAAWF;gCAAAA;gCAEb/Z;4BAAAA,CACD;wBACH;oBACF;gBACF;gBAEF,IAAIs4C,QAAQ,UACV,IAAA,MAAW3B,UAAUyB,aAAAA,CAAcE,GAAG,CAAA,CAAG;oBACvC,IAAIH,gBAAgBj+B,QAAAA,CAASy8B,MAAM,GACjC,MAAM,IAAIzzC,MAAM,CAAA,WAAA,EAAcyzC,MAAM,CAAA,aAAA,CAAe;oBAErD,IAAID,SAASC,QAAQvuC,MAAMu4B,WAAW,GAAG;wBACvC,MAAM6X,kBAAkBJ,aAAAA,CAAcE,GAAG,CAAA;wBACzC,IAAIE,iBAAiB;4BACnB,MAAM9C,UAAU8C,eAAAA,CAAgB7B,MAAM,CAAA;4BACtCjB,QAAQttC,OAAO0qC,kBAAkB;wBACnC;oBACF;gBACF;YAEJ,CAAC;QACH,GACO9yC;IACT;AACF;ACjEO,SAASy4C,qBACdhxC,KAAAA,EACAyR,SAAAA,EACc;IACd,MAAMvR,sJAASkiB,QAAAA,CAAMF,SAAAA,CAAUliB,MAAME,MAAAA,EAAQuR,SAAS,GAChDvU,qJAAQklB,QAAAA,CAAMF,SAAAA,CAAUliB,MAAM9C,KAAAA,EAAOuU,SAAS;IAEpD,OAAIvR,WAAW,QAAQhD,UAAU,OACxB,oJAGLklB,QAAAA,CAAMrF,MAAAA,CAAO7c,QAAQF,MAAME,MAAM,KAAKkiB,qJAAAA,CAAMrF,MAAAA,CAAO7f,OAAO8C,MAAM9C,KAAK,IAChE8C,QAGF;QAACE;QAAQhD;IAAAA;AAClB;ACMA,MAAM+zC,yBAIFA,CAAC,EAAC1V,KAAAA,EAAOnN,QAAAA,EAAQ,KAAM;IACzB,MAAM+R,gBAAgB5E,MAAM76B,WAAAA,CAAYqU,KAAAA;IAExCwmB,OAAAA,MAAM76B,WAAAA,CAAYqU,KAAAA,GAASc,CAAAA,OAAO;QAC5BA,GAAG7M,IAAAA,KAAS,mBACdolB,SAAS;YAACplB,MAAM;YAAmByI,WAAWoE;QAAAA,CAAG,GAGnDsqB,cAActqB,EAAE;IAClB,GAEO,MAAM;QACX0lB,MAAM76B,WAAAA,CAAYqU,KAAAA,GAAQorB;IAC5B;AACF,GAIa+Q,6MAA0BpwC,QAAAA,EAAM;IAC3CiQ,OAAO;QACL7P,SAAS,CAAA;QAQTq6B,OAAO,CAAA;QAOPF,QAAQ,CAAA;IAAC;IAiBXtyB,SAAS;QACP,kPAAoC0yB,SAAAA,EAAO;YACzC0V,yBAAyBA,CAAC,EAACjwC,OAAAA,EAASP,KAAAA,EAAAA,GAC9BA,MAAMqI,IAAAA,KAAS,8BACV9H,QAAQiwC,uBAAAA,GAGVxwC,MAAMywC,gBAAAA;QAAAA,CAEhB;QACD,oCAAoCC,CAAC,EAACnwC,OAAAA,EAAAA,KAAa;YACjD,MAAMowC,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAWhE,mBAAmBpsC,QAAQiwC,uBAAAA,CAAyB;gBAC7D,MAAMI,aAAa3tC,aAAa;oBAC9B1C,SAAS;wBACPrC,QAAQqC,QAAQrC,MAAAA;wBAChBnF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAWswC,gBAAgBtwC,SAAAA;oBAAAA;oBAE7BiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,8IAACxH,QAAAA,CAAMyiB,OAAAA,CAAQqxB,UAAU,GAAG;oBAC9BjE,gBAAgBkE,OAAAA,GAAU;wBACxB3xB,cAAc;wBACdytB;wBACAh0B,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEAg4B,qBAAqB/wC,IAAAA,CAAK;oBACxB+sC;oBACA,GAAGiE,UAAAA;gBAAAA,CACJ;YACH;YAEArwC,QAAQR,WAAAA,CAAYstB,eAAAA,GAAkBsjB;QACxC;QACA,4BAA4BG,CAAC,EAACvwC,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YAChD,IAAIA,MAAMqI,IAAAA,KAAS,6BACjB;YAGF,MAAMsoC,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAWhE,mBAAmB3sC,MAAMywC,gBAAAA,CAAkB;gBACpD,MAAMG,aAAa3tC,aAAa;oBAC9B1C,SAAS;wBACPrC,QAAQqC,QAAQrC,MAAAA;wBAChBnF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAWswC,gBAAgBtwC,SAAAA;oBAAAA;oBAE7BiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,8IAACxH,QAAAA,CAAMyiB,OAAAA,CAAQqxB,UAAU,GAAG;oBAC9BjE,gBAAgBkE,OAAAA,GAAU;wBACxB3xB,cAAc;wBACdytB;wBACAh0B,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEAg4B,qBAAqB/wC,IAAAA,CAAK;oBACxB+sC;oBACA,GAAGiE,UAAAA;gBAAAA,CACJ;YACH;YAEArwC,QAAQR,WAAAA,CAAYstB,eAAAA,GAAkBsjB;QACxC;QAEA,0BAA0BI,CAAC,EAACxwC,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YAC9C,IAAIA,MAAMqI,IAAAA,KAAS,mBACjB;YAGF,MAAMsoC,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAWK,kBAAkBzwC,QAAQR,WAAAA,CAAYstB,eAAAA,CAAiB;gBAChE,MAAMujB,aAAa3tC,aAAa;oBAC9B1C,SAAS;wBACPrC,QAAQqC,QAAQrC,MAAAA;wBAChBnF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAW20C,eAAerE,eAAAA,CAAgBtwC,SAAAA;oBAAAA;oBAE5CiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,8IAACxH,QAAAA,CAAMyiB,OAAAA,CAAQqxB,UAAU,GAAG;oBAC9BI,eAAerE,eAAAA,CAAgBkE,OAAAA,GAAU;wBACvC3xB,cAAc;wBACdytB,iBAAiBqE,eAAerE,eAAAA;wBAChCh0B,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEA,IAAI0G;gBAGJ,IADAA,WAAWgxB,qBAAqBO,YAAY5wC,MAAM8Q,SAAS,GAExDuO,YAAYA,aAAauxB,cACzBvxB,aAAa,QAAQuxB,YACtB;oBACA,MAAMK,oBAAoB5xB,WACtBjgB,sBAAsB;wBACpBlB,QAAQqC,QAAQrC,MAAAA;wBAChBtG,QAAQ2I,QAAQR,WAAAA;wBAChBV,OAAOggB;oBAAAA,CACR,IACD;oBAEJ2xB,eAAerE,eAAAA,CAAgBkE,OAAAA,GAAU;wBACvC3xB,cAAc+xB;wBACdtE,iBAAiBqE,eAAerE,eAAAA;wBAChCh0B,QAAQ;oBAAA,CACT;gBACH;gBAII0G,aAAa,QACfsxB,qBAAqB/wC,IAAAA,CAAK;oBACxB,GAAIyf,YAAYuxB,UAAAA;oBAChBjE,iBAAiB;wBACf,GAAGqE,eAAerE,eAAAA;wBAClBtwC,WAAW+C,sBAAsB;4BAC/BlB,QAAQqC,QAAQrC,MAAAA;4BAChBtG,QAAQ2I,QAAQR,WAAAA;4BAChBV,OAAOggB;wBAAAA,CACR;oBAAA;gBACH,CACD;YAEL;YAEA9e,QAAQR,WAAAA,CAAYstB,eAAAA,GAAkBsjB;QACxC;QACA,iOAAmB7V,SAAAA,EAAO;YACxB7wB,UAAUA,CAAC,EAAC1J,OAAAA,EAASP,KAAAA,EAAAA,GACfA,MAAMqI,IAAAA,KAAS,qBACV9H,QAAQ0J,QAAAA,GAGVjK,MAAMiK,QAAAA;QAAAA,CAEhB;QACD,mBAAmB6wB,uNAAAA,EAAO;YACxBoW,UAAUA,CAAC,EAAC3wC,OAAAA,EAAAA,GAAAA,CACH;oBACLsS,IAAIs+B,eAAe5wC,QAAQrC,MAAAA,EAAQqC,QAAQR,WAAW;gBAAA,CAAA;QACxD,CAEH;IAAA;IAEHu/B,QAAQ;QACN,mNAA4BC,eAAAA,EAAa+Q,sBAAsB;IAAA;IAEjE1U,QAAQ;QACN,iCAAiCwV,CAAC,EAAC7wC,OAAAA,EAAAA,GACjCA,QAAQiwC,uBAAAA,CAAwBj1C,MAAAA,GAAS;QAC3C,yBAAyB81C,CAAC,EAAC9wC,OAAAA,EAAAA,GACzBA,QAAQR,WAAAA,CAAYstB,eAAAA,CAAgB9xB,MAAAA,GAAS;QAC/C,6BAA6B+1C,CAAC,EAAC/wC,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YACjD,IAAIA,MAAMqI,IAAAA,KAAS,6BACjB,OAAO,CAAA;YAGT,MAAMkpC,2BAA2BhxC,QAAQR,WAAAA,CAAYstB,eAAAA,CAAgB/zB,GAAAA,CAClE03C,CAAAA,iBAAAA,CAAoB;oBACnBzxC,QAAQyxC,eAAerE,eAAAA,CAAgBtwC,SAAAA,EAAWkD;oBAClDhD,OAAOy0C,eAAerE,eAAAA,CAAgBtwC,SAAAA,EAAWE;gBAAAA,CAAAA,CAErD,GAEMi1C,sBAAsBxxC,MAAMywC,gBAAAA,CAAiBn3C,GAAAA,CAChDqzC,CAAAA,kBAAAA,CAAqB;oBACpBptC,QAAQotC,gBAAgBtwC,SAAAA,EAAWkD;oBACnChD,OAAOowC,gBAAgBtwC,SAAAA,EAAWE;gBAAAA,CAAAA,CAEtC;YAIA,OAFkB,uIAACtD,UAAAA,EAAQs4C,0BAA0BC,mBAAmB;QAG1E;QACA,iBAAiBC,CAAC,EAAClxC,OAAAA,EAAAA,GAAa,CAACA,QAAQ0J,QAAAA;QACzC,qBAAqBynC,CAAC,EAACnxC,OAAAA,EAAAA,GAAaA,QAAQoxC,SAAAA;IAAAA;AAEhD,CAAC,EAAE7V,aAAAA,CAAc;IACft0B,IAAI;IACJjH,SAASA,CAAC,EAACq6B,KAAAA,EAAAA,GAAAA,CAAY;YACrB3wB,UAAU2wB,MAAM3wB,QAAAA;YAChBumC,yBAAyB5V,MAAM6V,gBAAAA;YAC/BpjB,iBAAiB,CAAA,CAAA;YACjBskB,WAAW/W,MAAM+W,SAAAA;YACjBzzC,QAAQ08B,MAAM18B,MAAAA;YACd6B,aAAa66B,MAAM76B,WAAAA;YACnBmxC,UAAU;gBAACr+B,IAAIs+B,eAAevW,MAAM18B,MAAAA,EAAQ08B,MAAM76B,WAAW;YAAA;QAAC,CAAA;IAEhEsgC,QAAQ;QACNC,KAAK;QACL1F,OAAOA,CAAC,EAACr6B,OAAAA,EAAAA,GAAAA,CAAc;gBAACR,aAAaQ,QAAQR,WAAAA;YAAAA,CAAAA;IAAW;IAE1DjI,IAAI;QACF,oBAAoB;YAClBsQ,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEF6zB,SAAS;IACTD,QAAQ;QACN,cAAc;YACZK,QAAQ;gBACN;oBACEr0B,OAAOy4B,gNAAAA,EAAI;wBAAC;wBAAqB,+BAA+B;qBAAC;oBACjEx/B,QAAQ;oBACRmH,SAAS;wBAAC;wBAAoC,iBAAiB;qBAAA;gBAAA;gBAEjE;oBACEJ,OAAO;oBACP/G,QAAQ;gBAAA,CACT;aAAA;YAEHnJ,IAAI;gBACF,6BAA6B;oBAC3BsQ,SAAS;wBAAC,kCAAkC;qBAAA;gBAAA;gBAE9C,OAAS;oBACP;wBACEnH,QAAQ;wBACR+G,OAAO;wBACPI,SAAS;4BAAC;4BAAoC,iBAAiB;yBAAA;oBAAA;oBAEjE;wBACEnH,QAAQ;oBAAA,CACT;iBAAA;YAAA;QAEL;QAEF,OAAS;YACPg7B,SAAS;YACTnkC,IAAI;gBACF,6BAA6B;oBAC3BmJ,QAAQ;oBACR+G,OAAO;oBACPI,SAAS;wBAAC;wBAA4B,iBAAiB;qBAAA;gBAAA;YACzD;YAEF4zB,QAAQ;gBACN,MAAQ;oBACNlkC,IAAI;wBACF,mBAAmB;4BACjBmJ,QAAQ;4BACR+G,iNAAOy4B,MAAAA,EAAI;gCAAC;gCAAyB,eAAe;6BAAC;wBAAA;oBACvD;gBACF;gBAEF,4BAA4B;oBAC1Bvc,OAAO;wBAAC,wBAAwB;qBAAA;oBAChCmY,QAAQ;wBACNp7B,QAAQ;oBAAA;gBACV;YACF;QACF;IACF;AAEJ,CAAC;AAED,SAASkwC,eACPjzC,MAAAA,EACA6B,WAAAA,EACA;IACA,OAAO,SAAkB,CAACzD,MAAME,IAAI,CAAA,EAAgC;QAClE,IAAInB,qBAAqB0E,YAAY9F,QAAAA,EAAUiE,MAAM,GACnD,OAAO;YACL;gBACEqB,QAAQ;oBACN/C,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBACXiD,QAAQ;gBAAA;gBAEVlD,OAAO;oBACLC,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBACXiD,QAAQ;gBAAA;gBAEVgtC,aAAa,CAAA;YAAA,CACd;SAAA;QAKL,IAAIjwC,KAAKjB,MAAAA,KAAW,GAClB,OAAO,CAAA,CAAA;QAGT,IAAI,8IAACd,UAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KAAKA,KAAKrC,QAAAA,CAASsB,MAAAA,KAAW,GACvD,OAAO,CAAA,CAAA;QAGT,MAAMY,aAAaK,KAAKR,EAAAA,CAAG,CAAC;QAE5B,OAAIG,eAAeb,KAAAA,IACV,CAAA,CAAA,GAGFyE,YAAYstB,eAAAA,CAAgB9d,MAAAA,CAAQyhC,CAAAA,8JAErCl0C,QAAAA,CAAM6M,WAAAA,CAAYqnC,cAAc,IAE3B10C,KAAKrC,QAAAA,CAASwE,IAAAA,CACnB,CAACwnB,GAAGzoB,0JACF+U,OAAAA,CAAK6J,MAAAA,CAAO40B,eAAezxC,MAAAA,CAAO/C,IAAAA,EAAM;oBAACL;oBAAYqB,UAAU;iBAAC,kJAChE+U,OAAAA,CAAK6J,MAAAA,CAAO40B,eAAez0C,KAAAA,CAAMC,IAAAA,EAAM;oBAACL;oBAAYqB,UAAU;iBAAC,CACnE,iJAIAV,QAAAA,CAAM80C,YAAAA,CAAaZ,gBAAgB;gBACjCzxC,QAAQ;oBAAC/C;oBAAMiD,QAAQ;gBAAA;gBACvBlD,OAAO;oBAACC;oBAAMiD,QAAQ;gBAAA;YAAC,CACxB,KAAK3C,qJAAAA,CAAMgV,QAAAA,CAASk/B,gBAAgBx0C,IAAI,CAE5C;IACH;AACF;AC9VA,MAAMlE,QAAQC,cAAc,oBAAoB,GA+CnCs5C,uBAAuBC,uNAAAA,EAGlC,SAA8Br6C,KAAAA,EAAOs6C,YAAAA,EAAc;IACnD,MAAM,EACJC,OAAAA,EACArG,MAAAA,EACAC,OAAAA,EACAqG,aAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAC,KAAAA,EACAC,OAAAA,EACAC,WAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAnC,gBAAAA,EACAvE,gBAAAA,EACAhiC,WAAAA,EACAQ,WAAAA,EACAqhC,eAAAA,EACA7gC,cAAAA,EACAshC,iBAAAA,EACAxhC,WAAAA,EACA3O,WAAWw2C,cAAAA,EACXC,uBAAAA,EACAvnC,UAAAA,EACA,GAAGwnC,WAAAA,GACDt7C,OAEEizC,qBAAqBz+B,sBAAAA,GACrBS,gNAAMpD,SAAAA,EAA8B,IAAI,GACxC,CAAC0pC,iBAAiBC,kBAAkB,CAAA,6MAAI7pC,WAAAA,EAC5C,IACF,GACM,CAAC8pC,iBAAiBC,kBAAkB,CAAA,6MAAI/pC,WAAAA,EAAS,CAAA,CAAK;IAG5DgqC,CAAAA,GAAAA,qMAAAA,CAAAA,sBAAAA,EACErB,cACA,IAAMrlC,IAAIiL,OACZ;IAEA,MAAM7X,uNAAc6I,cAAAA,EAAWrD,kBAAkB,GAC3C2jB,uNAAatgB,aAAAA,EAAW2/B,iBAAiB,GACzCr+B,kMAAWwB,cAAAA,EAAY3L,aAAcgM,CAAAA,IACzCA,EAAE5L,OAAAA,CAAQ;YAAC,aAAa;QAAA,CAAY,CACtC,GACMH,wLAAcszC,WAAAA,KAEdC,+MAAwBC,cAAAA,EAAYhD,yBAAyB;QACjE3V,OAAO;YACL6V,kBAAkBA,oBAAoB,CAAA,CAAA;YACtCxmC;YACA/L,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YAC1C6B;YACA4xC,WAAW,CAAC7xC,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAACC,OAAO;YAAA,CAAa;QAAA;IACrE,CACD,GACK+wC,WAAWzlC,qMAAAA,EACf6nC,uBACCxnC,CAAAA,MAAMA,IAAEvL,OAAAA,CAAQ2wC,QAAAA,EAAUr+B,EAC7B;IAEAza,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACdk7C,sBAAsBvqC,IAAAA,CAAK;YACzBV,MAAM;YACN4B;QAAAA,CACD;IACH,GAAG;QAACqpC;QAAuBrpC,QAAQ;KAAC,6MAEpC7R,YAAAA,EAAU,MAAM;QACdk7C,sBAAsBvqC,IAAAA,CAAK;YACzBV,MAAM;YACNooC,kBAAkBA,oBAAoB,CAAA,CAAA;QAAA,CACvC;IACH,GAAG;QAAC6C;QAAuB7C,gBAAgB;KAAC,6MAK5C3F,UAAAA,EAAQ,IAEF7gC,WACKlK,cAEW8vC,kBAClB/vC,aACA4qC,oBACAsH,OACF,EAEmBjyC,WAAW,GAC7B;QAACD;QAAakyC;QAAStH;QAAoBzgC;QAAUlK,WAAW;KAAC;IAEpE,MAAMyzC,0NAAgBlI,cAAAA,EACnBmI,CAAAA,SACC,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,eAAA;YACC,GAAIA,MAAAA;YACJ;YACA;YACA;YACA;YACA;YACA;QAAA,CAAuB,GAG3B;QACEloC;QACAtB;QACAC;QACAQ;QACAQ;QACAF,WAAW;KAEf,GAEM0oC,uNAAapI,cAAAA,EAEfqI,CAAAA,YAIA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,YAAA;YACC,GAAIA,SAAAA;YACJ;YACA;YACA;YACA;YACA;QAAA,IAGJ;QACE1pC;QACAiiC;QACAxhC;QACAqhC;QACAS,iBAAiB;KAErB,GAEMoH,uNAAatI,cAAAA,EAChB7zC,CAAAA,UAA2B,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,YAAA;YAAA,GAAeA,OAAAA;QAAAA,CAAM,GAClD,CAAA,CACF,GAEMo8C,gCAA4BvI,oNAAAA,EAAY,MAAM;QAClD,IAAIuH,gBAAgB;YAClBv6C,MAAM,CAAA,qBAAA,EAAwBwV,KAAKC,SAAAA,CAAU8kC,cAAc,CAAC,EAAE;YAC9D,MAAMiB,sBAAsBlwC,mBAC1BivC,gBACAj4C,eACEmF,YAAY9F,QAAAA,EACZ6F,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IACjD,CACF;YACA,IAAIs7C,wBAAwB,MAAM;gBAChCx7C,MACE,CAAA,gCAAA,EAAmCwV,KAAKC,SAAAA,CAAU+lC,mBAAmB,CAAC,EACxE;gBACA,MAAMlD,aAAa3tC,aAAa;oBAC9B1C,SAAS;wBACPrC,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;wBAC1CnF,OAAOgH,YAAYhH,KAAAA;wBACnBsD,WAAWy3C;oBAAAA;oBAEbxvC,eAAevE,YAAYuE,aAAAA;gBAAAA,CAC5B;gBACGssC,cAAAA,8IACFr/B,aAAAA,CAAWsP,MAAAA,CAAO9gB,aAAa6wC,UAAU,GAGpC7wC,YAAYkV,UAAAA,CAAWxW,IAAAA,CAAMs1C,CAAAA,IAAMA,EAAE1rC,IAAAA,KAAS,eAAe,KAChEvI,YAAYiJ,IAAAA,CAAK;oBACfV,MAAM;oBACNhM,WAAWy3C;gBAAAA,CACZ,GAEH/zC,YAAY4W,QAAAA,EAAAA;YAEhB;QACF;IACF,GAAG;QAAC7W;QAAa+yC;QAAgB9yC,WAAW;KAAC;IAG7C3H,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,MAAM47C,UAAUl0C,YAAYhI,EAAAA,CAAG,SAAS,MAAM;YAC5Cw7C,sBAAsBvqC,IAAAA,CAAK;gBACzBV,MAAM;YAAA,CACP,GAEDwrC,0BAAAA;QACF,CAAC,GAEKI,iBAAiBn0C,YAAYhI,EAAAA,CAAG,iBAAiB,MAAM;YAC3Dq7C,mBAAmB,CAAA,CAAI;QACzB,CAAC,GAEKe,iBAAiBp0C,YAAYhI,EAAAA,CAAG,iBAAiB,MAAM;YAC3Dq7C,mBAAmB,CAAA,CAAK;QAC1B,CAAC;QAED,OAAO,MAAM;YACXa,QAAQ97C,WAAAA,IACR+7C,eAAe/7C,WAAAA,CAAAA,GACfg8C,eAAeh8C,WAAAA,CAAAA;QACjB;IACF,GAAG;QAACo7C;QAAuBxzC;QAAa+zC,yBAAyB;KAAC,6MAGlEz7C,YAAAA,EAAU,MAAM;QACVy6C,kBAAkB,CAACK,mBACrBW,0BAAAA;IAEJ,GAAG;QAACX;QAAiBL;QAAgBgB,yBAAyB;KAAC;IAG/D,MAAMM,uNAAa7I,cAAAA,EAChBtrC,CAAAA,UAA8D;QAC7D,IAAImyC,QACaA,OAAOnyC,KAAK,MAEZ1E,KAAAA,KACb0E,MAAM24B,cAAAA,CAAAA;aAAAA,IAEC34B,MAAMu4B,WAAAA,CAAY6b,aAAAA,EAAe;YAE1Cp0C,MAAMq0C,eAAAA,CAAAA,GACNr0C,MAAM24B,cAAAA,CAAAA;YAEN,MAAMt8B,YAAY0D,YAAY1D,SAAAA,GAC1B+C,sBAAsB;gBACpBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;gBAC1CtG,QAAQmI;gBACRV,OAAOU,YAAY1D,SAAAA;YAAAA,CACpB,IACDf,KAAAA,GACEiH,WAAWlG,YAAY;gBAACA;YAAAA,IAAaf,KAAAA;YAE3C,IAAI,CAACiH,UAAU;gBACbQ,QAAQC,IAAAA,CAAK,wCAAwC;gBACrD;YACF;YAEAlD,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNmF,aAAa;wBACXgW,cAAcxjB,MAAMu4B,WAAAA,CAAY6b,aAAAA;oBAAAA;oBAElC7xC;gBAAAA;gBAEF3K,QAAQmI;gBACRw4B,aAAav4B;YAAAA,CACd;QACH;IACF,GACA;QAACmyC;QAAQryC;QAAaC,WAAW;KACnC,GAEMu0C,gBAAYhJ,oNAAAA,EACftrC,CAAAA,YAA0C;QACzC,IAAIoyC,OACaA,MAAMpyC,OAAK,MAEX1E,KAAAA,KACb0E,QAAM24B,cAAAA,CAAAA;aAAAA,IAEC34B,QAAMu4B,WAAAA,CAAY6b,aAAAA,EAAe;YAE1Cp0C,QAAMq0C,eAAAA,CAAAA,GACNr0C,QAAM24B,cAAAA,CAAAA;YAEN,MAAMt8B,cAAYyD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQlE,SAAAA,EAC9CkG,aAAWlG,cAAY;gBAACA,WAAAA;YAAAA,IAAaf,KAAAA;YAE3C,IAAI,CAACiH,YAAU;gBACbQ,QAAQC,IAAAA,CAAK,uCAAuC;gBACpD;YACF;YAEAlD,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNmF,aAAa;wBACXgW,cAAcxjB,QAAMu4B,WAAAA,CAAY6b,aAAAA;oBAAAA;oBAElC7xC,UAAAA;gBAAAA;gBAEF3K,QAAQmI;gBACRw4B,aAAav4B;YAAAA,CACd;QACH;IACF,GACA;QAACoyC;QAAOtyC;QAAaC,WAAW;KAClC,GAGMw0C,wNAAcjJ,cAAAA,EACjBtrC,CAAAA,YAAgE;QAC/D,MAAMjH,QAAQ6B,eACZmF,YAAY9F,QAAAA,EACZ6F,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA,CAAO3E,KAAAA,CAAMf,IAAAA,EAC/C4M,qBAAqBb,GAAAA,CAAIxE,WAAW,CACtC,GAQMvD,OAAAA,CAPUuD,YAAY1D,SAAAA,GACxB+C,sBAAsB;YACpBlB,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;YAC1CtG,QAAQmI;YACRV,OAAOU,YAAY1D,SAAAA;QAAAA,CACpB,IACD,IAAA,GACkBE,MAAMC,QAAQ,CAAA,CAAA,EAC9Bg4C,gBAAgBtC,UAAU;YAC9BlyC,OAAAA;YACAjH;YACAyD;YACArD,aAAauxC,mBAAmBvxC,WAAAA;QAAAA,CACjC;QAED,IAAIq7C,iBAAiB,CAACz0C,YAAY1D,SAAAA,EAChC2D,QAAM24B,cAAAA,CAAAA,GAGN1P,WAAWlgB,IAAAA,CAAK;YAACV,MAAM;QAAA,CAAU,GAEjC89B,QAAQC,OAAAA,CAAQoO,aAAa,EAC1BC,IAAAA,CAAMta,CAAAA,aAAW;YAGhB,IAFA7hC,MAAM,8CAA8C6hC,QAAM,GAEtD,CAACA,YAAU,CAACA,SAAOvS,MAAAA,EAAQ;gBAC7BtvB,MAAM,uDAAuD;gBAE7D,MAAM+D,cAAYyD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQlE,SAAAA,EAC9CkG,aAAWlG,cAAY;oBAACA,WAAAA;gBAAAA,IAAaf,KAAAA;gBAE3C,IAAI,CAACiH,YAAU;oBACbQ,QAAQC,IAAAA,CAAK,yCAAyC;oBACtD;gBACF;gBAEAlD,YAAYiJ,IAAAA,CAAK;oBACfV,MAAM;oBACN8a,eAAe;wBACb9a,MAAM;wBACNmF,aAAa;4BACXgW,cAAcxjB,QAAMo0C,aAAAA;wBAAAA;wBAEtB7xC,UAAAA;oBAAAA;oBAEF3K,QAAQmI;oBACRw4B,aAAav4B;gBAAAA,CACd;YACH,MAAWm6B,CAAAA,SAAOvS,MAAAA,GAChB9nB,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNuF,wMAAQ8mC,cAAAA,EAAY;wBAClBn0C,SAAS;4BACPyO,cACElP,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQyO,YAAAA;4BACpC9Q,QAAQ4B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQrC,MAAAA;wBAAAA;wBAE5C0P,QAAQusB,SAAOvS,MAAAA;wBACfvZ,SAAS;4BACPC,aAAa,CAAA;4BACbC,gBAAgB,CAAA;wBAAA;oBAClB,CACD;oBACDqS,WAAW;gBAAA;gBAEbhpB,QAAQmI;YAAAA,CACT,IAEDgD,QAAQC,IAAAA,CACN,wDACAm3B,QACF;QAEJ,CAAC,EACAwa,KAAAA,CAAO5qC,CAAAA,QAAAA,CACNhH,QAAQC,IAAAA,CAAK+G,KAAK,GAEXA,KAAAA,CACR,EACA6qC,OAAAA,CAAQ,MAAM;YACb3rB,WAAWlgB,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAe;QACxC,CAAC;aAAA,IACMrI,QAAMu4B,WAAAA,CAAY6b,aAAAA,EAAe;YAE1Cp0C,QAAM24B,cAAAA,CAAAA,GACN34B,QAAMq0C,eAAAA,CAAAA;YAEN,MAAMh4C,cAAYyD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQlE,SAAAA,EAC9CkG,aAAWlG,cAAY;gBAACA,WAAAA;YAAAA,IAAaf,KAAAA;YAE3C,IAAI,CAACiH,YAAU;gBACbQ,QAAQC,IAAAA,CAAK,yCAAyC;gBACtD;YACF;YAEAlD,YAAYiJ,IAAAA,CAAK;gBACfV,MAAM;gBACN8a,eAAe;oBACb9a,MAAM;oBACNmF,aAAa;wBACXgW,cAAcxjB,QAAMu4B,WAAAA,CAAY6b,aAAAA;oBAAAA;oBAElC7xC,UAAAA;gBAAAA;gBAEF3K,QAAQmI;gBACRw4B,aAAav4B;YAAAA,CACd;QACH;QAEA1H,MAAM,uDAAuD;IAC/D,GACA;QAACwH;QAAaoyC;QAASxH;QAAoBzhB;QAAYlpB,WAAW;KACpE,GAEM80C,0NAAmDvJ,cAAAA,EACtDtrC,CAAAA,YAAU;QACL4rC,WACFA,QAAQ5rC,OAAK,GAGVA,QAAM80C,kBAAAA,CAAAA,KAAAA,CACT7rB,WAAWlgB,IAAAA,CAAK;YAACV,MAAM;YAAWrI,OAAAA;QAAAA,CAAM,GAGtC,CAACD,YAAY1D,SAAAA,IACbhB,qBACE0E,YAAY9F,QAAAA,EACZ6F,YAAYG,WAAAA,GAAcM,OAAAA,CAAQrC,MACpC,KAAA,8IAEAqT,aAAAA,CAAWsP,MAAAA,CAAO9gB,0JAAajE,SAAAA,CAAOiB,KAAAA,CAAMgD,aAAa,CAAA,CAAE,CAAC,GAC5DA,YAAY4W,QAAAA,CAAAA,CAAAA,CAAAA;IAGlB,GACA;QAAC7W;QAAa8rC;QAAS3iB;QAAYlpB,WAAW;KAChD,GAEMg1C,wNAAczJ,cAAAA,EACjBtrC,CAAAA,YAAwD;QAKvD,IAJIqyC,WACFA,QAAQryC,OAAK,GAGXA,QAAM80C,kBAAAA,CAAAA,KAAwB90C,QAAMg1C,oBAAAA,CAAAA,GACtC;QAGF,MAAMzyC,aAAW1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,QAAMu4B,WAAAA;QAAAA,CACd;QAEGh2B,cACFzC,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACN9F,UAAAA;YAAAA;YAEF3K,QAAQmI;YACRw4B,aAAav4B;QAAAA,CACd;IAEL,GACA;QAACqyC;QAASvyC;QAAaC,WAAW;KACpC,GAEMk1C,yNAAkD3J,cAAAA,EACrDtrC,CAAAA,YAAU;QACL2rC,UACFA,OAAO3rC,OAAK,GAETA,QAAMg1C,oBAAAA,CAAAA,KACT/rB,WAAWlgB,IAAAA,CAAK;YAACV,MAAM;YAAWrI,OAAAA;QAAAA,CAAM;IAE5C,GACA;QAACipB;QAAY0iB,MAAM;KACrB,GAEMuJ,gOAAsB5J,cAAAA,EACzBtrC,CAAAA,YAAsB;QACjBiyC,iBACFA,cAAcjyC,OAAK;IAEvB,GACA;QAACiyC,aAAa;KAChB,GAkBMkD,8NAAoB7J,cAAAA,EAAY,MAAM;QAC1C,IAAI,CAACvrC,YAAY1D,SAAAA,EACf;QAEF,MAAM0uB,6KAAOwQ,cAAAA,CAAY6Z,wBAAAA,CAAyBr1C,WAAW,GACvD,EAACs1C,aAAAA,EAAAA,GAAiBtqB;QAExB,IAAIre,IAAIiL,OAAAA,KAAY09B,eAClB;QAGF,MAAMC,qLADS/Z,cAAAA,CAAYp5B,SAAAA,CAAUpC,WAAW,EACpBmiC,YAAAA,CAAAA;QAC5B,IAAI,CAACoT,gBAAgBA,aAAa9J,UAAAA,KAAe,GAC/C;QAEF,MAAM+J,mBAAmBD,aAAa7J,UAAAA,CAAW,CAAC;QAClD,IAAI;YACF,MAAM+J,oLAAcja,cAAAA,CAAYka,UAAAA,CAC9B11C,aACAA,YAAY1D,SACd;YACA,CACEm5C,YAAYE,WAAAA,KAAgBH,iBAAiBG,WAAAA,IAC7CF,YAAY31B,SAAAA,KAAc01B,iBAAiB11B,SAAAA,KAAAA,CAE3CvnB,MAAM,6CAA6C,GAEnDg9C,cAAcK,gBAAAA,GAEdL,aAAaM,QAAAA,CAASJ,WAAW,CAAA;QAErC,EAAA,OAAQ;YACNl9C,MAAM,qDAAqD,gJAE3DiZ,aAAAA,CAAWmJ,QAAAA,CAAS3a,WAAW,GAE3BA,YAAY9F,QAAAA,CAASsB,MAAAA,GAAS,kJAChCgW,aAAAA,CAAWsP,MAAAA,CAAO9gB,aAAa;gBAAC;gBAAG,CAAC;aAAC,GAEvCA,YAAY4W,QAAAA,CAAAA;QACd;IACF,GAAG;QAACjK;QAAK3M,WAAW;KAAC;IAIrB3H,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACd,IAAI46C,iBAAiB;YACnB,MAAM6C,mBAAmB,IAAIC,iBAAiBX,iBAAiB;YAC/DU,OAAAA,iBAAiBE,OAAAA,CAAQ/C,iBAAiB;gBACxCgD,mBAAmB,CAAA;gBACnBhsC,YAAY,CAAA;gBACZisC,eAAe,CAAA;gBACfC,WAAW,CAAA;gBACXC,SAAS,CAAA;YAAA,CACV,GACM,MAAM;gBACXN,iBAAiBO,UAAAA,CAAAA;YACnB;QACF;IAEF,GAAG;QAACjB;QAAmBnC,eAAe;KAAC;IAEvC,MAAMqD,0NAAgB/K,cAAAA,EACnBtrC,CAAAA,YAAyC;QACpCvI,MAAM6+C,SAAAA,IACR7+C,MAAM6+C,SAAAA,CAAUt2C,OAAK,GAElBA,QAAM80C,kBAAAA,CAAAA,KACT/0C,YAAYkwC,cAAAA,CAAejwC,OAAK,GAE7BA,QAAM80C,kBAAAA,CAAAA,KACTh1C,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACX5F,KAAK5H,QAAM4H,GAAAA;oBACXynB,MAAMrvB,QAAMqvB,IAAAA;oBACZsf,QAAQ3uC,QAAM2uC,MAAAA;oBACdC,SAAS5uC,QAAM4uC,OAAAA;oBACfC,SAAS7uC,QAAM6uC,OAAAA;oBACfC,UAAU9uC,QAAM8uC,QAAAA;gBAAAA;YAClB;YAEFl3C,QAAQmI;YACRw4B,aAAav4B;QAAAA,CACd;IAEL,GACA;QAACvI;QAAOqI;QAAaC,WAAW;KAClC,GAEMw2C,cAAcjL,wNAAAA,EACjBtrC,CAAAA,YAAyC;QACpCvI,MAAM++C,OAAAA,IACR/+C,MAAM++C,OAAAA,CAAQx2C,OAAK,GAEhBA,QAAM80C,kBAAAA,CAAAA,KACTh1C,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACX5F,KAAK5H,QAAM4H,GAAAA;oBACXynB,MAAMrvB,QAAMqvB,IAAAA;oBACZsf,QAAQ3uC,QAAM2uC,MAAAA;oBACdC,SAAS5uC,QAAM4uC,OAAAA;oBACfC,SAAS7uC,QAAM6uC,OAAAA;oBACfC,UAAU9uC,QAAM8uC,QAAAA;gBAAAA;YAClB;YAEFl3C,QAAQmI;YACRw4B,aAAav4B;QAAAA,CACd;IAEL,GACA;QAACvI;QAAOqI;QAAaC,WAAW;KAClC,GAEM02C,iCAAiC3L,oNAAAA,EAAQ,MAAM;QAEnD,IAAIgI,4BAA4Bx3C,KAAAA,GAIhC,OAAIw3C,4BAA4B,sIACvB4D,UAAAA,GAGF,CAACtM,SAAsBhoC,aAAoB;YAChD0wC,wBAAwBpI,oBAAoBtoC,QAAQ;QACtD;IACF,GAAG;QAACsoC;QAAoBoI,uBAAuB;KAAC;IAKhD16C,CAAAA,GAAAA,qMAAAA,CAAAA,YAAAA,EAAU,MAAM;QACdsU,IAAIiL,OAAAA,yKAAU4jB,cAAAA,CAAYl6B,SAAAA,CACxBtB,aACAA,WACF,GACAkzC,mBAAmBvmC,IAAIiL,OAAO;IAChC,GAAG;QAAC5X;QAAa2M,GAAG;KAAC,6MAErBtU,YAAAA,EAAU,MAAM;QACd,MAAM8J,iLAASq5B,cAAAA,CAAYp5B,SAAAA,CAAUpC,WAAW,GAE1CyyC,cAAYA,MAAM;YACtB1yC,YAAYiJ,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAU;QACpC,GACMsqC,WAASA,MAAM;YACnB7yC,YAAYiJ,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAO;QACjC;QAEAnG,OAAAA,SAAOG,QAAAA,CAASs0C,gBAAAA,CAAiB,WAAWnE,WAAS,GACrDtwC,SAAOG,QAAAA,CAASs0C,gBAAAA,CAAiB,QAAQhE,QAAM,GAExC,MAAM;YACXzwC,SAAOG,QAAAA,CAASu0C,mBAAAA,CAAoB,WAAWpE,WAAS,GACxDtwC,SAAOG,QAAAA,CAASu0C,mBAAAA,CAAoB,QAAQjE,QAAM;QACpD;IACF,GAAG;QAAC5yC;QAAaD,WAAW;KAAC;IAE7B,MAAM+2C,4NAAkBvL,cAAAA,EACrBtrC,CAAAA,YAA2C;QAG1C,IAFAsyC,cAActyC,OAAK,GAEfA,QAAM80C,kBAAAA,CAAAA,KAAwB90C,QAAMg1C,oBAAAA,CAAAA,GACtC;QAGF,MAAMzyC,aAAW1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,QAAMu4B,WAAAA;QAAAA,CACd;QAED,IAAI,CAACh2B,YAAU;YACbQ,QAAQC,IAAAA,CAAK,6CAA6C;YAC1D;QACF;QAEAlD,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACNsQ,QAAQpW;QAAAA,CACT,GAEDzC,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXhL,SAASxC,QAAMwC,OAAAA;oBACfC,SAASzC,QAAMyC,OAAAA;oBACf+gB,cAAcxjB,QAAMwjB,YAAAA;gBAAAA;gBAEtBjhB,UAAAA;YAAAA;YAEF3K,QAAQmI;QAAAA,CACT,GAGM,CAAA;IACT,GACA;QAACuyC;QAAaxyC;QAAaC,WAAW;KACxC,GAEM+2C,uNAAaxL,cAAAA,EAChBtrC,CAAAA,YAA2C;QAa1C,IAZAuyC,SAASvyC,OAAK,GAEVA,CAAAA,CAAAA,QAAM80C,kBAAAA,CAAAA,KAAwB90C,QAAMg1C,oBAAAA,MAUpC,CANan1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,QAAMu4B,WAAAA;QAAAA,CACd,CAAA,GAMDz4B,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,QAAMwjB,YAAAA;gBAAAA;YACtB;YAEF5rB,QAAQmI;QAAAA,CACT,GAGM,CAAA;IACT,GACA;QAACwyC;QAAQzyC;QAAaC,WAAW;KACnC,GAEMg3C,0NAAgBzL,cAAAA,EACnBtrC,CAAAA,aAA2C;QAG1C,IAFAwyC,YAAYxyC,QAAK,GAEbA,CAAAA,CAAAA,SAAM80C,kBAAAA,MAAwB90C,SAAMg1C,oBAAAA,EAAAA,GAIxCl1C,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,SAAMwjB,YAAAA;gBAAAA;YACtB;YAEF5rB,QAAQmI;QAAAA,CACT,GAGM,CAAA;IACT,GACA;QAACyyC;QAAW1yC;QAAaC,WAAW;KACtC,GAEMi3C,4NAAkB1L,cAAAA,EACrBtrC,CAAAA,aAA2C;QAG1C,IAFAyyC,cAAczyC,QAAK,GAEfA,SAAM80C,kBAAAA,CAAAA,KAAwB90C,SAAMg1C,oBAAAA,CAAAA,GACtC;QAGF,MAAMzyC,aAAW1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,SAAMu4B,WAAAA;QAAAA,CACd;QAED,IAAKh2B,YAILzC,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,SAAMwjB,YAAAA;gBAAAA;gBAEtBjhB,UAAAA;YAAAA;YAEF3K,QAAQmI;QAAAA,CACT,GAGM,CAAA;IACT,GACA;QAAC0yC;QAAa3yC;QAAaC,WAAW;KACxC,GAEMk3C,0NAAiB3L,eAAAA,EACpBtrC,CAAAA,aAA2C;QAG1C,IAFA0yC,aAAa1yC,QAAK,GAEdA,SAAM80C,kBAAAA,CAAAA,KAAwB90C,SAAMg1C,oBAAAA,CAAAA,GACtC;QAGF,MAAMzyC,aAAW1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,SAAMu4B,WAAAA;QAAAA,CACd;QAED,IAAKh2B,YAILzC,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,SAAMwjB,YAAAA;gBAAAA;gBAEtBtb,YAAYpI,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQ67B,YAAAA,EAAczjB;gBAC5DpW,UAAAA;YAAAA;YAEF3K,QAAQmI;YACRw4B,aAAav4B;QAAAA,CACd,GAGM,CAAA;IACT,GACA;QAAC0yC;QAAY5yC;QAAaC,WAAW;KACvC,GAEMm3C,uNAAa5L,cAAAA,EAChBtrC,CAAAA,aAA2C;QAG1C,IAFA2yC,SAAS3yC,QAAK,GAEVA,SAAM80C,kBAAAA,CAAAA,KAAwB90C,SAAMg1C,oBAAAA,CAAAA,GACtC;QAGF,MAAMzyC,aAAW1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,SAAMu4B,WAAAA;QAAAA,CACd;QAED,IAAI,CAACh2B,YAAU;YACbQ,QAAQC,IAAAA,CAAK,wCAAwC;YACrD;QACF;QAEAlD,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,SAAMwjB,YAAAA;gBAAAA;gBAEtBtb,YAAYpI,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQ67B,YAAAA,EAAczjB;gBAC5DpW,UAAAA;YAAAA;YAEF3K,QAAQmI;YACRw4B,aAAav4B;QAAAA,CACd,GAGM,CAAA;IACT,GACA;QAAC2yC;QAAQ7yC;QAAaC,WAAW;KACnC,GAEMo3C,4NAAkB7L,cAAAA,EACrBtrC,CAAAA,aAA2C;QAa1C,IAZA4yC,cAAc5yC,QAAK,GAEfA,CAAAA,CAAAA,SAAM80C,kBAAAA,CAAAA,KAAwB90C,SAAMg1C,oBAAAA,MAUpC,CANan1C,iBAAiB;YAChCC;YACAC;YACAC,OAAOA,SAAMu4B,WAAAA;QAAAA,CACd,CAAA,GAMDz4B,OAAAA,YAAYiJ,IAAAA,CAAK;YACfV,MAAM;YACN8a,eAAe;gBACb9a,MAAM;gBACNmF,aAAa;oBACXgW,cAAcxjB,SAAMwjB,YAAAA;gBAAAA;YACtB;YAEF5rB,QAAQmI;QAAAA,CACT,GAGM,CAAA;IACT,GACA;QAAC6yC;QAAa9yC;QAAaC,WAAW;KACxC;IAEA,OAAK2qC,qBAIEwI,kBAAkB,OACvB,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,wKAACkE,WAAAA,EAAA;QACC,GAAIrE,SAAAA;QACJ,kBAAgB9oC;QAChB,WAAW,CAAA;QACX,WAAW8oC,UAAUsE,SAAAA,IAAa;QAClC;QACA,QAAQpC;QACR,QAAQd;QACR,OAAOG;QACP,SAASS;QACT,kBAAkBG;QAClB,aAAa2B;QACb,QAAQC;QACR,WAAWC;QACX,aAAaC;QACb,YAAYC;QACZ,QAAQC;QACR,aAAaC;QACb,SAAStC;QACT,WAAWwB;QACX,SAASE;QACT,SAAShC;QACT;QAGA,mBAAmBj5C,KAAAA;QACnB;QACA;QACA;QACA,yBAAyBm7C;IAAAA,KAjCpB;AAoCX,CAAC;AAED5E,qBAAqB9I,WAAAA,GAAc;ACljCnC,SAAwBuO,YACtBC,OAAAA,EACW;IACX,MAAM7qC,4MAAM8qC,UAAAA,CAAMluC,MAAAA,CAA+B,IAAI;IAErD,OAAKoD,IAAIiL,OAAAA,IAAAA,CACPjL,IAAIiL,OAAAA,GAAU;QAAC8/B,UAAUF,QAAAA;IAAQ,CAAA,GAG5B7qC,IAAIiL,OAAAA,CAAQ8/B,QAAAA;AACrB;AC6BO,SAAAC,eAAAjgD,KAAAA,EAAA;IAAA,MAAAC,KAAAC,qKAAAA,EAAA,EAAA;IAAA,IAAAK;IAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAkgD,aAAAA,GAAAA,CACoD3/C,KAAAA,MAAA;QACvD,MAAA4/C,iBAAuBlQ,qBAAqBjwC,MAAKkgD,aAAc,GAC/DjN,qBAAAA,IAAA7B,mBAAA;YAAAjxC,QACUggD,eAAchgD,MAAAA;QAAAA,CAAA;QACgB,OAAA;YAAAggD;YAAAlN;QAAAA;IAAA,GAGzChzC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAkgD,aAAAA,EAAAjgD,CAAAA,CAAAA,EAAAA,GAAAM,EAAAA,IAAAA,KAAAN,CAAAA,CAAA,CAAA,CAAA;IAPD,MAAA,EAAAkgD,gBAAAC,gBAAAA,EAAAnN,oBAAAoN,oBAAAA,EAAAA,GAA6CR,YAAYt/C,EAOxD;IAAC,IAAAG;IAAAT,CAAAA,CAAA,CAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAAx/B,WAAAA,IAAApI,CAAAA,CAAA,CAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAAuI,aAAAA,IAAAnwC,CAAAA,CAAA,CAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,IAAAvxB,CAAAA,CAAAA,EAAAA,KAAAmgD,iBAAAvY,MAAAA,CAAAwI,SAAAA,IAAApwC,CAAAA,CAAA,CAAA,CAAA,KAAAmgD,iBAAAt/B,aAAAA,GAAAA,CAEQpgB,KAAAA,MAAA;QACR,MAAA+wC,gBAAA,CAAA,CAAA;QAA2C,KAAA,MAEtCjxC,gBAAsB2/C,iBAAcr/B,aAAAA,CACvC2wB,cAAatpC,IAAAA,CAAM3H,cAAc;QAGnC2/C,OAAAA,iBAActY,MAAAA,CAAAx/B,WAAAA,CAAA/C,KAAAA,CAAAA,GACd66C,iBAActY,MAAAA,CAAAuI,aAAAA,CAAA9qC,KAAAA,CAAAA,GACd66C,iBAActY,MAAAA,CAAArW,UAAAA,CAAAlsB,KAAAA,IACd66C,iBAActY,MAAAA,CAAAwI,SAAAA,CAAA/qC,KAAAA,CAAAA,GAAyB,MAAA;YAAA,KAAA,MAGhC7E,eAAqBgxC,cACxBhxC,YAAAA;YAGFsU,UAAUorC,iBAActY,MAAAA,CAAAx/B,WAAmB,GAC3C0M,UAAUorC,iBAActY,MAAAA,CAAAuI,aAAqB,GAC7Cr7B,UAAUorC,iBAActY,MAAAA,CAAArW,UAAkB,GAC1Czc,UAAUorC,iBAActY,MAAAA,CAAAwI,SAAiB;QAAC;IAAA,GAE7CpwC,CAAAA,CAAA,CAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAAx/B,WAAAA,EAAApI,CAAAA,CAAA,CAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAAuI,aAAAA,EAAAnwC,CAAAA,CAAA,CAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,EAAAvxB,CAAAA,CAAA,CAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAAwI,SAAAA,EAAApwC,CAAAA,CAAA,CAAA,CAAA,GAAAmgD,iBAAAt/B,aAAAA,EAAA7gB,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,KAAAT,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAkR;IAAAlR,CAAAA,CAAAA,EAAAA,KAAAmgD,mBAAAA,CAAEjvC,KAAAA;QAACgvC,gBAAc;KAAA,EAAClgD,CAAAA,CAAAA,EAAAA,GAAAmgD,kBAAAngD,CAAAA,CAAAA,EAAAA,GAAAkR,EAAAA,IAAAA,KAAAlR,CAAAA,CAAA,CAAA,CAAA,4MAtBnBU,YAAAA,EAAUD,IAsBPyQ,EAAgB;IAAC,IAAA8jC;IAAAh1C,CAAAA,CAAA,EAAA,CAAA,KAAAogD,qBAAA9O,OAAAA,GAAAA,CAMJ0D,KAAAlE,CAAAA,WAAA;QACRkC,qBAAkB1B,OAAAA,CAAAxnB,IAAAA,CAAcgnB,MAAM;IAAC,GACxC9wC,CAAAA,CAAA,EAAA,CAAA,GAAAogD,qBAAA9O,OAAAA,EAAAtxC,CAAAA,CAAAA,GAAAA,GAAAg1C,EAAAA,IAAAA,KAAAh1C,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAqgD;IAAArgD,CAAAA,CAAA,EAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,IAAAvxB,CAAAA,CAAA,EAAA,CAAA,KAAAg1C,KAAAA,CAJHqL,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,sBAAA;QACa,YAAAH,iBAActY,MAAAA,CAAArW,UAAAA;QAChB,UAAAyjB;IAAAA,CAET,GACDh1C,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,EAAAvxB,CAAAA,CAAAA,GAAAA,GAAAg1C,IAAAh1C,CAAAA,CAAAA,GAAAA,GAAAqgD,EAAAA,IAAAA,KAAArgD,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAsgD;IAAAtgD,CAAAA,CAAAA,GAAAA,KAAAogD,wBAAApgD,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAwC,QAAAA,GAAAA,CASI+9C,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,0BAAA,QAAA,EAAA;QAA2CtN,OAAAA;QACxCjzC,UAAAA,MAAKwC,QAAAA;IAAAA,CACR,GAAqCvC,CAAAA,CAAAA,GAAAA,GAAAogD,sBAAApgD,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAwC,QAAAA,EAAAvC,CAAAA,CAAAA,GAAAA,GAAAsgD,EAAAA,IAAAA,KAAAtgD,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAugD;IAAAvgD,CAAAA,CAAA,EAAA,CAAA,KAAAmgD,iBAAAjgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAwtB,YAAAA,IAAA71B,CAAAA,CAAAA,GAAAA,KAAAmgD,iBAAAjgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAmU,QAAAA,IAAAxc,CAAAA,CAAA,EAAA,CAAA,KAAAsgD,KAAAA,CARvCC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,wKAAC,QAAA,EAAA;QACS,QAAAL,iBAAchgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAmU,QAAAA;QAEpB,cAAA0jC,iBAAchgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAwtB,YAAAA;QAGhByqB,UAAAA;IAAAA,CAGF,GAAQtgD,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAjgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAwtB,YAAAA,EAAA71B,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAjgD,MAAAA,CAAAqc,SAAAA,CAAAlU,WAAAA,CAAAmU,QAAAA,EAAAxc,CAAAA,CAAAA,GAAAA,GAAAsgD,IAAAtgD,CAAAA,CAAAA,GAAAA,GAAAugD,EAAAA,IAAAA,KAAAvgD,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAwgD;IAAAxgD,CAAAA,CAAA,EAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,IAAAvxB,CAAAA,CAAA,EAAA,CAAA,KAAAugD,KAAAA,CAVVC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,kBAAA,QAAA,EAAA;QAAmC,OAAAN,iBAActY,MAAAA,CAAArW,UAAAA;QAC/CgvB,UAAAA;IAAAA,CAUF,GAA6BvgD,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAArW,UAAAA,EAAAvxB,CAAAA,CAAAA,GAAAA,GAAAugD,IAAAvgD,CAAAA,CAAAA,GAAAA,GAAAwgD,EAAAA,IAAAA,KAAAxgD,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAygD;IAAAzgD,CAAAA,CAAA,EAAA,CAAA,KAAAmgD,iBAAAvY,MAAAA,CAAAx/B,WAAAA,IAAApI,CAAAA,CAAA,EAAA,CAAA,KAAAwgD,KAAAA,CAZ/BC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,mBAAA,QAAA,EAAA;QAAoC,OAAAP,iBAActY,MAAAA,CAAAx/B,WAAAA;QAChDo4C,UAAAA;IAAAA,CAYF,GAA8BxgD,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAvY,MAAAA,CAAAx/B,WAAAA,EAAApI,CAAAA,CAAAA,GAAAA,GAAAwgD,IAAAxgD,CAAAA,CAAAA,GAAAA,GAAAygD,EAAAA,IAAAA,KAAAzgD,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA0gD;IAAA,OAAA1gD,CAAAA,CAAA,EAAA,CAAA,KAAAmgD,iBAAAjgD,MAAAA,IAAAF,CAAAA,CAAA,EAAA,CAAA,KAAAqgD,MAAArgD,CAAAA,CAAA,EAAA,CAAA,KAAAygD,KAAAA,CApBhCC,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,oLAAA,gBAAA,CAAA,QAAA,EAAA;QAA+B,OAAAR,iBAAchgD,MAAAA;QAC3CmgD,UAAAA;YAAAA;YAMAI;SAAAA;IAAAA,CAcF,GAAyBzgD,CAAAA,CAAA,EAAA,CAAA,GAAAmgD,iBAAAjgD,MAAAA,EAAAF,CAAAA,CAAAA,GAAAA,GAAAqgD,IAAArgD,CAAAA,CAAAA,GAAAA,GAAAygD,IAAAzgD,CAAAA,CAAAA,GAAAA,GAAA0gD,EAAAA,IAAAA,KAAA1gD,CAAAA,CAAA,EAAA,CAAA,EArBzB0gD;AAqByB;ACCtB,SAASC,aACdj6B,UAAAA,EACmB;IACnB,OAAOA;AACT;AC/FO,MAAMk6B,iCAAiCA,MAAA;IAAA,MAAA5gD,0KAAAC,EAAA,CAAA,GAC5CmI,wNAAoB6I,aAAAA,EAAArD,kBAA6B,GACjD,CAAAjJ,WAAAk8C,YAAA,CAAA,6MAAkCnvC,WAAAA,EAAAA,IAA8B;IAAC,IAAApR,IAAAG;IAAA,OAAAT,CAAAA,CAAAA,EAAAA,KAAAoI,cAAAA,CAEvD9H,KAAAA,MAAA;QACR,MAAAC,eAAqB6H,YAAWhI,EAAAA,CAAI,aAAWkI,CAAAA,UAAA;YAE7CorC,CAAAA,GAAAA,qMAAAA,CAAAA,kBAAAA,EAAA,MAAA;gBACEmN,aAAav4C,MAAK3D,SAAU;YAAC,CAC9B;QAAC,CACH;QAAC,OAAA,MAAA;YAGApE,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE3BC,KAAAA;QAAC2H,WAAW;KAAA,EAACpI,CAAAA,CAAAA,EAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,EAAAA,GAAAM,IAAAN,CAAAA,CAAAA,EAAAA,GAAAS,EAAAA,IAAAA,CAAAH,KAAAN,CAAAA,CAAA,CAAA,CAAA,EAAAS,KAAAT,CAAAA,CAAA,CAAA,CAAA,6MAXhBU,YAAAA,EAAUJ,IAWPG,EAAa,GAETkE;AAAS","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"debugId":null}},
    {"offset": {"line": 14202, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectionStartPoint} from '../utils'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const block = getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    context: snapshot.context,\n    block,\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","startPoint","getSelectionStartPoint","block","getFocusBlock","anchor","focus","startOfBlock","getBlockStartPoint","getSelectionText"],"mappings":";;;;;;;AASO,MAAMA,qBAA8CC,CAAAA,aAAa;IACtE,IAAI,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACpB,OAAO;IAGT,MAAMC,6MAAaC,yBAAAA,EAAuBJ,SAASC,OAAAA,CAAQC,SAAS,GAC9DG,QAAQC,gOAAAA,EAAc;QAC1B,GAAGN,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQJ;gBACRK,OAAOL;YAAAA;QACT;IACF,CACD;IAED,IAAI,CAACE,OACH,OAAO;IAGT,MAAMI,+MAAeC,qBAAAA,EAAmB;QACtCT,SAASD,SAASC,OAAAA;QAClBI;IAAAA,CACD;IAED,uNAAOM,mBAAAA,EAAiB;QACtB,GAAGX,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQE;gBACRD,OAAOL;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14245, "column": 0}, "map": {"version":3,"file":"util.merge-text-blocks.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.is-text-block.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isTypedObject} from '../internal-utils/asserters'\n\n/**\n * @public\n */\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return isTypedObject(block) && block._type === context.schema.block.name\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {isTextBlock} from './util.is-text-block'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {refreshKeys: true, validateFields: true},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["isTextBlock","context","block","isTypedObject","_type","schema","name","mergeTextBlocks","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","options","refreshKeys","validateFields","children","markDefs"],"mappings":";;;;;;AAOO,SAASA,YACdC,OAAAA,EACAC,KAAAA,EACgC;IAChC,uMAAOC,gBAAAA,EAAcD,KAAK,KAAKA,MAAME,KAAAA,KAAUH,QAAQI,MAAAA,CAAOH,KAAAA,CAAMI,IAAAA;AACtE;ACJO,SAASC,gBAAgB,EAC9BN,OAAAA,EACAO,WAAAA,EACAC,aAAAA,EAKF,EAAG;IACD,MAAMC,sNAAsBC,aAAAA,EAAW;QACrCV;QACAC,OAAOO;QACPG,SAAS;YAACC,aAAa,CAAA;YAAMC,gBAAgB,CAAA;QAAA;IAAI,CAClD;IAED,OAAI,CAACJ,uBAAuB,CAACV,YAAYC,SAASS,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHO,UAAU,CAAC;eAAGP,YAAYO,QAAAA,EAAU;eAAGL,oBAAoBK,QAAQ;SAAA;QACnEC,UAAU,CACR;eAAIR,YAAYQ,QAAAA,IAAY,CAAA,CAAA,EAC5B;eAAIN,oBAAoBM,QAAAA,IAAY,CAAA,CAAG;SAAA;IAAA;AAG7C","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 14283, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/rehanuddinqazi/Developer/projects/majarah-ui/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {effect, execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            context: {\n              schema: snapshot.context.schema,\n              value: snapshot.context.value,\n            },\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          context: snapshot.context,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                context: {\n                  schema: snapshot.context.schema,\n                  value: snapshot.context.value,\n                },\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              context: {\n                schema: snapshot.context.schema,\n                value: snapshot.context.value,\n              },\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [execute(event)],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        execute({\n          type: 'decorator.add',\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        }),\n        // Delete the suffix\n        execute({\n          type: 'delete.text',\n          at: suffixOffsets,\n        }),\n        // Delete the prefix\n        execute({\n          type: 'delete.text',\n          at: prefixOffsets,\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        execute({\n          type: 'decorator.remove',\n          decorator,\n        }),\n        effect(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset:\n              suffixOffsets.anchor.offset -\n              (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n          })\n        }),\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {effect, execute, forward} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\n/**\n * @beta\n * @deprecated Install the plugin from `@portabletext/plugin-character-pair-decorator`\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.at) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        ({event}, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n          forward(event),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          execute({\n            type: 'history.undo',\n          }),\n          effect(() => {\n            sendBack({type: 'delete.backward'})\n          }),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/relay-machine'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        execute({\n          type: 'insert.text',\n          text: ' ',\n        }),\n      ],\n      (_, {focusTextBlock, style}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: 2,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacter,\n        }),\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        execute({\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        }),\n        execute({\n          type: 'delete.text',\n          at: hrBlockOffsets,\n        }),\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacters,\n        }),\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isTextBlock(snapshot.context, focusBlock.node)\n          ? [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'delete.block',\n                at: focusBlock.path,\n              }),\n            ]\n          : [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, level}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: level + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        execute({\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        }),\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        execute({\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: listItemLength + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n * @deprecated Install the plugin from `@portabletext/plugin-markdown-shortcuts`\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, execute, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [execute({type: 'delete', at: selection})]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block)\n      ) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        execute({\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      const textBlocks = event.blocks.filter((block) =>\n        utils.isTextBlock(snapshot.context, block),\n      )\n\n      if (textBlocks.length === 0) {\n        return false\n      }\n\n      return textBlocks.reduce((targetBlock, incomingBlock) => {\n        return utils.mergeTextBlocks({\n          context: snapshot.context,\n          targetBlock,\n          incomingBlock,\n        })\n      })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    actions: [],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n *\n * @deprecated Install the plugin from `@portabletext/plugin-one-line`\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","execute","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","forward","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","EventListenerPlugin","useEffectEvent","subscription","unsubscribe","createMarkdownBehaviors","automaticBlockquoteOnSpace","selectionCollapsed","focusSpan","spanSelectionPointToBlockOffset","_key","node","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","style","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","isTextBlock","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList","MarkdownPlugin","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","select","textBlocks","blocks","filter","reduce","targetBlock","incomingBlock","raise","OneLinePlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}}]
}